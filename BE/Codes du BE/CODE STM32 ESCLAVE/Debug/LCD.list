
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007468  08007468  00017468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007500  08007500  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007508  08007508  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000074  08007584  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08007584  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d144  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ef  00000000  00000000  0003d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  000408d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00041c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002973c  00000000  00000000  00042ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6c4  00000000  00000000  0006c60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6931  00000000  00000000  00086cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d601  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  0017d654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800744c 	.word	0x0800744c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800744c 	.word	0x0800744c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <DWT_Delay_us>:

uint32_t DWT_Delay_Init(void);

// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <DWT_Delay_us+0x48>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e46:	f003 fa11 	bl	800426c <HAL_RCC_GetHCLKFreq>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <DWT_Delay_us+0x4c>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000e60:	bf00      	nop
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <DWT_Delay_us+0x48>)
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1ad2      	subs	r2, r2, r3
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3f6      	bcc.n	8000e62 <DWT_Delay_us+0x2a>
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e0001000 	.word	0xe0001000
 8000e84:	431bde83 	.word	0x431bde83

08000e88 <Data_Output>:
#include "HT.h"
#include "timer.h"
#include "stm32l4xx_hal.h"

void Data_Output (GPIO_TypeDef *PORT, uint16_t PIN) //direction vers le capteur
  {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  	GPIO_InitStruct.Pin = PIN;
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //pushpull
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f001 fbb6 	bl	8002624 <HAL_GPIO_Init>
  }
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <Data_Input>:

void Data_Input (GPIO_TypeDef *PORT, uint16_t PIN) //direction vers le microcontroleur
  {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  	GPIO_InitStruct.Pin = PIN;
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f001 fb9a 	bl	8002624 <HAL_GPIO_Init>
  }
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <Read_data>:

void Read_data (uint8_t *data)
  {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  	int i, k;
  	for (i=0;i<8;i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e057      	b.n	8000fb6 <Read_data+0xbe>
  	{
  		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000f06:	2102      	movs	r1, #2
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f001 fd34 	bl	8002978 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d11d      	bne.n	8000f52 <Read_data+0x5a>
  		{
  			(*data)&= ~(1<<(7-i)); //data bit is 0
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b25a      	sxtb	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8000f38:	bf00      	nop
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f001 fd1a 	bl	8002978 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f7      	beq.n	8000f3a <Read_data+0x42>
  			DWT_Delay_us(40);
 8000f4a:	2028      	movs	r0, #40	; 0x28
 8000f4c:	f7ff ff74 	bl	8000e38 <DWT_Delay_us>
 8000f50:	e02e      	b.n	8000fb0 <Read_data+0xb8>
  		}
  		else                       //data bit is 1
  		{
  			(*data)|= (1<<(7-i));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	701a      	strb	r2, [r3, #0]
  			for (k=0;k<1000;k++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	e00a      	b.n	8000f8c <Read_data+0x94>
  			{
  				if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000f76:	2102      	movs	r1, #2
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f001 fcfc 	bl	8002978 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d007      	beq.n	8000f96 <Read_data+0x9e>
  			for (k=0;k<1000;k++)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f92:	dbf0      	blt.n	8000f76 <Read_data+0x7e>
 8000f94:	e000      	b.n	8000f98 <Read_data+0xa0>
  				  {
  				  	break;
 8000f96:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8000f98:	bf00      	nop
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f001 fcea 	bl	8002978 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f7      	beq.n	8000f9a <Read_data+0xa2>
  			DWT_Delay_us(40);
 8000faa:	2028      	movs	r0, #40	; 0x28
 8000fac:	f7ff ff44 	bl	8000e38 <DWT_Delay_us>
  	for (i=0;i<8;i++)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	dda4      	ble.n	8000f06 <Read_data+0xe>
  		}
  	 }
  }
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <lcd_init>:




void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f043 030c 	orr.w	r3, r3, #12
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8000ff4:	f107 0118 	add.w	r1, r7, #24
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	486c      	ldr	r0, [pc, #432]	; (80011b0 <lcd_init+0x1e8>)
 8000ffe:	f004 f9b3 	bl	8005368 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001002:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001006:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001008:	f107 0114 	add.w	r1, r7, #20
 800100c:	230a      	movs	r3, #10
 800100e:	2202      	movs	r2, #2
 8001010:	4867      	ldr	r0, [pc, #412]	; (80011b0 <lcd_init+0x1e8>)
 8001012:	f004 f9a9 	bl	8005368 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001016:	2364      	movs	r3, #100	; 0x64
 8001018:	2205      	movs	r2, #5
 800101a:	217c      	movs	r1, #124	; 0x7c
 800101c:	69f8      	ldr	r0, [r7, #28]
 800101e:	f001 ff55 	bl	8002ecc <HAL_I2C_IsDeviceReady>
 8001022:	4603      	mov	r3, r0
 8001024:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001026:	f107 0113 	add.w	r1, r7, #19
 800102a:	230a      	movs	r3, #10
 800102c:	2201      	movs	r2, #1
 800102e:	4860      	ldr	r0, [pc, #384]	; (80011b0 <lcd_init+0x1e8>)
 8001030:	f004 f99a 	bl	8005368 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001034:	2032      	movs	r0, #50	; 0x32
 8001036:	f001 f941 	bl	80022bc <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 800103a:	f107 0218 	add.w	r2, r7, #24
 800103e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2302      	movs	r3, #2
 8001046:	217c      	movs	r1, #124	; 0x7c
 8001048:	69f8      	ldr	r0, [r7, #28]
 800104a:	f001 fd55 	bl	8002af8 <HAL_I2C_Master_Transmit>
 800104e:	4603      	mov	r3, r0
 8001050:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001052:	f107 0112 	add.w	r1, r7, #18
 8001056:	230a      	movs	r3, #10
 8001058:	2201      	movs	r2, #1
 800105a:	4855      	ldr	r0, [pc, #340]	; (80011b0 <lcd_init+0x1e8>)
 800105c:	f004 f984 	bl	8005368 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001060:	2032      	movs	r0, #50	; 0x32
 8001062:	f001 f92b 	bl	80022bc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001066:	f107 0218 	add.w	r2, r7, #24
 800106a:	f241 3388 	movw	r3, #5000	; 0x1388
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	217c      	movs	r1, #124	; 0x7c
 8001074:	69f8      	ldr	r0, [r7, #28]
 8001076:	f001 fd3f 	bl	8002af8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800107a:	2005      	movs	r0, #5
 800107c:	f001 f91e 	bl	80022bc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001080:	f107 0218 	add.w	r2, r7, #24
 8001084:	f241 3388 	movw	r3, #5000	; 0x1388
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2302      	movs	r3, #2
 800108c:	217c      	movs	r1, #124	; 0x7c
 800108e:	69f8      	ldr	r0, [r7, #28]
 8001090:	f001 fd32 	bl	8002af8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2204      	movs	r2, #4
 8001098:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80010a6:	f107 0218 	add.w	r2, r7, #24
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2302      	movs	r3, #2
 80010b2:	217c      	movs	r1, #124	; 0x7c
 80010b4:	69f8      	ldr	r0, [r7, #28]
 80010b6:	f001 fd1f 	bl	8002af8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80010ba:	2301      	movs	r3, #1
 80010bc:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80010be:	f107 0218 	add.w	r2, r7, #24
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2302      	movs	r3, #2
 80010ca:	217c      	movs	r1, #124	; 0x7c
 80010cc:	69f8      	ldr	r0, [r7, #28]
 80010ce:	f001 fd13 	bl	8002af8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80010d2:	2002      	movs	r0, #2
 80010d4:	f001 f8f2 	bl	80022bc <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2202      	movs	r2, #2
 80010dc:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80010ea:	f107 0218 	add.w	r2, r7, #24
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2302      	movs	r3, #2
 80010f6:	217c      	movs	r1, #124	; 0x7c
 80010f8:	69f8      	ldr	r0, [r7, #28]
 80010fa:	f001 fcfd 	bl	8002af8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80010fe:	2300      	movs	r3, #0
 8001100:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001106:	f107 0210 	add.w	r2, r7, #16
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2302      	movs	r3, #2
 8001112:	21c4      	movs	r1, #196	; 0xc4
 8001114:	69f8      	ldr	r0, [r7, #28]
 8001116:	f001 fcef 	bl	8002af8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 800111a:	2308      	movs	r3, #8
 800111c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800111e:	23ff      	movs	r3, #255	; 0xff
 8001120:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001122:	f107 0210 	add.w	r2, r7, #16
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2302      	movs	r3, #2
 800112e:	21c4      	movs	r1, #196	; 0xc4
 8001130:	69f8      	ldr	r0, [r7, #28]
 8001132:	f001 fce1 	bl	8002af8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001136:	2301      	movs	r3, #1
 8001138:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 800113a:	2320      	movs	r3, #32
 800113c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800113e:	f107 0210 	add.w	r2, r7, #16
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2302      	movs	r3, #2
 800114a:	21c4      	movs	r1, #196	; 0xc4
 800114c:	69f8      	ldr	r0, [r7, #28]
 800114e:	f001 fcd3 	bl	8002af8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001152:	2304      	movs	r3, #4
 8001154:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001156:	23ff      	movs	r3, #255	; 0xff
 8001158:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800115a:	f107 020c 	add.w	r2, r7, #12
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2302      	movs	r3, #2
 8001166:	21c4      	movs	r1, #196	; 0xc4
 8001168:	69f8      	ldr	r0, [r7, #28]
 800116a:	f001 fcc5 	bl	8002af8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800116e:	2303      	movs	r3, #3
 8001170:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001172:	23ff      	movs	r3, #255	; 0xff
 8001174:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001176:	f107 020c 	add.w	r2, r7, #12
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2302      	movs	r3, #2
 8001182:	21c4      	movs	r1, #196	; 0xc4
 8001184:	69f8      	ldr	r0, [r7, #28]
 8001186:	f001 fcb7 	bl	8002af8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800118a:	2302      	movs	r3, #2
 800118c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800118e:	23ff      	movs	r3, #255	; 0xff
 8001190:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001192:	f107 020c 	add.w	r2, r7, #12
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2302      	movs	r3, #2
 800119e:	21c4      	movs	r1, #196	; 0xc4
 80011a0:	69f8      	ldr	r0, [r7, #28]
 80011a2:	f001 fca9 	bl	8002af8 <HAL_I2C_Master_Transmit>


}
 80011a6:	bf00      	nop
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000294 	.word	0x20000294

080011b4 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80011c2:	2340      	movs	r3, #64	; 0x40
 80011c4:	733b      	strb	r3, [r7, #12]
    int i=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80011ca:	e011      	b.n	80011f0 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80011d6:	f107 020c 	add.w	r2, r7, #12
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2302      	movs	r3, #2
 80011e2:	217c      	movs	r1, #124	; 0x7c
 80011e4:	6938      	ldr	r0, [r7, #16]
 80011e6:	f001 fc87 	bl	8002af8 <HAL_I2C_Master_Transmit>
            i++;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e7      	bne.n	80011cc <lcd_print+0x18>
   }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af02      	add	r7, sp, #8
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	70fb      	strb	r3, [r7, #3]
 8001212:	4613      	mov	r3, r2
 8001214:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800121a:	78bb      	ldrb	r3, [r7, #2]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d104      	bne.n	800122a <lcd_position+0x24>
    {
        col = col | 0x80;
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001226:	70fb      	strb	r3, [r7, #3]
 8001228:	e003      	b.n	8001232 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001230:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800123a:	f107 0208 	add.w	r2, r7, #8
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2302      	movs	r3, #2
 8001246:	217c      	movs	r1, #124	; 0x7c
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f001 fc55 	bl	8002af8 <HAL_I2C_Master_Transmit>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af02      	add	r7, sp, #8
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	460b      	mov	r3, r1
 8001264:	71bb      	strb	r3, [r7, #6]
 8001266:	4613      	mov	r3, r2
 8001268:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <reglagecouleur+0x74>)
 800126c:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 800126e:	2304      	movs	r3, #4
 8001270:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8001276:	f107 0210 	add.w	r2, r7, #16
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2302      	movs	r3, #2
 8001282:	21c4      	movs	r1, #196	; 0xc4
 8001284:	6978      	ldr	r0, [r7, #20]
 8001286:	f001 fc37 	bl	8002af8 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 800128a:	2303      	movs	r3, #3
 800128c:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8001292:	f107 020c 	add.w	r2, r7, #12
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2302      	movs	r3, #2
 800129e:	21c4      	movs	r1, #196	; 0xc4
 80012a0:	6978      	ldr	r0, [r7, #20]
 80012a2:	f001 fc29 	bl	8002af8 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 80012a6:	2302      	movs	r3, #2
 80012a8:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 80012aa:	797b      	ldrb	r3, [r7, #5]
 80012ac:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 80012ae:	f107 0208 	add.w	r2, r7, #8
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2302      	movs	r3, #2
 80012ba:	21c4      	movs	r1, #196	; 0xc4
 80012bc:	6978      	ldr	r0, [r7, #20]
 80012be:	f001 fc1b 	bl	8002af8 <HAL_I2C_Master_Transmit>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000ec 	.word	0x200000ec

080012d0 <TMP_Receive>:
#define TIMEOUT 5000
#define ADRESSETEMP (0x44<<1)

I2C_HandleTypeDef hi2c_tmp;
void TMP_Receive(uint16_t address, uint8_t *Data, uint16_t len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	80fb      	strh	r3, [r7, #6]
 80012dc:	4613      	mov	r3, r2
 80012de:	80bb      	strh	r3, [r7, #4]


	 HAL_I2C_Master_Receive(&hi2c_tmp, address, Data, len, TIMEOUT);
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	88f9      	ldrh	r1, [r7, #6]
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	9200      	str	r2, [sp, #0]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <TMP_Receive+0x2c>)
 80012ee:	f001 fcf7 	bl	8002ce0 <HAL_I2C_Master_Receive>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000a0 	.word	0x200000a0

08001300 <TMP_init>:

void TMP_init(I2C_HandleTypeDef hi2c)
{
 8001300:	b084      	sub	sp, #16
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
 8001306:	f107 0c08 	add.w	ip, r7, #8
 800130a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c_tmp = hi2c;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <TMP_init+0x2c>)
 8001310:	4618      	mov	r0, r3
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	224c      	movs	r2, #76	; 0x4c
 8001318:	4619      	mov	r1, r3
 800131a:	f005 f8cb 	bl	80064b4 <memcpy>
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001326:	b004      	add	sp, #16
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200000a0 	.word	0x200000a0

08001330 <TMP_Transmit>:
void TMP_Transmit(uint16_t address, uint8_t *Data, uint16_t len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af02      	add	r7, sp, #8
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	80fb      	strh	r3, [r7, #6]
 800133c:	4613      	mov	r3, r2
 800133e:	80bb      	strh	r3, [r7, #4]
	 HAL_I2C_Master_Transmit(&hi2c_tmp, address, Data, len, TIMEOUT);
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	88f9      	ldrh	r1, [r7, #6]
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	9200      	str	r2, [sp, #0]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <TMP_Transmit+0x2c>)
 800134e:	f001 fbd3 	bl	8002af8 <HAL_I2C_Master_Transmit>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000a0 	.word	0x200000a0

08001360 <Temp_read>:

void Temp_read( float *temp, float *humidity)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	float temperature=0;
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

	uint8_t Data[6]={0x24, 0x00};
 8001370:	2324      	movs	r3, #36	; 0x24
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	2300      	movs	r3, #0
 8001376:	823b      	strh	r3, [r7, #16]
	TMP_Transmit(ADRESSETEMP, Data, 2);
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2202      	movs	r2, #2
 800137e:	4619      	mov	r1, r3
 8001380:	2088      	movs	r0, #136	; 0x88
 8001382:	f7ff ffd5 	bl	8001330 <TMP_Transmit>
	HAL_Delay(50);
 8001386:	2032      	movs	r0, #50	; 0x32
 8001388:	f000 ff98 	bl	80022bc <HAL_Delay>
	TMP_Receive(ADRESSETEMP, Data, 6);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2206      	movs	r2, #6
 8001392:	4619      	mov	r1, r3
 8001394:	2088      	movs	r0, #136	; 0x88
 8001396:	f7ff ff9b 	bl	80012d0 <TMP_Receive>

	temperature = Data[0] * 256 + Data[1];
 800139a:	7b3b      	ldrb	r3, [r7, #12]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	7b7a      	ldrb	r2, [r7, #13]
 80013a0:	4413      	add	r3, r2
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	edc7 7a05 	vstr	s15, [r7, #20]
	temperature = -45 + (175 * temperature / 65535.0);
 80013ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80013b2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001488 <Temp_read+0x128>
 80013b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ba:	ee17 0a90 	vmov	r0, s15
 80013be:	f7ff f867 	bl	8000490 <__aeabi_f2d>
 80013c2:	a32f      	add	r3, pc, #188	; (adr r3, 8001480 <Temp_read+0x120>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f9e4 	bl	8000794 <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <Temp_read+0x12c>)
 80013da:	f7fe fef9 	bl	80001d0 <__aeabi_dsub>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb5b 	bl	8000aa0 <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	617b      	str	r3, [r7, #20]
	*temp=-45+175*(Data[0]<<8 | Data[1])/65535.0 ;
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	7b7a      	ldrb	r2, [r7, #13]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	22af      	movs	r2, #175	; 0xaf
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f835 	bl	800046c <__aeabi_i2d>
 8001402:	a31f      	add	r3, pc, #124	; (adr r3, 8001480 <Temp_read+0x120>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f9c4 	bl	8000794 <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <Temp_read+0x12c>)
 800141a:	f7fe fed9 	bl	80001d0 <__aeabi_dsub>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fb3b 	bl	8000aa0 <__aeabi_d2f>
 800142a:	4602      	mov	r2, r0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	601a      	str	r2, [r3, #0]
	*humidity=-45+175*(Data[3]<<8 | Data[4])/65535.0 ;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	7c3a      	ldrb	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	22af      	movs	r2, #175	; 0xaf
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f814 	bl	800046c <__aeabi_i2d>
 8001444:	a30e      	add	r3, pc, #56	; (adr r3, 8001480 <Temp_read+0x120>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f9a3 	bl	8000794 <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <Temp_read+0x12c>)
 800145c:	f7fe feb8 	bl	80001d0 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fb1a 	bl	8000aa0 <__aeabi_d2f>
 800146c:	4602      	mov	r2, r0
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	601a      	str	r2, [r3, #0]

}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	00000000 	.word	0x00000000
 8001484:	40efffe0 	.word	0x40efffe0
 8001488:	432f0000 	.word	0x432f0000
 800148c:	40468000 	.word	0x40468000

08001490 <reverse>:
 */

#include "caracter.h"

void reverse(char *str, int len)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
    while (i<j)
 80014a4:	e018      	b.n	80014d8 <reverse+0x48>
    {
        temp = str[i];
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	441a      	add	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	440b      	add	r3, r1
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
        i++; j--;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	613b      	str	r3, [r7, #16]
    while (i<j)
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbe2      	blt.n	80014a6 <reverse+0x16>
    }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <intToStr>:
// fonction qui converti un entier en chaine de caractère
int intToStr(int x, char str[], int d)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
    int i = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
    while (x)
 8001500:	e01d      	b.n	800153e <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <intToStr+0x8c>)
 8001506:	fb83 1302 	smull	r1, r3, r3, r2
 800150a:	1099      	asrs	r1, r3, #2
 800150c:	17d3      	asrs	r3, r2, #31
 800150e:	1ac9      	subs	r1, r1, r3
 8001510:	460b      	mov	r3, r1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	1ad1      	subs	r1, r2, r3
 800151a:	b2ca      	uxtb	r2, r1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	1c59      	adds	r1, r3, #1
 8001520:	6179      	str	r1, [r7, #20]
 8001522:	4619      	mov	r1, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	440b      	add	r3, r1
 8001528:	3230      	adds	r2, #48	; 0x30
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
        x = x/10;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <intToStr+0x8c>)
 8001532:	fb82 1203 	smull	r1, r2, r2, r3
 8001536:	1092      	asrs	r2, r2, #2
 8001538:	17db      	asrs	r3, r3, #31
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	60fb      	str	r3, [r7, #12]
    while (x)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1de      	bne.n	8001502 <intToStr+0x12>
    }

    while (i < d)
 8001544:	e007      	b.n	8001556 <intToStr+0x66>
        str[i++] = '0';
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	617a      	str	r2, [r7, #20]
 800154c:	461a      	mov	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4413      	add	r3, r2
 8001552:	2230      	movs	r2, #48	; 0x30
 8001554:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	429a      	cmp	r2, r3
 800155c:	dbf3      	blt.n	8001546 <intToStr+0x56>

    reverse(str, i);
 800155e:	6979      	ldr	r1, [r7, #20]
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f7ff ff95 	bl	8001490 <reverse>
    str[i] = '\0';
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	4413      	add	r3, r2
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
    return i;
 8001570:	697b      	ldr	r3, [r7, #20]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	66666667 	.word	0x66666667

08001580 <ftoat>:
// fonction qui converti un réel en chaine de caractère
void ftoat(float n, char *res, int afterpoint)
{
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	ed87 0a03 	vstr	s0, [r7, #12]
 800158a:	60b8      	str	r0, [r7, #8]
 800158c:	6079      	str	r1, [r7, #4]
    // on extrait avant tout la partie entiere
    int ipart = (int)n;
 800158e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001596:	ee17 3a90 	vmov	r3, s15
 800159a:	61fb      	str	r3, [r7, #28]

    // on extrait maintenant la partie decimal
    float fpart = n - (float)ipart;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ae:	edc7 7a06 	vstr	s15, [r7, #24]

    // on convertie la partie entiere en chaine de caractère
    int i = intToStr(ipart, res, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	69f8      	ldr	r0, [r7, #28]
 80015b8:	f7ff ff9a 	bl	80014f0 <intToStr>
 80015bc:	6178      	str	r0, [r7, #20]

    // afterpoint correspond au nombre de chiffre apres la virgule souhaiter
    if (afterpoint != 0)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d030      	beq.n	8001626 <ftoat+0xa6>
    {
        res[i] = '.';  // add dot
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4413      	add	r3, r2
 80015ca:	222e      	movs	r2, #46	; 0x2e
 80015cc:	701a      	strb	r2, [r3, #0]


        fpart = fpart * pow(10, afterpoint);
 80015ce:	69b8      	ldr	r0, [r7, #24]
 80015d0:	f7fe ff5e 	bl	8000490 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7fe ff47 	bl	800046c <__aeabi_i2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	ec43 2b11 	vmov	d1, r2, r3
 80015e6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001630 <ftoat+0xb0>
 80015ea:	f004 ff79 	bl	80064e0 <pow>
 80015ee:	ec53 2b10 	vmov	r2, r3, d0
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe ffa3 	bl	8000540 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fa4d 	bl	8000aa0 <__aeabi_d2f>
 8001606:	4603      	mov	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800160a:	edd7 7a06 	vldr	s15, [r7, #24]
 800160e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4619      	mov	r1, r3
 800161e:	ee17 0a90 	vmov	r0, s15
 8001622:	f7ff ff65 	bl	80014f0 <intToStr>
    }
}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bdb0      	pop	{r4, r5, r7, pc}
 800162e:	bf00      	nop
 8001630:	00000000 	.word	0x00000000
 8001634:	40240000 	.word	0x40240000

08001638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <MX_GPIO_Init+0xdc>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a30      	ldr	r2, [pc, #192]	; (8001714 <MX_GPIO_Init+0xdc>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <MX_GPIO_Init+0xdc>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <MX_GPIO_Init+0xdc>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a2a      	ldr	r2, [pc, #168]	; (8001714 <MX_GPIO_Init+0xdc>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_GPIO_Init+0xdc>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <MX_GPIO_Init+0xdc>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a24      	ldr	r2, [pc, #144]	; (8001714 <MX_GPIO_Init+0xdc>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <MX_GPIO_Init+0xdc>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_GPIO_Init+0xdc>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <MX_GPIO_Init+0xdc>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_GPIO_Init+0xdc>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2120      	movs	r1, #32
 80016b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b6:	f001 f977 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4811      	ldr	r0, [pc, #68]	; (8001718 <MX_GPIO_Init+0xe0>)
 80016d2:	f000 ffa7 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016d6:	2320      	movs	r3, #32
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f000 ff98 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f8:	2303      	movs	r3, #3
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_GPIO_Init+0xe0>)
 8001708:	f000 ff8c 	bl	8002624 <HAL_GPIO_Init>

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	48000800 	.word	0x48000800

0800171c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MX_I2C1_Init+0x74>)
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <MX_I2C1_Init+0x78>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_I2C1_Init+0x74>)
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <MX_I2C1_Init+0x7c>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_I2C1_Init+0x74>)
 8001734:	2201      	movs	r2, #1
 8001736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_I2C1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_I2C1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001756:	480e      	ldr	r0, [pc, #56]	; (8001790 <MX_I2C1_Init+0x74>)
 8001758:	f001 f93e 	bl	80029d8 <HAL_I2C_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001762:	f000 fa7c 	bl	8001c5e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <MX_I2C1_Init+0x74>)
 800176a:	f001 ff2f 	bl	80035cc <HAL_I2CEx_ConfigAnalogFilter>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001774:	f000 fa73 	bl	8001c5e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001778:	2100      	movs	r1, #0
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_I2C1_Init+0x74>)
 800177c:	f001 ff71 	bl	8003662 <HAL_I2CEx_ConfigDigitalFilter>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001786:	f000 fa6a 	bl	8001c5e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000ec 	.word	0x200000ec
 8001794:	40005400 	.word	0x40005400
 8001798:	10909cec 	.word	0x10909cec

0800179c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0ac      	sub	sp, #176	; 0xb0
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2288      	movs	r2, #136	; 0x88
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f004 fe87 	bl	80064d0 <memset>
  if(i2cHandle->Instance==I2C1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <HAL_I2C_MspInit+0xb0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d13b      	bne.n	8001844 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fddf 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017e4:	f000 fa3b 	bl	8001c5e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_I2C_MspInit+0xb4>)
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	4a18      	ldr	r2, [pc, #96]	; (8001850 <HAL_I2C_MspInit+0xb4>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_I2C_MspInit+0xb4>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001800:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001808:	2312      	movs	r3, #18
 800180a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181a:	2304      	movs	r3, #4
 800181c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001824:	4619      	mov	r1, r3
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <HAL_I2C_MspInit+0xb8>)
 8001828:	f000 fefc 	bl	8002624 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_I2C_MspInit+0xb4>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_I2C_MspInit+0xb4>)
 8001832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001836:	6593      	str	r3, [r2, #88]	; 0x58
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_I2C_MspInit+0xb4>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001844:	bf00      	nop
 8001846:	37b0      	adds	r7, #176	; 0xb0
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40005400 	.word	0x40005400
 8001850:	40021000 	.word	0x40021000
 8001854:	48000400 	.word	0x48000400

08001858 <DWT_Delay_us>:
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <DWT_Delay_us+0x48>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001866:	f002 fd01 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800186a:	4603      	mov	r3, r0
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <DWT_Delay_us+0x4c>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9b      	lsrs	r3, r3, #18
 8001874:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001880:	bf00      	nop
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <DWT_Delay_us+0x48>)
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad2      	subs	r2, r2, r3
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1acb      	subs	r3, r1, r3
 8001890:	429a      	cmp	r2, r3
 8001892:	d3f6      	bcc.n	8001882 <DWT_Delay_us+0x2a>
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e0001000 	.word	0xe0001000
 80018a4:	431bde83 	.word	0x431bde83

080018a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	b0a3      	sub	sp, #140	; 0x8c
 80018ac:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ae:	f000 fc89 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b2:	f000 f983 	bl	8001bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b6:	f7ff febf 	bl	8001638 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018ba:	f000 fb3b 	bl	8001f34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80018be:	f7ff ff2d 	bl	800171c <MX_I2C1_Init>
  MX_UART4_Init();
 80018c2:	f000 fad7 	bl	8001e74 <MX_UART4_Init>
  MX_TIM2_Init();
 80018c6:	f000 fa39 	bl	8001d3c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80018ca:	f000 fb03 	bl	8001ed4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 80018ce:	f000 faa1 	bl	8001e14 <DWT_Delay_Init>
  lcd_init(&hi2c1, &ok);
 80018d2:	49aa      	ldr	r1, [pc, #680]	; (8001b7c <main+0x2d4>)
 80018d4:	48aa      	ldr	r0, [pc, #680]	; (8001b80 <main+0x2d8>)
 80018d6:	f7ff fb77 	bl	8000fc8 <lcd_init>
   lcd_position(&hi2c1,0,0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	48a8      	ldr	r0, [pc, #672]	; (8001b80 <main+0x2d8>)
 80018e0:	f7ff fc91 	bl	8001206 <lcd_position>
   lcd_print(&hi2c1,"T: ");
 80018e4:	49a7      	ldr	r1, [pc, #668]	; (8001b84 <main+0x2dc>)
 80018e6:	48a6      	ldr	r0, [pc, #664]	; (8001b80 <main+0x2d8>)
 80018e8:	f7ff fc64 	bl	80011b4 <lcd_print>
   lcd_position(&hi2c1,0,1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2100      	movs	r1, #0
 80018f0:	48a3      	ldr	r0, [pc, #652]	; (8001b80 <main+0x2d8>)
 80018f2:	f7ff fc88 	bl	8001206 <lcd_position>
   lcd_print(&hi2c1,"H: ");
 80018f6:	49a4      	ldr	r1, [pc, #656]	; (8001b88 <main+0x2e0>)
 80018f8:	48a1      	ldr	r0, [pc, #644]	; (8001b80 <main+0x2d8>)
 80018fa:	f7ff fc5b 	bl	80011b4 <lcd_print>
   reglagecouleur(50,50,9);
 80018fe:	2209      	movs	r2, #9
 8001900:	2132      	movs	r1, #50	; 0x32
 8001902:	2032      	movs	r0, #50	; 0x32
 8001904:	f7ff fca8 	bl	8001258 <reglagecouleur>
   float temp=0;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
   float humidity=0;
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
   char ok;
   TMP_init(hi2c1);
 8001914:	4e9a      	ldr	r6, [pc, #616]	; (8001b80 <main+0x2d8>)
 8001916:	466d      	mov	r5, sp
 8001918:	f106 0410 	add.w	r4, r6, #16
 800191c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001928:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800192c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001930:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001934:	f7ff fce4 	bl	8001300 <TMP_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*	DHT22	*/
	  Data_Output(GPIOA, GPIO_PIN_1);
 8001938:	2102      	movs	r1, #2
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f7ff faa3 	bl	8000e88 <Data_Output>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2102      	movs	r1, #2
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f001 f82d 	bl	80029a8 <HAL_GPIO_WritePin>
	  DWT_Delay_us(1200);
 800194e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001952:	f7ff ff81 	bl	8001858 <DWT_Delay_us>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	2102      	movs	r1, #2
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f001 f823 	bl	80029a8 <HAL_GPIO_WritePin>
	  DWT_Delay_us(30);
 8001962:	201e      	movs	r0, #30
 8001964:	f7ff ff78 	bl	8001858 <DWT_Delay_us>
	  Data_Input(GPIOA, GPIO_PIN_1);
 8001968:	2102      	movs	r1, #2
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f7ff faa7 	bl	8000ec0 <Data_Input>


	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8001972:	bf00      	nop
 8001974:	2102      	movs	r1, #2
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197a:	f000 fffd 	bl	8002978 <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f7      	beq.n	8001974 <main+0xcc>
int k;
	  for (k=0;k<1000;k++)
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
 8001988:	e00a      	b.n	80019a0 <main+0xf8>
	 	  {
	 		  if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 800198a:	2102      	movs	r1, #2
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f000 fff2 	bl	8002978 <HAL_GPIO_ReadPin>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <main+0x102>
	  for (k=0;k<1000;k++)
 800199a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199c:	3301      	adds	r3, #1
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
 80019a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019a6:	dbf0      	blt.n	800198a <main+0xe2>
 80019a8:	e000      	b.n	80019ac <main+0x104>
	 		  {
	 	  	  	break;
 80019aa:	bf00      	nop
	 	  	  }
	 	  }

	 	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 80019ac:	bf00      	nop
 80019ae:	2102      	movs	r1, #2
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f000 ffe0 	bl	8002978 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f7      	beq.n	80019ae <main+0x106>
	 	  DWT_Delay_us(40);
 80019be:	2028      	movs	r0, #40	; 0x28
 80019c0:	f7ff ff4a 	bl	8001858 <DWT_Delay_us>

	 	  Read_data(&dataH1); //dans la library HT.c
 80019c4:	4871      	ldr	r0, [pc, #452]	; (8001b8c <main+0x2e4>)
 80019c6:	f7ff fa97 	bl	8000ef8 <Read_data>
	 	  Read_data(&dataH2);
 80019ca:	4871      	ldr	r0, [pc, #452]	; (8001b90 <main+0x2e8>)
 80019cc:	f7ff fa94 	bl	8000ef8 <Read_data>
	 	  Read_data(&dataT1);
 80019d0:	4870      	ldr	r0, [pc, #448]	; (8001b94 <main+0x2ec>)
 80019d2:	f7ff fa91 	bl	8000ef8 <Read_data>
	 	  Read_data(&dataT2);
 80019d6:	4870      	ldr	r0, [pc, #448]	; (8001b98 <main+0x2f0>)
 80019d8:	f7ff fa8e 	bl	8000ef8 <Read_data>
	 	  Read_data(&SUM);
 80019dc:	486f      	ldr	r0, [pc, #444]	; (8001b9c <main+0x2f4>)
 80019de:	f7ff fa8b 	bl	8000ef8 <Read_data>

	 	 // check = dataH1 + dataH2 + dataT1 + dataT2; //pour verifier la lecture dans le IDE

	 	  RH = (dataH1<<8) | dataH2;
 80019e2:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <main+0x2e4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	4b69      	ldr	r3, [pc, #420]	; (8001b90 <main+0x2e8>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <main+0x2f8>)
 80019f8:	801a      	strh	r2, [r3, #0]
	 	  TEMP = (dataT1<<8) | dataT2;
 80019fa:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <main+0x2ec>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <main+0x2f0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b65      	ldr	r3, [pc, #404]	; (8001ba4 <main+0x2fc>)
 8001a10:	801a      	strh	r2, [r3, #0]

	 	  Humidite = RH / 10.0;
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <main+0x2f8>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd28 	bl	800046c <__aeabi_i2d>
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <main+0x300>)
 8001a22:	f7fe feb7 	bl	8000794 <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f837 	bl	8000aa0 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a5d      	ldr	r2, [pc, #372]	; (8001bac <main+0x304>)
 8001a36:	6013      	str	r3, [r2, #0]
	 	  Temperature = TEMP / 10.0;
 8001a38:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <main+0x2fc>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd15 	bl	800046c <__aeabi_i2d>
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b58      	ldr	r3, [pc, #352]	; (8001ba8 <main+0x300>)
 8001a48:	f7fe fea4 	bl	8000794 <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff f824 	bl	8000aa0 <__aeabi_d2f>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a55      	ldr	r2, [pc, #340]	; (8001bb0 <main+0x308>)
 8001a5c:	6013      	str	r3, [r2, #0]

	 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //pour la prochaine lecture
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2102      	movs	r1, #2
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a66:	f000 ff9f 	bl	80029a8 <HAL_GPIO_WritePin>

	  /*Capteur I2C*/
	  char res [10];
	  char res1[10];

	  Temp_read(&temp, &humidity);
 8001a6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc73 	bl	8001360 <Temp_read>
Tmoyen = (temp + Temperature)/2;
 8001a7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001a7e:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <main+0x308>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
Hmoyen = (humidity + Humidite)/2;
 8001a94:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001a98:	4b44      	ldr	r3, [pc, #272]	; (8001bac <main+0x304>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aaa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	  ftoat (Tmoyen,res1,1);
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001aba:	f7ff fd61 	bl	8001580 <ftoat>
	//  lcd_position(&hi2c1,12,0);
	//  lcd_print(&hi2c1,res1);

	  ftoat (Hmoyen,res,1);
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001aca:	f7ff fd59 	bl	8001580 <ftoat>

	  char tel[10];
	  char tel1[10];


	  tel[0]='*';
 8001ace:	232a      	movs	r3, #42	; 0x2a
 8001ad0:	733b      	strb	r3, [r7, #12]
	  tel1[0]='*';
 8001ad2:	232a      	movs	r3, #42	; 0x2a
 8001ad4:	703b      	strb	r3, [r7, #0]
	  tel[1]='H';
 8001ad6:	2348      	movs	r3, #72	; 0x48
 8001ad8:	737b      	strb	r3, [r7, #13]
	  tel1[1]='T';
 8001ada:	2354      	movs	r3, #84	; 0x54
 8001adc:	707b      	strb	r3, [r7, #1]
	  for(int i=0; i<2;i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ae2:	e01a      	b.n	8001b1a <main+0x272>
	  {
		  tel[i+2]=res[i];
 8001ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001aee:	440a      	add	r2, r1
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001af6:	440b      	add	r3, r1
 8001af8:	f803 2c3c 	strb.w	r2, [r3, #-60]
		  tel1[i+2]=res1[i];
 8001afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afe:	3302      	adds	r3, #2
 8001b00:	f107 0118 	add.w	r1, r7, #24
 8001b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b06:	440a      	add	r2, r1
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b0e:	440b      	add	r3, r1
 8001b10:	f803 2c48 	strb.w	r2, [r3, #-72]
	  for(int i=0; i<2;i++)
 8001b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b16:	3301      	adds	r3, #1
 8001b18:	643b      	str	r3, [r7, #64]	; 0x40
 8001b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	dde1      	ble.n	8001ae4 <main+0x23c>
	  }

	  res[4]='H';
 8001b20:	2348      	movs	r3, #72	; 0x48
 8001b22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  res1[4]='T';
 8001b26:	2354      	movs	r3, #84	; 0x54
 8001b28:	773b      	strb	r3, [r7, #28]
	  HAL_UART_Transmit(&huart4, &res, 5, 1000);
 8001b2a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	2205      	movs	r2, #5
 8001b34:	481f      	ldr	r0, [pc, #124]	; (8001bb4 <main+0x30c>)
 8001b36:	f003 fc17 	bl	8005368 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart1, &tel,4,1000);
 8001b3a:	f107 010c 	add.w	r1, r7, #12
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	2204      	movs	r2, #4
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <main+0x310>)
 8001b46:	f003 fc0f 	bl	8005368 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b4e:	f000 fbb5 	bl	80022bc <HAL_Delay>
	  HAL_UART_Transmit(&huart4, &res1, 5, 1000);
 8001b52:	f107 0118 	add.w	r1, r7, #24
 8001b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	4815      	ldr	r0, [pc, #84]	; (8001bb4 <main+0x30c>)
 8001b5e:	f003 fc03 	bl	8005368 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, &tel1,4,1000);
 8001b62:	4639      	mov	r1, r7
 8001b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <main+0x310>)
 8001b6c:	f003 fbfc 	bl	8005368 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b74:	f000 fba2 	bl	80022bc <HAL_Delay>
  {
 8001b78:	e6de      	b.n	8001938 <main+0x90>
 8001b7a:	bf00      	nop
 8001b7c:	2000009c 	.word	0x2000009c
 8001b80:	200000ec 	.word	0x200000ec
 8001b84:	08007468 	.word	0x08007468
 8001b88:	0800746c 	.word	0x0800746c
 8001b8c:	20000139 	.word	0x20000139
 8001b90:	2000013c 	.word	0x2000013c
 8001b94:	2000013a 	.word	0x2000013a
 8001b98:	20000138 	.word	0x20000138
 8001b9c:	2000013b 	.word	0x2000013b
 8001ba0:	20000098 	.word	0x20000098
 8001ba4:	2000009a 	.word	0x2000009a
 8001ba8:	40240000 	.word	0x40240000
 8001bac:	20000094 	.word	0x20000094
 8001bb0:	20000090 	.word	0x20000090
 8001bb4:	20000210 	.word	0x20000210
 8001bb8:	20000140 	.word	0x20000140

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b096      	sub	sp, #88	; 0x58
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	2244      	movs	r2, #68	; 0x44
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fc80 	bl	80064d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bde:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001be2:	f001 fd99 	bl	8003718 <HAL_PWREx_ControlVoltageScaling>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bec:	f000 f837 	bl	8001c5e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c02:	2302      	movs	r3, #2
 8001c04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c12:	2302      	movs	r3, #2
 8001c14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c16:	2302      	movs	r3, #2
 8001c18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 fdd0 	bl	80037c4 <HAL_RCC_OscConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c2a:	f000 f818 	bl	8001c5e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2e:	230f      	movs	r3, #15
 8001c30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c32:	2303      	movs	r3, #3
 8001c34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	2104      	movs	r1, #4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 f9a2 	bl	8003f90 <HAL_RCC_ClockConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c52:	f000 f804 	bl	8001c5e <Error_Handler>
  }
}
 8001c56:	bf00      	nop
 8001c58:	3758      	adds	r7, #88	; 0x58
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c62:	b672      	cpsid	i
}
 8001c64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <Error_Handler+0x8>

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_MspInit+0x44>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_MspInit+0x44>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_MspInit+0x44>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_MspInit+0x44>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_MspInit+0x44>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6593      	str	r3, [r2, #88]	; 0x58
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_MspInit+0x44>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfc:	f000 fabe 	bl	800227c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <UART4_IRQHandler+0x10>)
 8001d0a:	f003 fbc1 	bl	8005490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000210 	.word	0x20000210

08001d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SystemInit+0x20>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <SystemInit+0x20>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001d64:	224f      	movs	r2, #79	; 0x4f
 8001d66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001d84:	f002 ffc6 	bl	8004d14 <HAL_TIM_Base_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d8e:	f7ff ff66 	bl	8001c5e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001da0:	f003 f80f 	bl	8004dc2 <HAL_TIM_ConfigClockSource>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001daa:	f7ff ff58 	bl	8001c5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <MX_TIM2_Init+0x98>)
 8001dbc:	f003 f9fe 	bl	80051bc <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dc6:	f7ff ff4a 	bl	8001c5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001c4 	.word	0x200001c4

08001dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d10b      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_TIM_Base_MspInit+0x38>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <HAL_TIM_Base_MspInit+0x38>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6593      	str	r3, [r2, #88]	; 0x58
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_TIM_Base_MspInit+0x38>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000

08001e14 <DWT_Delay_Init>:

#include "timer.h"
#include "stm32l4xx_hal.h"

uint32_t DWT_Delay_Init(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <DWT_Delay_Init+0x58>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <DWT_Delay_Init+0x58>)
 8001e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e22:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <DWT_Delay_Init+0x58>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <DWT_Delay_Init+0x58>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <DWT_Delay_Init+0x5c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <DWT_Delay_Init+0x5c>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <DWT_Delay_Init+0x5c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <DWT_Delay_Init+0x5c>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <DWT_Delay_Init+0x5c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001e4e:	bf00      	nop
    __ASM volatile ("NOP");
 8001e50:	bf00      	nop
    __ASM volatile ("NOP");
 8001e52:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <DWT_Delay_Init+0x5c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001e60:	2301      	movs	r3, #1
    }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000edf0 	.word	0xe000edf0
 8001e70:	e0001000 	.word	0xe0001000

08001e74 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <MX_UART4_Init+0x58>)
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <MX_UART4_Init+0x5c>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MX_UART4_Init+0x58>)
 8001e80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_UART4_Init+0x58>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <MX_UART4_Init+0x58>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_UART4_Init+0x58>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_UART4_Init+0x58>)
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_UART4_Init+0x58>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_UART4_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_UART4_Init+0x58>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_UART4_Init+0x58>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_UART4_Init+0x58>)
 8001eb8:	f003 fa08 	bl	80052cc <HAL_UART_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ec2:	f7ff fecc 	bl	8001c5e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000210 	.word	0x20000210
 8001ed0:	40004c00 	.word	0x40004c00

08001ed4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001eda:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <MX_USART1_UART_Init+0x5c>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001ee0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_USART1_UART_Init+0x58>)
 8001f18:	f003 f9d8 	bl	80052cc <HAL_UART_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f22:	f7ff fe9c 	bl	8001c5e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000140 	.word	0x20000140
 8001f30:	40013800 	.word	0x40013800

08001f34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f3a:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <MX_USART2_UART_Init+0x5c>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_USART2_UART_Init+0x58>)
 8001f78:	f003 f9a8 	bl	80052cc <HAL_UART_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f82:	f7ff fe6c 	bl	8001c5e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000294 	.word	0x20000294
 8001f90:	40004400 	.word	0x40004400

08001f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b0b0      	sub	sp, #192	; 0xc0
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb0:	2288      	movs	r2, #136	; 0x88
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 fa8b 	bl	80064d0 <memset>
  if(uartHandle->Instance==UART4)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a68      	ldr	r2, [pc, #416]	; (8002160 <HAL_UART_MspInit+0x1cc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d144      	bne.n	800204e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 f9e3 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fdc:	f7ff fe3f 	bl	8001c5e <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fe0:	4b60      	ldr	r3, [pc, #384]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a5f      	ldr	r2, [pc, #380]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8001fe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fea:	6593      	str	r3, [r2, #88]	; 0x58
 8001fec:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff4:	623b      	str	r3, [r7, #32]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a59      	ldr	r2, [pc, #356]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002004:	4b57      	ldr	r3, [pc, #348]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002010:	2303      	movs	r3, #3
 8002012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002028:	2308      	movs	r3, #8
 800202a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002032:	4619      	mov	r1, r3
 8002034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002038:	f000 faf4 	bl	8002624 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2034      	movs	r0, #52	; 0x34
 8002042:	f000 fa3a 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002046:	2034      	movs	r0, #52	; 0x34
 8002048:	f000 fa53 	bl	80024f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800204c:	e083      	b.n	8002156 <HAL_UART_MspInit+0x1c2>
  else if(uartHandle->Instance==USART1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a45      	ldr	r2, [pc, #276]	; (8002168 <HAL_UART_MspInit+0x1d4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d13d      	bne.n	80020d4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002058:	2301      	movs	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800205c:	2300      	movs	r3, #0
 800205e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4618      	mov	r0, r3
 8002066:	f002 f999 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002070:	f7ff fdf5 	bl	8001c5e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 800207a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207e:	6613      	str	r3, [r2, #96]	; 0x60
 8002080:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4a34      	ldr	r2, [pc, #208]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020be:	2307      	movs	r3, #7
 80020c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ce:	f000 faa9 	bl	8002624 <HAL_GPIO_Init>
}
 80020d2:	e040      	b.n	8002156 <HAL_UART_MspInit+0x1c2>
  else if(uartHandle->Instance==USART2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a24      	ldr	r2, [pc, #144]	; (800216c <HAL_UART_MspInit+0x1d8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d13b      	bne.n	8002156 <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020de:	2302      	movs	r3, #2
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 f956 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_UART_MspInit+0x166>
      Error_Handler();
 80020f6:	f7ff fdb2 	bl	8001c5e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	6593      	str	r3, [r2, #88]	; 0x58
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_UART_MspInit+0x1d0>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800212a:	230c      	movs	r3, #12
 800212c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002142:	2307      	movs	r3, #7
 8002144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800214c:	4619      	mov	r1, r3
 800214e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002152:	f000 fa67 	bl	8002624 <HAL_GPIO_Init>
}
 8002156:	bf00      	nop
 8002158:	37c0      	adds	r7, #192	; 0xc0
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40004c00 	.word	0x40004c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40013800 	.word	0x40013800
 800216c:	40004400 	.word	0x40004400

08002170 <Reset_Handler>:
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a8 <LoopForever+0x2>
 8002174:	f7ff fdd0 	bl	8001d18 <SystemInit>
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <LoopForever+0x6>)
 800217a:	490d      	ldr	r1, [pc, #52]	; (80021b0 <LoopForever+0xa>)
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <LoopForever+0xe>)
 800217e:	2300      	movs	r3, #0
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:
 8002182:	58d4      	ldr	r4, [r2, r3]
 8002184:	50c4      	str	r4, [r0, r3]
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:
 8002188:	18c4      	adds	r4, r0, r3
 800218a:	428c      	cmp	r4, r1
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <LoopForever+0x12>)
 8002190:	4c0a      	ldr	r4, [pc, #40]	; (80021bc <LoopForever+0x16>)
 8002192:	2300      	movs	r3, #0
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:
 800219a:	42a2      	cmp	r2, r4
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>
 800219e:	f004 f965 	bl	800646c <__libc_init_array>
 80021a2:	f7ff fb81 	bl	80018a8 <main>

080021a6 <LoopForever>:
 80021a6:	e7fe      	b.n	80021a6 <LoopForever>
 80021a8:	20018000 	.word	0x20018000
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000074 	.word	0x20000074
 80021b4:	08007510 	.word	0x08007510
 80021b8:	20000074 	.word	0x20000074
 80021bc:	2000031c 	.word	0x2000031c

080021c0 <ADC1_2_IRQHandler>:
 80021c0:	e7fe      	b.n	80021c0 <ADC1_2_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_Init+0x3c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_Init+0x3c>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021da:	2003      	movs	r0, #3
 80021dc:	f000 f962 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021e0:	2000      	movs	r0, #0
 80021e2:	f000 f80f 	bl	8002204 <HAL_InitTick>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	e001      	b.n	80021f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021f2:	f7ff fd39 	bl	8001c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f6:	79fb      	ldrb	r3, [r7, #7]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40022000 	.word	0x40022000

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_InitTick+0x6c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d023      	beq.n	8002260 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_InitTick+0x70>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_InitTick+0x6c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f96d 	bl	800250e <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10f      	bne.n	800225a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d809      	bhi.n	8002254 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 f937 	bl	80024ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_InitTick+0x74>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e007      	b.n	8002264 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e004      	b.n	8002264 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e001      	b.n	8002264 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000318 	.word	0x20000318

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000318 	.word	0x20000318

080022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff ffee 	bl	80022a4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d005      	beq.n	80022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_Delay+0x44>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e2:	bf00      	nop
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d8f7      	bhi.n	80022e4 <HAL_Delay+0x28>
  {
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000008 	.word	0x20000008

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800232c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4907      	ldr	r1, [pc, #28]	; (80023a0 <__NVIC_EnableIRQ+0x38>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	; (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	; (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002470:	d301      	bcc.n	8002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <SysTick_Config+0x40>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247e:	210f      	movs	r1, #15
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7ff ff8e 	bl	80023a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <SysTick_Config+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <SysTick_Config+0x40>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff29 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024cc:	f7ff ff3e 	bl	800234c <__NVIC_GetPriorityGrouping>
 80024d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff8e 	bl	80023f8 <NVIC_EncodePriority>
 80024dc:	4602      	mov	r2, r0
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff5d 	bl	80023a4 <__NVIC_SetPriority>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff31 	bl	8002368 <__NVIC_EnableIRQ>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffa2 	bl	8002460 <SysTick_Config>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2204      	movs	r2, #4
 8002542:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e022      	b.n	8002596 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 020e 	bic.w	r2, r2, #14
 800255e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f003 021c 	and.w	r2, r3, #28
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d005      	beq.n	80025c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2204      	movs	r2, #4
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e029      	b.n	800261a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 020e 	bic.w	r2, r2, #14
 80025d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f003 021c 	and.w	r2, r3, #28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
    }
  }
  return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	e17f      	b.n	8002934 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8171 	beq.w	800292e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d005      	beq.n	8002664 <HAL_GPIO_Init+0x40>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d130      	bne.n	80026c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800269a:	2201      	movs	r2, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0201 	and.w	r2, r3, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d118      	bne.n	8002704 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026d8:	2201      	movs	r2, #1
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	f003 0201 	and.w	r2, r3, #1
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b03      	cmp	r3, #3
 800270e:	d017      	beq.n	8002740 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d123      	bne.n	8002794 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	6939      	ldr	r1, [r7, #16]
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80ac 	beq.w	800292e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <HAL_GPIO_Init+0x330>)
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	4a5e      	ldr	r2, [pc, #376]	; (8002954 <HAL_GPIO_Init+0x330>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6613      	str	r3, [r2, #96]	; 0x60
 80027e2:	4b5c      	ldr	r3, [pc, #368]	; (8002954 <HAL_GPIO_Init+0x330>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ee:	4a5a      	ldr	r2, [pc, #360]	; (8002958 <HAL_GPIO_Init+0x334>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002818:	d025      	beq.n	8002866 <HAL_GPIO_Init+0x242>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4f      	ldr	r2, [pc, #316]	; (800295c <HAL_GPIO_Init+0x338>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01f      	beq.n	8002862 <HAL_GPIO_Init+0x23e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_GPIO_Init+0x33c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0x23a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <HAL_GPIO_Init+0x340>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0x236>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_GPIO_Init+0x344>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_GPIO_Init+0x232>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4b      	ldr	r2, [pc, #300]	; (800296c <HAL_GPIO_Init+0x348>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <HAL_GPIO_Init+0x22e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4a      	ldr	r2, [pc, #296]	; (8002970 <HAL_GPIO_Init+0x34c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_GPIO_Init+0x22a>
 800284a:	2306      	movs	r3, #6
 800284c:	e00c      	b.n	8002868 <HAL_GPIO_Init+0x244>
 800284e:	2307      	movs	r3, #7
 8002850:	e00a      	b.n	8002868 <HAL_GPIO_Init+0x244>
 8002852:	2305      	movs	r3, #5
 8002854:	e008      	b.n	8002868 <HAL_GPIO_Init+0x244>
 8002856:	2304      	movs	r3, #4
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x244>
 800285a:	2303      	movs	r3, #3
 800285c:	e004      	b.n	8002868 <HAL_GPIO_Init+0x244>
 800285e:	2302      	movs	r3, #2
 8002860:	e002      	b.n	8002868 <HAL_GPIO_Init+0x244>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x244>
 8002866:	2300      	movs	r3, #0
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	f002 0203 	and.w	r2, r2, #3
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4093      	lsls	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002878:	4937      	ldr	r1, [pc, #220]	; (8002958 <HAL_GPIO_Init+0x334>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_GPIO_Init+0x350>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028aa:	4a32      	ldr	r2, [pc, #200]	; (8002974 <HAL_GPIO_Init+0x350>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028b0:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_GPIO_Init+0x350>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028d4:	4a27      	ldr	r2, [pc, #156]	; (8002974 <HAL_GPIO_Init+0x350>)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_GPIO_Init+0x350>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028fe:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <HAL_GPIO_Init+0x350>)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_GPIO_Init+0x350>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_GPIO_Init+0x350>)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	f47f ae78 	bne.w	8002634 <HAL_GPIO_Init+0x10>
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40010000 	.word	0x40010000
 800295c:	48000400 	.word	0x48000400
 8002960:	48000800 	.word	0x48000800
 8002964:	48000c00 	.word	0x48000c00
 8002968:	48001000 	.word	0x48001000
 800296c:	48001400 	.word	0x48001400
 8002970:	48001800 	.word	0x48001800
 8002974:	40010400 	.word	0x40010400

08002978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e001      	b.n	800299a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299a:	7bfb      	ldrb	r3, [r7, #15]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
 80029b4:	4613      	mov	r3, r2
 80029b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e081      	b.n	8002aee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fecc 	bl	800179c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2224      	movs	r2, #36	; 0x24
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	e006      	b.n	8002a60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d104      	bne.n	8002a72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69d9      	ldr	r1, [r3, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	460b      	mov	r3, r1
 8002b06:	817b      	strh	r3, [r7, #10]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	f040 80da 	bne.w	8002cce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_I2C_Master_Transmit+0x30>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e0d3      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x1d8>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b30:	f7ff fbb8 	bl	80022a4 <HAL_GetTick>
 8002b34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2319      	movs	r3, #25
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 faed 	bl	8003122 <I2C_WaitOnFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0be      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2221      	movs	r2, #33	; 0x21
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2bff      	cmp	r3, #255	; 0xff
 8002b82:	d90e      	bls.n	8002ba2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	4b51      	ldr	r3, [pc, #324]	; (8002cd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fce4 	bl	8003568 <I2C_TransferConfig>
 8002ba0:	e06c      	b.n	8002c7c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	4b48      	ldr	r3, [pc, #288]	; (8002cd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fcd3 	bl	8003568 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002bc2:	e05b      	b.n	8002c7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6a39      	ldr	r1, [r7, #32]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 faea 	bl	80031a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e07b      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d034      	beq.n	8002c7c <HAL_I2C_Master_Transmit+0x184>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d130      	bne.n	8002c7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fa7c 	bl	8003122 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e04d      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2bff      	cmp	r3, #255	; 0xff
 8002c3c:	d90e      	bls.n	8002c5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	22ff      	movs	r2, #255	; 0xff
 8002c42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	8979      	ldrh	r1, [r7, #10]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fc87 	bl	8003568 <I2C_TransferConfig>
 8002c5a:	e00f      	b.n	8002c7c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	8979      	ldrh	r1, [r7, #10]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fc76 	bl	8003568 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d19e      	bne.n	8002bc4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	6a39      	ldr	r1, [r7, #32]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fac9 	bl	8003222 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e01a      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_I2C_Master_Transmit+0x1e4>)
 8002cae:	400b      	ands	r3, r1
 8002cb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	80002000 	.word	0x80002000
 8002cdc:	fe00e800 	.word	0xfe00e800

08002ce0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	460b      	mov	r3, r1
 8002cee:	817b      	strh	r3, [r7, #10]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	f040 80db 	bne.w	8002eb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_I2C_Master_Receive+0x30>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0d4      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d18:	f7ff fac4 	bl	80022a4 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2319      	movs	r3, #25
 8002d24:	2201      	movs	r2, #1
 8002d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f9f9 	bl	8003122 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0bf      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2222      	movs	r2, #34	; 0x22
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2210      	movs	r2, #16
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	893a      	ldrh	r2, [r7, #8]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2bff      	cmp	r3, #255	; 0xff
 8002d6a:	d90e      	bls.n	8002d8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	4b52      	ldr	r3, [pc, #328]	; (8002ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fbf0 	bl	8003568 <I2C_TransferConfig>
 8002d88:	e06d      	b.n	8002e66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	8979      	ldrh	r1, [r7, #10]
 8002d9c:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fbdf 	bl	8003568 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002daa:	e05c      	b.n	8002e66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fa73 	bl	800329c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e07c      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d034      	beq.n	8002e66 <HAL_I2C_Master_Receive+0x186>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d130      	bne.n	8002e66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f987 	bl	8003122 <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e04d      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2bff      	cmp	r3, #255	; 0xff
 8002e26:	d90e      	bls.n	8002e46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	22ff      	movs	r2, #255	; 0xff
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fb92 	bl	8003568 <I2C_TransferConfig>
 8002e44:	e00f      	b.n	8002e66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	8979      	ldrh	r1, [r7, #10]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fb81 	bl	8003568 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d19d      	bne.n	8002dac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6a39      	ldr	r1, [r7, #32]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f9d4 	bl	8003222 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e01a      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_I2C_Master_Receive+0x1e8>)
 8002e98:	400b      	ands	r3, r1
 8002e9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e000      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
  }
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	80002400 	.word	0x80002400
 8002ec8:	fe00e800 	.word	0xfe00e800

08002ecc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	f040 80f1 	bne.w	80030d0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0e7      	b.n	80030d2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_IsDeviceReady+0x44>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0e0      	b.n	80030d2 <HAL_I2C_IsDeviceReady+0x206>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <HAL_I2C_IsDeviceReady+0x72>
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f3c:	e004      	b.n	8002f48 <HAL_I2C_IsDeviceReady+0x7c>
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f44:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002f4e:	f7ff f9a9 	bl	80022a4 <HAL_GetTick>
 8002f52:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f80:	e034      	b.n	8002fec <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d01a      	beq.n	8002fc0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f8a:	f7ff f98b 	bl	80022a4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d302      	bcc.n	8002fa0 <HAL_I2C_IsDeviceReady+0xd4>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10f      	bne.n	8002fc0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e088      	b.n	80030d2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002fec:	7ffb      	ldrb	r3, [r7, #31]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_I2C_IsDeviceReady+0x12c>
 8002ff2:	7fbb      	ldrb	r3, [r7, #30]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0c4      	beq.n	8002f82 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b10      	cmp	r3, #16
 8003004:	d01a      	beq.n	800303c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2200      	movs	r2, #0
 800300e:	2120      	movs	r1, #32
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f886 	bl	8003122 <I2C_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e058      	b.n	80030d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2220      	movs	r2, #32
 8003026:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e04a      	b.n	80030d2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	2120      	movs	r1, #32
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f86b 	bl	8003122 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e03d      	b.n	80030d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2210      	movs	r2, #16
 800305c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2220      	movs	r2, #32
 8003064:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	d118      	bne.n	80030a0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800307c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	2120      	movs	r1, #32
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f84a 	bl	8003122 <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01c      	b.n	80030d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2220      	movs	r2, #32
 800309e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3301      	adds	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	f63f af3b 	bhi.w	8002f26 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d103      	bne.n	80030f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d007      	beq.n	8003116 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	619a      	str	r2, [r3, #24]
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003132:	e022      	b.n	800317a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d01e      	beq.n	800317a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7ff f8b2 	bl	80022a4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00f      	b.n	800319a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4013      	ands	r3, r2
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	bf0c      	ite	eq
 800318a:	2301      	moveq	r3, #1
 800318c:	2300      	movne	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	429a      	cmp	r2, r3
 8003196:	d0cd      	beq.n	8003134 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ae:	e02c      	b.n	800320a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f8eb 	bl	8003390 <I2C_IsErrorOccurred>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e02a      	b.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d01e      	beq.n	800320a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031cc:	f7ff f86a 	bl	80022a4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d113      	bne.n	800320a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f043 0220 	orr.w	r2, r3, #32
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e007      	b.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	d1cb      	bne.n	80031b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800322e:	e028      	b.n	8003282 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f8ab 	bl	8003390 <I2C_IsErrorOccurred>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e026      	b.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003244:	f7ff f82e 	bl	80022a4 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d302      	bcc.n	800325a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d113      	bne.n	8003282 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e007      	b.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b20      	cmp	r3, #32
 800328e:	d1cf      	bne.n	8003230 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a8:	e064      	b.n	8003374 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f86e 	bl	8003390 <I2C_IsErrorOccurred>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e062      	b.n	8003384 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d138      	bne.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d105      	bne.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e04e      	b.n	8003384 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d107      	bne.n	8003304 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2210      	movs	r2, #16
 80032fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2204      	movs	r2, #4
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
 8003302:	e002      	b.n	800330a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2220      	movs	r2, #32
 8003310:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800331e:	400b      	ands	r3, r1
 8003320:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e022      	b.n	8003384 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe ffb1 	bl	80022a4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10f      	bne.n	8003374 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e007      	b.n	8003384 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d193      	bne.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	fe00e800 	.word	0xfe00e800

08003390 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d075      	beq.n	80034a8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2210      	movs	r2, #16
 80033c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033c4:	e056      	b.n	8003474 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d052      	beq.n	8003474 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fe ff69 	bl	80022a4 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_IsErrorOccurred+0x54>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d147      	bne.n	8003474 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003406:	d12e      	bne.n	8003466 <I2C_IsErrorOccurred+0xd6>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800340e:	d02a      	beq.n	8003466 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b20      	cmp	r3, #32
 8003414:	d027      	beq.n	8003466 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003424:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003426:	f7fe ff3d 	bl	80022a4 <HAL_GetTick>
 800342a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342c:	e01b      	b.n	8003466 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800342e:	f7fe ff39 	bl	80022a4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b19      	cmp	r3, #25
 800343a:	d914      	bls.n	8003466 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b20      	cmp	r3, #32
 8003472:	d1dc      	bne.n	800342e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b20      	cmp	r3, #32
 8003480:	d003      	beq.n	800348a <I2C_IsErrorOccurred+0xfa>
 8003482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003486:	2b00      	cmp	r3, #0
 8003488:	d09d      	beq.n	80033c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800348a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2220      	movs	r2, #32
 8003498:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00b      	beq.n	80034f4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f043 0308 	orr.w	r3, r3, #8
 80034e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01c      	beq.n	8003558 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff fddb 	bl	80030da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <I2C_IsErrorOccurred+0x1d4>)
 8003530:	400b      	ands	r3, r1
 8003532:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	431a      	orrs	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800355c:	4618      	mov	r0, r3
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	fe00e800 	.word	0xfe00e800

08003568 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	4613      	mov	r3, r2
 8003578:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003580:	7a7b      	ldrb	r3, [r7, #9]
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003588:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	4313      	orrs	r3, r2
 8003592:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003596:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	0d5b      	lsrs	r3, r3, #21
 80035a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <I2C_TransferConfig+0x60>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	43db      	mvns	r3, r3
 80035ac:	ea02 0103 	and.w	r1, r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	03ff63ff 	.word	0x03ff63ff

080035cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d138      	bne.n	8003654 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e032      	b.n	8003656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800361e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b20      	cmp	r3, #32
 8003676:	d139      	bne.n	80036ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003682:	2302      	movs	r3, #2
 8003684:	e033      	b.n	80036ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2224      	movs	r2, #36	; 0x24
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_PWREx_GetVoltageRange+0x18>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40007000 	.word	0x40007000

08003718 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003726:	d130      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003734:	d038      	beq.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2232      	movs	r2, #50	; 0x32
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375c:	e002      	b.n	8003764 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3b01      	subs	r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	d102      	bne.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f2      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d110      	bne.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e00f      	b.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d007      	beq.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037a0:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40007000 	.word	0x40007000
 80037bc:	20000000 	.word	0x20000000
 80037c0:	431bde83 	.word	0x431bde83

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e3d4      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d6:	4ba1      	ldr	r3, [pc, #644]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e0:	4b9e      	ldr	r3, [pc, #632]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80e4 	beq.w	80039c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_RCC_OscConfig+0x4a>
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f040 808b 	bne.w	800391c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 8087 	bne.w	800391c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800380e:	4b93      	ldr	r3, [pc, #588]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x62>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e3ac      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	4b8c      	ldr	r3, [pc, #560]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_RCC_OscConfig+0x7c>
 8003836:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383e:	e005      	b.n	800384c <HAL_RCC_OscConfig+0x88>
 8003840:	4b86      	ldr	r3, [pc, #536]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384c:	4293      	cmp	r3, r2
 800384e:	d223      	bcs.n	8003898 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fd41 	bl	80042dc <RCC_SetFlashLatencyFromMSIRange>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e38d      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003864:	4b7d      	ldr	r3, [pc, #500]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a7c      	ldr	r2, [pc, #496]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800386a:	f043 0308 	orr.w	r3, r3, #8
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b7a      	ldr	r3, [pc, #488]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4977      	ldr	r1, [pc, #476]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003882:	4b76      	ldr	r3, [pc, #472]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	4972      	ldr	r1, [pc, #456]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
 8003896:	e025      	b.n	80038e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003898:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6f      	ldr	r2, [pc, #444]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800389e:	f043 0308 	orr.w	r3, r3, #8
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	496a      	ldr	r1, [pc, #424]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b6:	4b69      	ldr	r3, [pc, #420]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	4965      	ldr	r1, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fd01 	bl	80042dc <RCC_SetFlashLatencyFromMSIRange>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e34d      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038e4:	f000 fc36 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b5c      	ldr	r3, [pc, #368]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	495a      	ldr	r1, [pc, #360]	; (8003a60 <HAL_RCC_OscConfig+0x29c>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <HAL_RCC_OscConfig+0x2a0>)
 8003902:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003904:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fc7b 	bl	8002204 <HAL_InitTick>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d052      	beq.n	80039be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	e331      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d032      	beq.n	800398a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003924:	4b4d      	ldr	r3, [pc, #308]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a4c      	ldr	r2, [pc, #304]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003930:	f7fe fcb8 	bl	80022a4 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003938:	f7fe fcb4 	bl	80022a4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e31a      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800394a:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003956:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a40      	ldr	r2, [pc, #256]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	493b      	ldr	r1, [pc, #236]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003974:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	4936      	ldr	r1, [pc, #216]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
 8003988:	e01a      	b.n	80039c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800398a:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003996:	f7fe fc85 	bl	80022a4 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800399e:	f7fe fc81 	bl	80022a4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e2e7      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039b0:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCC_OscConfig+0x1da>
 80039bc:	e000      	b.n	80039c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d074      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x21a>
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	d10e      	bne.n	80039f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d10b      	bne.n	80039f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d064      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d160      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e2c4      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_OscConfig+0x24a>
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e01d      	b.n	8003a4a <HAL_RCC_OscConfig+0x286>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCC_OscConfig+0x26e>
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e00b      	b.n	8003a4a <HAL_RCC_OscConfig+0x286>
 8003a32:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a06      	ldr	r2, [pc, #24]	; (8003a5c <HAL_RCC_OscConfig+0x298>)
 8003a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7fe fc27 	bl	80022a4 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a58:	e011      	b.n	8003a7e <HAL_RCC_OscConfig+0x2ba>
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	08007470 	.word	0x08007470
 8003a64:	20000000 	.word	0x20000000
 8003a68:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fc1a 	bl	80022a4 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	; 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e280      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7e:	4baf      	ldr	r3, [pc, #700]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x2a8>
 8003a8a:	e014      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fc0a 	bl	80022a4 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fe fc06 	bl	80022a4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e26c      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aa6:	4ba5      	ldr	r3, [pc, #660]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x2d0>
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d060      	beq.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x310>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b0c      	cmp	r3, #12
 8003acc:	d119      	bne.n	8003b02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d116      	bne.n	8003b02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad4:	4b99      	ldr	r3, [pc, #612]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_OscConfig+0x328>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e249      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aec:	4b93      	ldr	r3, [pc, #588]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	4990      	ldr	r1, [pc, #576]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b00:	e040      	b.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d023      	beq.n	8003b52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0a:	4b8c      	ldr	r3, [pc, #560]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a8b      	ldr	r2, [pc, #556]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fe fbc5 	bl	80022a4 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fe fbc1 	bl	80022a4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e227      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b30:	4b82      	ldr	r3, [pc, #520]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b7f      	ldr	r3, [pc, #508]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	497c      	ldr	r1, [pc, #496]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
 8003b50:	e018      	b.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b7a      	ldr	r3, [pc, #488]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a79      	ldr	r2, [pc, #484]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7fe fba1 	bl	80022a4 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b66:	f7fe fb9d 	bl	80022a4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e203      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b78:	4b70      	ldr	r3, [pc, #448]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03c      	beq.n	8003c0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9e:	4a67      	ldr	r2, [pc, #412]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fe fb7c 	bl	80022a4 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7fe fb78 	bl	80022a4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e1de      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc2:	4b5e      	ldr	r3, [pc, #376]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x3ec>
 8003bd0:	e01b      	b.n	8003c0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd2:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd8:	4a58      	ldr	r2, [pc, #352]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fe fb5f 	bl	80022a4 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bea:	f7fe fb5b 	bl	80022a4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e1c1      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bfc:	4b4f      	ldr	r3, [pc, #316]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ef      	bne.n	8003bea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80a6 	beq.w	8003d64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c1c:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10d      	bne.n	8003c44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c28:	4b44      	ldr	r3, [pc, #272]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	4a43      	ldr	r2, [pc, #268]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6593      	str	r3, [r2, #88]	; 0x58
 8003c34:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c40:	2301      	movs	r3, #1
 8003c42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c44:	4b3e      	ldr	r3, [pc, #248]	; (8003d40 <HAL_RCC_OscConfig+0x57c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d118      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c50:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_RCC_OscConfig+0x57c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a3a      	ldr	r2, [pc, #232]	; (8003d40 <HAL_RCC_OscConfig+0x57c>)
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fb22 	bl	80022a4 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c64:	f7fe fb1e 	bl	80022a4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e184      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c76:	4b32      	ldr	r3, [pc, #200]	; (8003d40 <HAL_RCC_OscConfig+0x57c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d108      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4d8>
 8003c8a:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	4a2a      	ldr	r2, [pc, #168]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c9a:	e024      	b.n	8003ce6 <HAL_RCC_OscConfig+0x522>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b05      	cmp	r3, #5
 8003ca2:	d110      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x502>
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	4a24      	ldr	r2, [pc, #144]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCC_OscConfig+0x522>
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003cde:	f023 0304 	bic.w	r3, r3, #4
 8003ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe fad9 	bl	80022a4 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe fad5 	bl	80022a4 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e139      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_OscConfig+0x578>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0ed      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x532>
 8003d1a:	e01a      	b.n	8003d52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fe fac2 	bl	80022a4 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d22:	e00f      	b.n	8003d44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fe fabe 	bl	80022a4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d906      	bls.n	8003d44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e122      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d44:	4b90      	ldr	r3, [pc, #576]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e8      	bne.n	8003d24 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b8b      	ldr	r3, [pc, #556]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	4a8a      	ldr	r2, [pc, #552]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8108 	beq.w	8003f7e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	f040 80d0 	bne.w	8003f18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d78:	4b83      	ldr	r3, [pc, #524]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0203 	and.w	r2, r3, #3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d130      	bne.n	8003dee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	3b01      	subs	r3, #1
 8003d98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d127      	bne.n	8003dee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d11f      	bne.n	8003dee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db8:	2a07      	cmp	r2, #7
 8003dba:	bf14      	ite	ne
 8003dbc:	2201      	movne	r2, #1
 8003dbe:	2200      	moveq	r2, #0
 8003dc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d113      	bne.n	8003dee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	3b01      	subs	r3, #1
 8003de8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d06e      	beq.n	8003ecc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	d069      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003df4:	4b64      	ldr	r3, [pc, #400]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e00:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0b7      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e10:	4b5d      	ldr	r3, [pc, #372]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5c      	ldr	r2, [pc, #368]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e1c:	f7fe fa42 	bl	80022a4 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fe fa3e 	bl	80022a4 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0a4      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e36:	4b54      	ldr	r3, [pc, #336]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e42:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <HAL_RCC_OscConfig+0x7c8>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e52:	3a01      	subs	r2, #1
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	4311      	orrs	r1, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e5c:	0212      	lsls	r2, r2, #8
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e64:	0852      	lsrs	r2, r2, #1
 8003e66:	3a01      	subs	r2, #1
 8003e68:	0552      	lsls	r2, r2, #21
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e70:	0852      	lsrs	r2, r2, #1
 8003e72:	3a01      	subs	r2, #1
 8003e74:	0652      	lsls	r2, r2, #25
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e7c:	0912      	lsrs	r2, r2, #4
 8003e7e:	0452      	lsls	r2, r2, #17
 8003e80:	430a      	orrs	r2, r1
 8003e82:	4941      	ldr	r1, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a3e      	ldr	r2, [pc, #248]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e94:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ea0:	f7fe fa00 	bl	80022a4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe f9fc 	bl	80022a4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e062      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ec6:	e05a      	b.n	8003f7e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e059      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ecc:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d152      	bne.n	8003f7e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ee4:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4a27      	ldr	r2, [pc, #156]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ef0:	f7fe f9d8 	bl	80022a4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe f9d4 	bl	80022a4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e03a      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x734>
 8003f16:	e032      	b.n	8003f7e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d02d      	beq.n	8003f7a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f28:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f2a:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f3c:	f023 0303 	bic.w	r3, r3, #3
 8003f40:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe f9a7 	bl	80022a4 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe f9a3 	bl	80022a4 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e009      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_OscConfig+0x7c4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x796>
 8003f78:	e001      	b.n	8003f7e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	f99d808c 	.word	0xf99d808c

08003f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0c8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b66      	ldr	r3, [pc, #408]	; (8004140 <HAL_RCC_ClockConfig+0x1b0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x1b0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	4961      	ldr	r1, [pc, #388]	; (8004140 <HAL_RCC_ClockConfig+0x1b0>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b5f      	ldr	r3, [pc, #380]	; (8004140 <HAL_RCC_ClockConfig+0x1b0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0b0      	b.n	8004136 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d04c      	beq.n	800407a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe8:	4b56      	ldr	r3, [pc, #344]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d121      	bne.n	8004038 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e09e      	b.n	8004136 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004000:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d115      	bne.n	8004038 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e092      	b.n	8004136 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004018:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e086      	b.n	8004136 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004028:	4b46      	ldr	r3, [pc, #280]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e07e      	b.n	8004136 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004038:	4b42      	ldr	r3, [pc, #264]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 0203 	bic.w	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	493f      	ldr	r1, [pc, #252]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404a:	f7fe f92b 	bl	80022a4 <HAL_GetTick>
 800404e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004050:	e00a      	b.n	8004068 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004052:	f7fe f927 	bl	80022a4 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e066      	b.n	8004136 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004068:	4b36      	ldr	r3, [pc, #216]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 020c 	and.w	r2, r3, #12
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	429a      	cmp	r2, r3
 8004078:	d1eb      	bne.n	8004052 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004086:	4b2f      	ldr	r3, [pc, #188]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	492c      	ldr	r1, [pc, #176]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b29      	ldr	r3, [pc, #164]	; (8004140 <HAL_RCC_ClockConfig+0x1b0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d210      	bcs.n	80040c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b26      	ldr	r3, [pc, #152]	; (8004140 <HAL_RCC_ClockConfig+0x1b0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 0207 	bic.w	r2, r3, #7
 80040ae:	4924      	ldr	r1, [pc, #144]	; (8004140 <HAL_RCC_ClockConfig+0x1b0>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b22      	ldr	r3, [pc, #136]	; (8004140 <HAL_RCC_ClockConfig+0x1b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e036      	b.n	8004136 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4918      	ldr	r1, [pc, #96]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4910      	ldr	r1, [pc, #64]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004106:	f000 f825 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 800410a:	4602      	mov	r2, r0
 800410c:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_RCC_ClockConfig+0x1b4>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	490c      	ldr	r1, [pc, #48]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	5ccb      	ldrb	r3, [r1, r3]
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe f86a 	bl	8002204 <HAL_InitTick>
 8004130:	4603      	mov	r3, r0
 8004132:	72fb      	strb	r3, [r7, #11]

  return status;
 8004134:	7afb      	ldrb	r3, [r7, #11]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40022000 	.word	0x40022000
 8004144:	40021000 	.word	0x40021000
 8004148:	08007470 	.word	0x08007470
 800414c:	20000000 	.word	0x20000000
 8004150:	20000004 	.word	0x20000004

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004162:	4b3e      	ldr	r3, [pc, #248]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416c:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d121      	bne.n	80041c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d11e      	bne.n	80041c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004188:	4b34      	ldr	r3, [pc, #208]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004194:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e005      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041a4:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d102      	bne.n	80041d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e004      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d8:	4b23      	ldr	r3, [pc, #140]	; (8004268 <HAL_RCC_GetSysClockFreq+0x114>)
 80041da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d134      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041e2:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0xa6>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d003      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0xac>
 80041f8:	e005      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_RCC_GetSysClockFreq+0x110>)
 80041fc:	617b      	str	r3, [r7, #20]
      break;
 80041fe:	e005      	b.n	800420c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_GetSysClockFreq+0x114>)
 8004202:	617b      	str	r3, [r7, #20]
      break;
 8004204:	e002      	b.n	800420c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	617b      	str	r3, [r7, #20]
      break;
 800420a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	3301      	adds	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	fb02 f203 	mul.w	r2, r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	0e5b      	lsrs	r3, r3, #25
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	3301      	adds	r3, #1
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800424c:	69bb      	ldr	r3, [r7, #24]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3724      	adds	r7, #36	; 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	08007488 	.word	0x08007488
 8004264:	00f42400 	.word	0x00f42400
 8004268:	007a1200 	.word	0x007a1200

0800426c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <HAL_RCC_GetHCLKFreq+0x14>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000000 	.word	0x20000000

08004284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004288:	f7ff fff0 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0a1b      	lsrs	r3, r3, #8
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000
 80042ac:	08007480 	.word	0x08007480

080042b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042b4:	f7ff ffda 	bl	800426c <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0adb      	lsrs	r3, r3, #11
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4904      	ldr	r1, [pc, #16]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	08007480 	.word	0x08007480

080042dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042f4:	f7ff fa02 	bl	80036fc <HAL_PWREx_GetVoltageRange>
 80042f8:	6178      	str	r0, [r7, #20]
 80042fa:	e014      	b.n	8004326 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a24      	ldr	r2, [pc, #144]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
 8004308:	4b22      	ldr	r3, [pc, #136]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004314:	f7ff f9f2 	bl	80036fc <HAL_PWREx_GetVoltageRange>
 8004318:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d10b      	bne.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d919      	bls.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2ba0      	cmp	r3, #160	; 0xa0
 8004338:	d902      	bls.n	8004340 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800433a:	2302      	movs	r3, #2
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e013      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004340:	2301      	movs	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e010      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d902      	bls.n	8004352 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800434c:	2303      	movs	r3, #3
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e00a      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d102      	bne.n	800435e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004358:	2302      	movs	r3, #2
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e004      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d101      	bne.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004364:	2301      	movs	r3, #1
 8004366:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 0207 	bic.w	r2, r3, #7
 8004370:	4909      	ldr	r1, [pc, #36]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	429a      	cmp	r2, r3
 8004384:	d001      	beq.n	800438a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	40022000 	.word	0x40022000

0800439c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043a4:	2300      	movs	r3, #0
 80043a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043a8:	2300      	movs	r3, #0
 80043aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d041      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043c0:	d02a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043c6:	d824      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043cc:	d008      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043d2:	d81e      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043dc:	d010      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043de:	e018      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043e0:	4b86      	ldr	r3, [pc, #536]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a85      	ldr	r2, [pc, #532]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ec:	e015      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fabb 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043fe:	e00c      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3320      	adds	r3, #32
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fba6 	bl	8004b58 <RCCEx_PLLSAI2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	74fb      	strb	r3, [r7, #19]
      break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004420:	4b76      	ldr	r3, [pc, #472]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442e:	4973      	ldr	r1, [pc, #460]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d041      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004450:	d02a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004452:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004456:	d824      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800445c:	d008      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800445e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004462:	d81e      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800446c:	d010      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800446e:	e018      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004470:	4b62      	ldr	r3, [pc, #392]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a61      	ldr	r2, [pc, #388]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800447c:	e015      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fa73 	bl	8004970 <RCCEx_PLLSAI1_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800448e:	e00c      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3320      	adds	r3, #32
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fb5e 	bl	8004b58 <RCCEx_PLLSAI2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	74fb      	strb	r3, [r7, #19]
      break;
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044b0:	4b52      	ldr	r3, [pc, #328]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044be:	494f      	ldr	r1, [pc, #316]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044c6:	e001      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a0 	beq.w	800461a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044de:	4b47      	ldr	r3, [pc, #284]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b41      	ldr	r3, [pc, #260]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a40      	ldr	r2, [pc, #256]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004500:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450c:	2301      	movs	r3, #1
 800450e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004510:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3a      	ldr	r2, [pc, #232]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800451c:	f7fd fec2 	bl	80022a4 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004522:	e009      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004524:	f7fd febe 	bl	80022a4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d902      	bls.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	74fb      	strb	r3, [r7, #19]
        break;
 8004536:	e005      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004538:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ef      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d15c      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800454a:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004554:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01f      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	429a      	cmp	r2, r3
 8004566:	d019      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	4a20      	ldr	r2, [pc, #128]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd fe7d 	bl	80022a4 <HAL_GetTick>
 80045aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ac:	e00b      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fd fe79 	bl	80022a4 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d902      	bls.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	74fb      	strb	r3, [r7, #19]
            break;
 80045c4:	e006      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ec      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	4904      	ldr	r1, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004608:	7c7b      	ldrb	r3, [r7, #17]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b9e      	ldr	r3, [pc, #632]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	4a9d      	ldr	r2, [pc, #628]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004626:	4b98      	ldr	r3, [pc, #608]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f023 0203 	bic.w	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	4994      	ldr	r1, [pc, #592]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004648:	4b8f      	ldr	r3, [pc, #572]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 020c 	bic.w	r2, r3, #12
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	498c      	ldr	r1, [pc, #560]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800466a:	4b87      	ldr	r3, [pc, #540]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	4983      	ldr	r1, [pc, #524]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800468c:	4b7e      	ldr	r3, [pc, #504]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	497b      	ldr	r1, [pc, #492]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ae:	4b76      	ldr	r3, [pc, #472]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046bc:	4972      	ldr	r1, [pc, #456]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d0:	4b6d      	ldr	r3, [pc, #436]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	496a      	ldr	r1, [pc, #424]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046f2:	4b65      	ldr	r3, [pc, #404]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	4961      	ldr	r1, [pc, #388]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004714:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	4959      	ldr	r1, [pc, #356]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004736:	4b54      	ldr	r3, [pc, #336]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	4950      	ldr	r1, [pc, #320]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	4948      	ldr	r1, [pc, #288]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800477a:	4b43      	ldr	r3, [pc, #268]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	493f      	ldr	r1, [pc, #252]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d028      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800479c:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047aa:	4937      	ldr	r1, [pc, #220]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ba:	d106      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b32      	ldr	r3, [pc, #200]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a31      	ldr	r2, [pc, #196]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
 80047c8:	e011      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047d2:	d10c      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f8c8 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d028      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004800:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	491f      	ldr	r1, [pc, #124]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004818:	d106      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004824:	60d3      	str	r3, [r2, #12]
 8004826:	e011      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f899 	bl	8004970 <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02b      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004866:	4908      	ldr	r1, [pc, #32]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a02      	ldr	r2, [pc, #8]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004882:	60d3      	str	r3, [r2, #12]
 8004884:	e014      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004894:	d10c      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3304      	adds	r3, #4
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f867 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048bc:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ca:	4928      	ldr	r1, [pc, #160]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048da:	d10d      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2102      	movs	r1, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f844 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d014      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	74bb      	strb	r3, [r7, #18]
 80048f6:	e011      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004900:	d10c      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3320      	adds	r3, #32
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f925 	bl	8004b58 <RCCEx_PLLSAI2_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004928:	4b10      	ldr	r3, [pc, #64]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004936:	490d      	ldr	r1, [pc, #52]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495a:	4904      	ldr	r1, [pc, #16]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004962:	7cbb      	ldrb	r3, [r7, #18]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000

08004970 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800497e:	4b75      	ldr	r3, [pc, #468]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800498a:	4b72      	ldr	r3, [pc, #456]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0203 	and.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d10d      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
       ||
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049a2:	4b6c      	ldr	r3, [pc, #432]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
       ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d047      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e044      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d018      	beq.n	80049f6 <RCCEx_PLLSAI1_Config+0x86>
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d825      	bhi.n	8004a14 <RCCEx_PLLSAI1_Config+0xa4>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d002      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0x62>
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d009      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0x74>
 80049d0:	e020      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049d2:	4b60      	ldr	r3, [pc, #384]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11d      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e2:	e01a      	b.n	8004a1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049e4:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d116      	bne.n	8004a1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f4:	e013      	b.n	8004a1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049f6:	4b57      	ldr	r3, [pc, #348]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a02:	4b54      	ldr	r3, [pc, #336]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a12:	e006      	b.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
      break;
 8004a18:	e004      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10d      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a2a:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6819      	ldr	r1, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	4944      	ldr	r1, [pc, #272]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d17d      	bne.n	8004b48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a4c:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a40      	ldr	r2, [pc, #256]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a58:	f7fd fc24 	bl	80022a4 <HAL_GetTick>
 8004a5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a5e:	e009      	b.n	8004a74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a60:	f7fd fc20 	bl	80022a4 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d902      	bls.n	8004a74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	73fb      	strb	r3, [r7, #15]
        break;
 8004a72:	e005      	b.n	8004a80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a74:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ef      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d160      	bne.n	8004b48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d111      	bne.n	8004ab0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a8c:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6892      	ldr	r2, [r2, #8]
 8004a9c:	0211      	lsls	r1, r2, #8
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68d2      	ldr	r2, [r2, #12]
 8004aa2:	0912      	lsrs	r2, r2, #4
 8004aa4:	0452      	lsls	r2, r2, #17
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	492a      	ldr	r1, [pc, #168]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	610b      	str	r3, [r1, #16]
 8004aae:	e027      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d112      	bne.n	8004adc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab6:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004abe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6892      	ldr	r2, [r2, #8]
 8004ac6:	0211      	lsls	r1, r2, #8
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6912      	ldr	r2, [r2, #16]
 8004acc:	0852      	lsrs	r2, r2, #1
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	0552      	lsls	r2, r2, #21
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	491f      	ldr	r1, [pc, #124]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	610b      	str	r3, [r1, #16]
 8004ada:	e011      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	0211      	lsls	r1, r2, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6952      	ldr	r2, [r2, #20]
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0652      	lsls	r2, r2, #25
 8004af8:	430a      	orrs	r2, r1
 8004afa:	4916      	ldr	r1, [pc, #88]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fd fbca 	bl	80022a4 <HAL_GetTick>
 8004b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b12:	e009      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b14:	f7fd fbc6 	bl	80022a4 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d902      	bls.n	8004b28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	73fb      	strb	r3, [r7, #15]
          break;
 8004b26:	e005      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ef      	beq.n	8004b14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	4904      	ldr	r1, [pc, #16]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000

08004b58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b66:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d018      	beq.n	8004ba4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0203 	and.w	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d10d      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
       ||
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b8a:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
       ||
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d047      	beq.n	8004c2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
 8004ba2:	e044      	b.n	8004c2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d018      	beq.n	8004bde <RCCEx_PLLSAI2_Config+0x86>
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d825      	bhi.n	8004bfc <RCCEx_PLLSAI2_Config+0xa4>
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d002      	beq.n	8004bba <RCCEx_PLLSAI2_Config+0x62>
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d009      	beq.n	8004bcc <RCCEx_PLLSAI2_Config+0x74>
 8004bb8:	e020      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bba:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d11d      	bne.n	8004c02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bca:	e01a      	b.n	8004c02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bdc:	e013      	b.n	8004c06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bde:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bea:	4b49      	ldr	r3, [pc, #292]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bfa:	e006      	b.n	8004c0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004c00:	e004      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10d      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c12:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	430b      	orrs	r3, r1
 8004c28:	4939      	ldr	r1, [pc, #228]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d167      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a35      	ldr	r2, [pc, #212]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c40:	f7fd fb30 	bl	80022a4 <HAL_GetTick>
 8004c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c46:	e009      	b.n	8004c5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c48:	f7fd fb2c 	bl	80022a4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d902      	bls.n	8004c5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	73fb      	strb	r3, [r7, #15]
        break;
 8004c5a:	e005      	b.n	8004c68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ef      	bne.n	8004c48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d14a      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d111      	bne.n	8004c98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c74:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6892      	ldr	r2, [r2, #8]
 8004c84:	0211      	lsls	r1, r2, #8
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68d2      	ldr	r2, [r2, #12]
 8004c8a:	0912      	lsrs	r2, r2, #4
 8004c8c:	0452      	lsls	r2, r2, #17
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	491f      	ldr	r1, [pc, #124]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	614b      	str	r3, [r1, #20]
 8004c96:	e011      	b.n	8004cbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c98:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ca0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6892      	ldr	r2, [r2, #8]
 8004ca8:	0211      	lsls	r1, r2, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6912      	ldr	r2, [r2, #16]
 8004cae:	0852      	lsrs	r2, r2, #1
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0652      	lsls	r2, r2, #25
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	4916      	ldr	r1, [pc, #88]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd faec 	bl	80022a4 <HAL_GetTick>
 8004ccc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cce:	e009      	b.n	8004ce4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cd0:	f7fd fae8 	bl	80022a4 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d902      	bls.n	8004ce4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ce2:	e005      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ef      	beq.n	8004cd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	4904      	ldr	r1, [pc, #16]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000

08004d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e049      	b.n	8004dba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fd f84c 	bl	8001dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f000 f8fe 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_TIM_ConfigClockSource+0x1c>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e0b6      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x18a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e08:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1a:	d03e      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0xd8>
 8004e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e20:	f200 8087 	bhi.w	8004f32 <HAL_TIM_ConfigClockSource+0x170>
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	f000 8086 	beq.w	8004f38 <HAL_TIM_ConfigClockSource+0x176>
 8004e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e30:	d87f      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x170>
 8004e32:	2b70      	cmp	r3, #112	; 0x70
 8004e34:	d01a      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xaa>
 8004e36:	2b70      	cmp	r3, #112	; 0x70
 8004e38:	d87b      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x170>
 8004e3a:	2b60      	cmp	r3, #96	; 0x60
 8004e3c:	d050      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0x11e>
 8004e3e:	2b60      	cmp	r3, #96	; 0x60
 8004e40:	d877      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x170>
 8004e42:	2b50      	cmp	r3, #80	; 0x50
 8004e44:	d03c      	beq.n	8004ec0 <HAL_TIM_ConfigClockSource+0xfe>
 8004e46:	2b50      	cmp	r3, #80	; 0x50
 8004e48:	d873      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x170>
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d058      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0x13e>
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d86f      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x170>
 8004e52:	2b30      	cmp	r3, #48	; 0x30
 8004e54:	d064      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x15e>
 8004e56:	2b30      	cmp	r3, #48	; 0x30
 8004e58:	d86b      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x170>
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d060      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x15e>
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d867      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x170>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d05c      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x15e>
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d05a      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x15e>
 8004e6a:	e062      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f000 f97e 	bl	800517c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	609a      	str	r2, [r3, #8]
      break;
 8004e98:	e04f      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6899      	ldr	r1, [r3, #8]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f000 f967 	bl	800517c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ebc:	609a      	str	r2, [r3, #8]
      break;
 8004ebe:	e03c      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f000 f8db 	bl	8005088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2150      	movs	r1, #80	; 0x50
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f934 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004ede:	e02c      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	461a      	mov	r2, r3
 8004eee:	f000 f8fa 	bl	80050e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2160      	movs	r1, #96	; 0x60
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f924 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004efe:	e01c      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f000 f8bb 	bl	8005088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2140      	movs	r1, #64	; 0x40
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 f914 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004f1e:	e00c      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 f90b 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004f30:	e003      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
      break;
 8004f36:	e000      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a40      	ldr	r2, [pc, #256]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3d      	ldr	r2, [pc, #244]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3b      	ldr	r2, [pc, #236]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01f      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d01b      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d017      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a29      	ldr	r2, [pc, #164]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a28      	ldr	r2, [pc, #160]	; (800507c <TIM_Base_SetConfig+0x128>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a27      	ldr	r2, [pc, #156]	; (8005080 <TIM_Base_SetConfig+0x12c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <TIM_Base_SetConfig+0x130>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00f      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a12      	ldr	r2, [pc, #72]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00b      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <TIM_Base_SetConfig+0x128>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d007      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <TIM_Base_SetConfig+0x12c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0f      	ldr	r2, [pc, #60]	; (8005084 <TIM_Base_SetConfig+0x130>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	615a      	str	r2, [r3, #20]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40013400 	.word	0x40013400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800

08005088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0201 	bic.w	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 030a 	bic.w	r3, r3, #10
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b087      	sub	sp, #28
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f023 0210 	bic.w	r2, r3, #16
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	031b      	lsls	r3, r3, #12
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	f043 0307 	orr.w	r3, r3, #7
 8005168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	609a      	str	r2, [r3, #8]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	021a      	lsls	r2, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	431a      	orrs	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e068      	b.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2e      	ldr	r2, [pc, #184]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a2d      	ldr	r2, [pc, #180]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800520e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01d      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d018      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10c      	bne.n	8005294 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40014000 	.word	0x40014000

080052cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e040      	b.n	8005360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fc fe50 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2224      	movs	r2, #36	; 0x24
 80052f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fbc2 	bl	8005a94 <UART_SetConfig>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e022      	b.n	8005360 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fe40 	bl	8005fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fec7 	bl	80060ec <UART_CheckIdleState>
 800535e:	4603      	mov	r3, r0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800537c:	2b20      	cmp	r3, #32
 800537e:	f040 8082 	bne.w	8005486 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_UART_Transmit+0x26>
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e07a      	b.n	8005488 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_UART_Transmit+0x38>
 800539c:	2302      	movs	r3, #2
 800539e:	e073      	b.n	8005488 <HAL_UART_Transmit+0x120>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2221      	movs	r2, #33	; 0x21
 80053b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053b6:	f7fc ff75 	bl	80022a4 <HAL_GetTick>
 80053ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	88fa      	ldrh	r2, [r7, #6]
 80053c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d4:	d108      	bne.n	80053e8 <HAL_UART_Transmit+0x80>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e003      	b.n	80053f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80053f8:	e02d      	b.n	8005456 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2200      	movs	r2, #0
 8005402:	2180      	movs	r1, #128	; 0x80
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 feba 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e039      	b.n	8005488 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	881a      	ldrh	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005426:	b292      	uxth	r2, r2
 8005428:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	3302      	adds	r3, #2
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e008      	b.n	8005444 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	b292      	uxth	r2, r2
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	3301      	adds	r3, #1
 8005442:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1cb      	bne.n	80053fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	2140      	movs	r1, #64	; 0x40
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fe86 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e005      	b.n	8005488 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e000      	b.n	8005488 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b0ba      	sub	sp, #232	; 0xe8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80054be:	4013      	ands	r3, r2
 80054c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d115      	bne.n	80054f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00f      	beq.n	80054f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 82a6 	beq.w	8005a3a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
      }
      return;
 80054f6:	e2a0      	b.n	8005a3a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80054f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8117 	beq.w	8005730 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800550e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005512:	4b85      	ldr	r3, [pc, #532]	; (8005728 <HAL_UART_IRQHandler+0x298>)
 8005514:	4013      	ands	r3, r2
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 810a 	beq.w	8005730 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d011      	beq.n	800554c <HAL_UART_IRQHandler+0xbc>
 8005528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2201      	movs	r2, #1
 800553a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d011      	beq.n	800557c <HAL_UART_IRQHandler+0xec>
 8005558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2202      	movs	r2, #2
 800556a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005572:	f043 0204 	orr.w	r2, r3, #4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800557c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d011      	beq.n	80055ac <HAL_UART_IRQHandler+0x11c>
 8005588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00b      	beq.n	80055ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2204      	movs	r2, #4
 800559a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a2:	f043 0202 	orr.w	r2, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d017      	beq.n	80055e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2208      	movs	r2, #8
 80055d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055de:	f043 0208 	orr.w	r2, r3, #8
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <HAL_UART_IRQHandler+0x18a>
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00c      	beq.n	800561a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 820c 	beq.w	8005a3e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005654:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d005      	beq.n	8005672 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800566a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800566e:	2b00      	cmp	r3, #0
 8005670:	d04f      	beq.n	8005712 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fe47 	bl	8006306 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d141      	bne.n	800570a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3308      	adds	r3, #8
 800568c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800569c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3308      	adds	r3, #8
 80056ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1d9      	bne.n	8005686 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d013      	beq.n	8005702 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	4a13      	ldr	r2, [pc, #76]	; (800572c <HAL_UART_IRQHandler+0x29c>)
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fc ff5b 	bl	80025a2 <HAL_DMA_Abort_IT>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d017      	beq.n	8005722 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80056fc:	4610      	mov	r0, r2
 80056fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	e00f      	b.n	8005722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f9b0 	bl	8005a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005708:	e00b      	b.n	8005722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9ac 	bl	8005a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	e007      	b.n	8005722 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9a8 	bl	8005a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005720:	e18d      	b.n	8005a3e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005722:	bf00      	nop
    return;
 8005724:	e18b      	b.n	8005a3e <HAL_UART_IRQHandler+0x5ae>
 8005726:	bf00      	nop
 8005728:	04000120 	.word	0x04000120
 800572c:	080063cd 	.word	0x080063cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005734:	2b01      	cmp	r3, #1
 8005736:	f040 8146 	bne.w	80059c6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 813f 	beq.w	80059c6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8138 	beq.w	80059c6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2210      	movs	r2, #16
 800575c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	f040 80b4 	bne.w	80058d6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800577a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 815f 	beq.w	8005a42 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800578a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800578e:	429a      	cmp	r2, r3
 8005790:	f080 8157 	bcs.w	8005a42 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800579a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 8085 	bne.w	80058ba <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1da      	bne.n	80057b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3308      	adds	r3, #8
 8005800:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800580a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800581e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005822:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005826:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e1      	bne.n	80057fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3308      	adds	r3, #8
 800583c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800584c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3308      	adds	r3, #8
 8005856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800585a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800585c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005860:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e3      	bne.n	8005836 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588a:	f023 0310 	bic.w	r3, r3, #16
 800588e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800589c:	65bb      	str	r3, [r7, #88]	; 0x58
 800589e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e4      	bne.n	800587a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fc fe36 	bl	8002526 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8d4 	bl	8005a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058d4:	e0b5      	b.n	8005a42 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80a7 	beq.w	8005a46 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80058f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80a2 	beq.w	8005a46 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005924:	647b      	str	r3, [r7, #68]	; 0x44
 8005926:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800592a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e4      	bne.n	8005902 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	623b      	str	r3, [r7, #32]
   return(result);
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3308      	adds	r3, #8
 8005958:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800595c:	633a      	str	r2, [r7, #48]	; 0x30
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e3      	bne.n	8005938 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0310 	bic.w	r3, r3, #16
 8005996:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	69b9      	ldr	r1, [r7, #24]
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	617b      	str	r3, [r7, #20]
   return(result);
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e4      	bne.n	8005982 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f85c 	bl	8005a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059c4:	e03f      	b.n	8005a46 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00e      	beq.n	80059f0 <HAL_UART_IRQHandler+0x560>
 80059d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fd2f 	bl	800644c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059ee:	e02d      	b.n	8005a4c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00e      	beq.n	8005a1a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01c      	beq.n	8005a4a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
    }
    return;
 8005a18:	e017      	b.n	8005a4a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d012      	beq.n	8005a4c <HAL_UART_IRQHandler+0x5bc>
 8005a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00c      	beq.n	8005a4c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fce0 	bl	80063f8 <UART_EndTransmit_IT>
    return;
 8005a38:	e008      	b.n	8005a4c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a3a:	bf00      	nop
 8005a3c:	e006      	b.n	8005a4c <HAL_UART_IRQHandler+0x5bc>
    return;
 8005a3e:	bf00      	nop
 8005a40:	e004      	b.n	8005a4c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a42:	bf00      	nop
 8005a44:	e002      	b.n	8005a4c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <HAL_UART_IRQHandler+0x5bc>
    return;
 8005a4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005a4c:	37e8      	adds	r7, #232	; 0xe8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop

08005a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a94:	b5b0      	push	{r4, r5, r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4bad      	ldr	r3, [pc, #692]	; (8005d74 <UART_SetConfig+0x2e0>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	69f9      	ldr	r1, [r7, #28]
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4aa2      	ldr	r2, [pc, #648]	; (8005d78 <UART_SetConfig+0x2e4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d004      	beq.n	8005afc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a99      	ldr	r2, [pc, #612]	; (8005d7c <UART_SetConfig+0x2e8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d121      	bne.n	8005b5e <UART_SetConfig+0xca>
 8005b1a:	4b99      	ldr	r3, [pc, #612]	; (8005d80 <UART_SetConfig+0x2ec>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d817      	bhi.n	8005b58 <UART_SetConfig+0xc4>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <UART_SetConfig+0x9c>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b41 	.word	0x08005b41
 8005b34:	08005b4d 	.word	0x08005b4d
 8005b38:	08005b47 	.word	0x08005b47
 8005b3c:	08005b53 	.word	0x08005b53
 8005b40:	2301      	movs	r3, #1
 8005b42:	76fb      	strb	r3, [r7, #27]
 8005b44:	e0e7      	b.n	8005d16 <UART_SetConfig+0x282>
 8005b46:	2302      	movs	r3, #2
 8005b48:	76fb      	strb	r3, [r7, #27]
 8005b4a:	e0e4      	b.n	8005d16 <UART_SetConfig+0x282>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	76fb      	strb	r3, [r7, #27]
 8005b50:	e0e1      	b.n	8005d16 <UART_SetConfig+0x282>
 8005b52:	2308      	movs	r3, #8
 8005b54:	76fb      	strb	r3, [r7, #27]
 8005b56:	e0de      	b.n	8005d16 <UART_SetConfig+0x282>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	76fb      	strb	r3, [r7, #27]
 8005b5c:	e0db      	b.n	8005d16 <UART_SetConfig+0x282>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a88      	ldr	r2, [pc, #544]	; (8005d84 <UART_SetConfig+0x2f0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d132      	bne.n	8005bce <UART_SetConfig+0x13a>
 8005b68:	4b85      	ldr	r3, [pc, #532]	; (8005d80 <UART_SetConfig+0x2ec>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	2b0c      	cmp	r3, #12
 8005b74:	d828      	bhi.n	8005bc8 <UART_SetConfig+0x134>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <UART_SetConfig+0xe8>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005bb1 	.word	0x08005bb1
 8005b80:	08005bc9 	.word	0x08005bc9
 8005b84:	08005bc9 	.word	0x08005bc9
 8005b88:	08005bc9 	.word	0x08005bc9
 8005b8c:	08005bbd 	.word	0x08005bbd
 8005b90:	08005bc9 	.word	0x08005bc9
 8005b94:	08005bc9 	.word	0x08005bc9
 8005b98:	08005bc9 	.word	0x08005bc9
 8005b9c:	08005bb7 	.word	0x08005bb7
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005bc9 	.word	0x08005bc9
 8005bac:	08005bc3 	.word	0x08005bc3
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	76fb      	strb	r3, [r7, #27]
 8005bb4:	e0af      	b.n	8005d16 <UART_SetConfig+0x282>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	76fb      	strb	r3, [r7, #27]
 8005bba:	e0ac      	b.n	8005d16 <UART_SetConfig+0x282>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	76fb      	strb	r3, [r7, #27]
 8005bc0:	e0a9      	b.n	8005d16 <UART_SetConfig+0x282>
 8005bc2:	2308      	movs	r3, #8
 8005bc4:	76fb      	strb	r3, [r7, #27]
 8005bc6:	e0a6      	b.n	8005d16 <UART_SetConfig+0x282>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	76fb      	strb	r3, [r7, #27]
 8005bcc:	e0a3      	b.n	8005d16 <UART_SetConfig+0x282>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a6d      	ldr	r2, [pc, #436]	; (8005d88 <UART_SetConfig+0x2f4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d120      	bne.n	8005c1a <UART_SetConfig+0x186>
 8005bd8:	4b69      	ldr	r3, [pc, #420]	; (8005d80 <UART_SetConfig+0x2ec>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005be2:	2b30      	cmp	r3, #48	; 0x30
 8005be4:	d013      	beq.n	8005c0e <UART_SetConfig+0x17a>
 8005be6:	2b30      	cmp	r3, #48	; 0x30
 8005be8:	d814      	bhi.n	8005c14 <UART_SetConfig+0x180>
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d009      	beq.n	8005c02 <UART_SetConfig+0x16e>
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d810      	bhi.n	8005c14 <UART_SetConfig+0x180>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <UART_SetConfig+0x168>
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d006      	beq.n	8005c08 <UART_SetConfig+0x174>
 8005bfa:	e00b      	b.n	8005c14 <UART_SetConfig+0x180>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	76fb      	strb	r3, [r7, #27]
 8005c00:	e089      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c02:	2302      	movs	r3, #2
 8005c04:	76fb      	strb	r3, [r7, #27]
 8005c06:	e086      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	76fb      	strb	r3, [r7, #27]
 8005c0c:	e083      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c0e:	2308      	movs	r3, #8
 8005c10:	76fb      	strb	r3, [r7, #27]
 8005c12:	e080      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c14:	2310      	movs	r3, #16
 8005c16:	76fb      	strb	r3, [r7, #27]
 8005c18:	e07d      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a5b      	ldr	r2, [pc, #364]	; (8005d8c <UART_SetConfig+0x2f8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d120      	bne.n	8005c66 <UART_SetConfig+0x1d2>
 8005c24:	4b56      	ldr	r3, [pc, #344]	; (8005d80 <UART_SetConfig+0x2ec>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c30:	d013      	beq.n	8005c5a <UART_SetConfig+0x1c6>
 8005c32:	2bc0      	cmp	r3, #192	; 0xc0
 8005c34:	d814      	bhi.n	8005c60 <UART_SetConfig+0x1cc>
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d009      	beq.n	8005c4e <UART_SetConfig+0x1ba>
 8005c3a:	2b80      	cmp	r3, #128	; 0x80
 8005c3c:	d810      	bhi.n	8005c60 <UART_SetConfig+0x1cc>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <UART_SetConfig+0x1b4>
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d006      	beq.n	8005c54 <UART_SetConfig+0x1c0>
 8005c46:	e00b      	b.n	8005c60 <UART_SetConfig+0x1cc>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	76fb      	strb	r3, [r7, #27]
 8005c4c:	e063      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	76fb      	strb	r3, [r7, #27]
 8005c52:	e060      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c54:	2304      	movs	r3, #4
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e05d      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	76fb      	strb	r3, [r7, #27]
 8005c5e:	e05a      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c60:	2310      	movs	r3, #16
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e057      	b.n	8005d16 <UART_SetConfig+0x282>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a49      	ldr	r2, [pc, #292]	; (8005d90 <UART_SetConfig+0x2fc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d125      	bne.n	8005cbc <UART_SetConfig+0x228>
 8005c70:	4b43      	ldr	r3, [pc, #268]	; (8005d80 <UART_SetConfig+0x2ec>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c7e:	d017      	beq.n	8005cb0 <UART_SetConfig+0x21c>
 8005c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c84:	d817      	bhi.n	8005cb6 <UART_SetConfig+0x222>
 8005c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c8a:	d00b      	beq.n	8005ca4 <UART_SetConfig+0x210>
 8005c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c90:	d811      	bhi.n	8005cb6 <UART_SetConfig+0x222>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <UART_SetConfig+0x20a>
 8005c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9a:	d006      	beq.n	8005caa <UART_SetConfig+0x216>
 8005c9c:	e00b      	b.n	8005cb6 <UART_SetConfig+0x222>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	76fb      	strb	r3, [r7, #27]
 8005ca2:	e038      	b.n	8005d16 <UART_SetConfig+0x282>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	76fb      	strb	r3, [r7, #27]
 8005ca8:	e035      	b.n	8005d16 <UART_SetConfig+0x282>
 8005caa:	2304      	movs	r3, #4
 8005cac:	76fb      	strb	r3, [r7, #27]
 8005cae:	e032      	b.n	8005d16 <UART_SetConfig+0x282>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	76fb      	strb	r3, [r7, #27]
 8005cb4:	e02f      	b.n	8005d16 <UART_SetConfig+0x282>
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	76fb      	strb	r3, [r7, #27]
 8005cba:	e02c      	b.n	8005d16 <UART_SetConfig+0x282>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2d      	ldr	r2, [pc, #180]	; (8005d78 <UART_SetConfig+0x2e4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d125      	bne.n	8005d12 <UART_SetConfig+0x27e>
 8005cc6:	4b2e      	ldr	r3, [pc, #184]	; (8005d80 <UART_SetConfig+0x2ec>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cd4:	d017      	beq.n	8005d06 <UART_SetConfig+0x272>
 8005cd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cda:	d817      	bhi.n	8005d0c <UART_SetConfig+0x278>
 8005cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce0:	d00b      	beq.n	8005cfa <UART_SetConfig+0x266>
 8005ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce6:	d811      	bhi.n	8005d0c <UART_SetConfig+0x278>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <UART_SetConfig+0x260>
 8005cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf0:	d006      	beq.n	8005d00 <UART_SetConfig+0x26c>
 8005cf2:	e00b      	b.n	8005d0c <UART_SetConfig+0x278>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	76fb      	strb	r3, [r7, #27]
 8005cf8:	e00d      	b.n	8005d16 <UART_SetConfig+0x282>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	76fb      	strb	r3, [r7, #27]
 8005cfe:	e00a      	b.n	8005d16 <UART_SetConfig+0x282>
 8005d00:	2304      	movs	r3, #4
 8005d02:	76fb      	strb	r3, [r7, #27]
 8005d04:	e007      	b.n	8005d16 <UART_SetConfig+0x282>
 8005d06:	2308      	movs	r3, #8
 8005d08:	76fb      	strb	r3, [r7, #27]
 8005d0a:	e004      	b.n	8005d16 <UART_SetConfig+0x282>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	76fb      	strb	r3, [r7, #27]
 8005d10:	e001      	b.n	8005d16 <UART_SetConfig+0x282>
 8005d12:	2310      	movs	r3, #16
 8005d14:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <UART_SetConfig+0x2e4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	f040 8087 	bne.w	8005e30 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d22:	7efb      	ldrb	r3, [r7, #27]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d837      	bhi.n	8005d98 <UART_SetConfig+0x304>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <UART_SetConfig+0x29c>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d99 	.word	0x08005d99
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d99 	.word	0x08005d99
 8005d40:	08005d63 	.word	0x08005d63
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005d99 	.word	0x08005d99
 8005d50:	08005d6b 	.word	0x08005d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d54:	f7fe fa96 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8005d58:	6178      	str	r0, [r7, #20]
        break;
 8005d5a:	e022      	b.n	8005da2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <UART_SetConfig+0x300>)
 8005d5e:	617b      	str	r3, [r7, #20]
        break;
 8005d60:	e01f      	b.n	8005da2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d62:	f7fe f9f7 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8005d66:	6178      	str	r0, [r7, #20]
        break;
 8005d68:	e01b      	b.n	8005da2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6e:	617b      	str	r3, [r7, #20]
        break;
 8005d70:	e017      	b.n	8005da2 <UART_SetConfig+0x30e>
 8005d72:	bf00      	nop
 8005d74:	efff69f3 	.word	0xefff69f3
 8005d78:	40008000 	.word	0x40008000
 8005d7c:	40013800 	.word	0x40013800
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40004400 	.word	0x40004400
 8005d88:	40004800 	.word	0x40004800
 8005d8c:	40004c00 	.word	0x40004c00
 8005d90:	40005000 	.word	0x40005000
 8005d94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	76bb      	strb	r3, [r7, #26]
        break;
 8005da0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80f1 	beq.w	8005f8c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4413      	add	r3, r2
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d305      	bcc.n	8005dc6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d902      	bls.n	8005dcc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	76bb      	strb	r3, [r7, #26]
 8005dca:	e0df      	b.n	8005f8c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f04f 0100 	mov.w	r1, #0
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	020b      	lsls	r3, r1, #8
 8005dde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005de2:	0202      	lsls	r2, r0, #8
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	6849      	ldr	r1, [r1, #4]
 8005de8:	0849      	lsrs	r1, r1, #1
 8005dea:	4608      	mov	r0, r1
 8005dec:	f04f 0100 	mov.w	r1, #0
 8005df0:	1814      	adds	r4, r2, r0
 8005df2:	eb43 0501 	adc.w	r5, r3, r1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	4620      	mov	r0, r4
 8005e02:	4629      	mov	r1, r5
 8005e04:	f7fa fe9c 	bl	8000b40 <__aeabi_uldivmod>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e16:	d308      	bcc.n	8005e2a <UART_SetConfig+0x396>
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1e:	d204      	bcs.n	8005e2a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	60da      	str	r2, [r3, #12]
 8005e28:	e0b0      	b.n	8005f8c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	76bb      	strb	r3, [r7, #26]
 8005e2e:	e0ad      	b.n	8005f8c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e38:	d15b      	bne.n	8005ef2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005e3a:	7efb      	ldrb	r3, [r7, #27]
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d828      	bhi.n	8005e92 <UART_SetConfig+0x3fe>
 8005e40:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <UART_SetConfig+0x3b4>)
 8005e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e46:	bf00      	nop
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	08005e93 	.word	0x08005e93
 8005e58:	08005e83 	.word	0x08005e83
 8005e5c:	08005e93 	.word	0x08005e93
 8005e60:	08005e93 	.word	0x08005e93
 8005e64:	08005e93 	.word	0x08005e93
 8005e68:	08005e8b 	.word	0x08005e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6c:	f7fe fa0a 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8005e70:	6178      	str	r0, [r7, #20]
        break;
 8005e72:	e013      	b.n	8005e9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e74:	f7fe fa1c 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8005e78:	6178      	str	r0, [r7, #20]
        break;
 8005e7a:	e00f      	b.n	8005e9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e7c:	4b49      	ldr	r3, [pc, #292]	; (8005fa4 <UART_SetConfig+0x510>)
 8005e7e:	617b      	str	r3, [r7, #20]
        break;
 8005e80:	e00c      	b.n	8005e9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e82:	f7fe f967 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8005e86:	6178      	str	r0, [r7, #20]
        break;
 8005e88:	e008      	b.n	8005e9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8e:	617b      	str	r3, [r7, #20]
        break;
 8005e90:	e004      	b.n	8005e9c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	76bb      	strb	r3, [r7, #26]
        break;
 8005e9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d074      	beq.n	8005f8c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	005a      	lsls	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	441a      	add	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b0f      	cmp	r3, #15
 8005ebc:	d916      	bls.n	8005eec <UART_SetConfig+0x458>
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec4:	d212      	bcs.n	8005eec <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f023 030f 	bic.w	r3, r3, #15
 8005ece:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	89fb      	ldrh	r3, [r7, #14]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	89fa      	ldrh	r2, [r7, #14]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	e04f      	b.n	8005f8c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	76bb      	strb	r3, [r7, #26]
 8005ef0:	e04c      	b.n	8005f8c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ef2:	7efb      	ldrb	r3, [r7, #27]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d828      	bhi.n	8005f4a <UART_SetConfig+0x4b6>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <UART_SetConfig+0x46c>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f35 	.word	0x08005f35
 8005f0c:	08005f4b 	.word	0x08005f4b
 8005f10:	08005f3b 	.word	0x08005f3b
 8005f14:	08005f4b 	.word	0x08005f4b
 8005f18:	08005f4b 	.word	0x08005f4b
 8005f1c:	08005f4b 	.word	0x08005f4b
 8005f20:	08005f43 	.word	0x08005f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f24:	f7fe f9ae 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8005f28:	6178      	str	r0, [r7, #20]
        break;
 8005f2a:	e013      	b.n	8005f54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f2c:	f7fe f9c0 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8005f30:	6178      	str	r0, [r7, #20]
        break;
 8005f32:	e00f      	b.n	8005f54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f34:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <UART_SetConfig+0x510>)
 8005f36:	617b      	str	r3, [r7, #20]
        break;
 8005f38:	e00c      	b.n	8005f54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3a:	f7fe f90b 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8005f3e:	6178      	str	r0, [r7, #20]
        break;
 8005f40:	e008      	b.n	8005f54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f46:	617b      	str	r3, [r7, #20]
        break;
 8005f48:	e004      	b.n	8005f54 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	76bb      	strb	r3, [r7, #26]
        break;
 8005f52:	bf00      	nop
    }

    if (pclk != 0U)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	085a      	lsrs	r2, r3, #1
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	441a      	add	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b0f      	cmp	r3, #15
 8005f72:	d909      	bls.n	8005f88 <UART_SetConfig+0x4f4>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7a:	d205      	bcs.n	8005f88 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e001      	b.n	8005f8c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f98:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	00f42400 	.word	0x00f42400

08005fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01a      	beq.n	80060be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a6:	d10a      	bne.n	80060be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060fc:	f7fc f8d2 	bl	80022a4 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b08      	cmp	r3, #8
 800610e:	d10e      	bne.n	800612e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f82d 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e023      	b.n	8006176 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b04      	cmp	r3, #4
 800613a:	d10e      	bne.n	800615a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800613c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f817 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e00d      	b.n	8006176 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b09c      	sub	sp, #112	; 0x70
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	603b      	str	r3, [r7, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618e:	e0a5      	b.n	80062dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	f000 80a1 	beq.w	80062dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619a:	f7fc f883 	bl	80022a4 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80061aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d13e      	bne.n	800622e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061c4:	667b      	str	r3, [r7, #100]	; 0x64
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e6      	bne.n	80061b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	663b      	str	r3, [r7, #96]	; 0x60
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006202:	64ba      	str	r2, [r7, #72]	; 0x48
 8006204:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e067      	b.n	80062fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d04f      	beq.n	80062dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624a:	d147      	bne.n	80062dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006254:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800626a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
 8006276:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800627a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e6      	bne.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3308      	adds	r3, #8
 800628e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	613b      	str	r3, [r7, #16]
   return(result);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	66bb      	str	r3, [r7, #104]	; 0x68
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3308      	adds	r3, #8
 80062a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062a8:	623a      	str	r2, [r7, #32]
 80062aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69f9      	ldr	r1, [r7, #28]
 80062ae:	6a3a      	ldr	r2, [r7, #32]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e5      	bne.n	8006288 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2220      	movs	r2, #32
 80062c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e010      	b.n	80062fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4013      	ands	r3, r2
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	f43f af4a 	beq.w	8006190 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3770      	adds	r7, #112	; 0x70
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006306:	b480      	push	{r7}
 8006308:	b095      	sub	sp, #84	; 0x54
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632c:	643b      	str	r3, [r7, #64]	; 0x40
 800632e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3308      	adds	r3, #8
 800635e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006378:	2b01      	cmp	r3, #1
 800637a:	d118      	bne.n	80063ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	60bb      	str	r3, [r7, #8]
   return(result);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f023 0310 	bic.w	r3, r3, #16
 8006390:	647b      	str	r3, [r7, #68]	; 0x44
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6979      	ldr	r1, [r7, #20]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	613b      	str	r3, [r7, #16]
   return(result);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e6      	bne.n	800637c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80063c0:	bf00      	nop
 80063c2:	3754      	adds	r7, #84	; 0x54
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff fb3c 	bl	8005a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	60bb      	str	r3, [r7, #8]
   return(result);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006414:	61fb      	str	r3, [r7, #28]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6979      	ldr	r1, [r7, #20]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	613b      	str	r3, [r7, #16]
   return(result);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e6      	bne.n	8006400 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fb08 	bl	8005a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006444:	bf00      	nop
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <__errno>:
 8006460:	4b01      	ldr	r3, [pc, #4]	; (8006468 <__errno+0x8>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	2000000c 	.word	0x2000000c

0800646c <__libc_init_array>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4d0d      	ldr	r5, [pc, #52]	; (80064a4 <__libc_init_array+0x38>)
 8006470:	4c0d      	ldr	r4, [pc, #52]	; (80064a8 <__libc_init_array+0x3c>)
 8006472:	1b64      	subs	r4, r4, r5
 8006474:	10a4      	asrs	r4, r4, #2
 8006476:	2600      	movs	r6, #0
 8006478:	42a6      	cmp	r6, r4
 800647a:	d109      	bne.n	8006490 <__libc_init_array+0x24>
 800647c:	4d0b      	ldr	r5, [pc, #44]	; (80064ac <__libc_init_array+0x40>)
 800647e:	4c0c      	ldr	r4, [pc, #48]	; (80064b0 <__libc_init_array+0x44>)
 8006480:	f000 ffe4 	bl	800744c <_init>
 8006484:	1b64      	subs	r4, r4, r5
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	2600      	movs	r6, #0
 800648a:	42a6      	cmp	r6, r4
 800648c:	d105      	bne.n	800649a <__libc_init_array+0x2e>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	f855 3b04 	ldr.w	r3, [r5], #4
 8006494:	4798      	blx	r3
 8006496:	3601      	adds	r6, #1
 8006498:	e7ee      	b.n	8006478 <__libc_init_array+0xc>
 800649a:	f855 3b04 	ldr.w	r3, [r5], #4
 800649e:	4798      	blx	r3
 80064a0:	3601      	adds	r6, #1
 80064a2:	e7f2      	b.n	800648a <__libc_init_array+0x1e>
 80064a4:	08007508 	.word	0x08007508
 80064a8:	08007508 	.word	0x08007508
 80064ac:	08007508 	.word	0x08007508
 80064b0:	0800750c 	.word	0x0800750c

080064b4 <memcpy>:
 80064b4:	440a      	add	r2, r1
 80064b6:	4291      	cmp	r1, r2
 80064b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064bc:	d100      	bne.n	80064c0 <memcpy+0xc>
 80064be:	4770      	bx	lr
 80064c0:	b510      	push	{r4, lr}
 80064c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ca:	4291      	cmp	r1, r2
 80064cc:	d1f9      	bne.n	80064c2 <memcpy+0xe>
 80064ce:	bd10      	pop	{r4, pc}

080064d0 <memset>:
 80064d0:	4402      	add	r2, r0
 80064d2:	4603      	mov	r3, r0
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d100      	bne.n	80064da <memset+0xa>
 80064d8:	4770      	bx	lr
 80064da:	f803 1b01 	strb.w	r1, [r3], #1
 80064de:	e7f9      	b.n	80064d4 <memset+0x4>

080064e0 <pow>:
 80064e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e4:	ec59 8b10 	vmov	r8, r9, d0
 80064e8:	ec57 6b11 	vmov	r6, r7, d1
 80064ec:	f000 f8a8 	bl	8006640 <__ieee754_pow>
 80064f0:	4b4e      	ldr	r3, [pc, #312]	; (800662c <pow+0x14c>)
 80064f2:	f993 3000 	ldrsb.w	r3, [r3]
 80064f6:	3301      	adds	r3, #1
 80064f8:	ec55 4b10 	vmov	r4, r5, d0
 80064fc:	d015      	beq.n	800652a <pow+0x4a>
 80064fe:	4632      	mov	r2, r6
 8006500:	463b      	mov	r3, r7
 8006502:	4630      	mov	r0, r6
 8006504:	4639      	mov	r1, r7
 8006506:	f7fa fab5 	bl	8000a74 <__aeabi_dcmpun>
 800650a:	b970      	cbnz	r0, 800652a <pow+0x4a>
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	f7fa faae 	bl	8000a74 <__aeabi_dcmpun>
 8006518:	2200      	movs	r2, #0
 800651a:	2300      	movs	r3, #0
 800651c:	b148      	cbz	r0, 8006532 <pow+0x52>
 800651e:	4630      	mov	r0, r6
 8006520:	4639      	mov	r1, r7
 8006522:	f7fa fa75 	bl	8000a10 <__aeabi_dcmpeq>
 8006526:	2800      	cmp	r0, #0
 8006528:	d17d      	bne.n	8006626 <pow+0x146>
 800652a:	ec45 4b10 	vmov	d0, r4, r5
 800652e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7fa fa6b 	bl	8000a10 <__aeabi_dcmpeq>
 800653a:	b1e0      	cbz	r0, 8006576 <pow+0x96>
 800653c:	2200      	movs	r2, #0
 800653e:	2300      	movs	r3, #0
 8006540:	4630      	mov	r0, r6
 8006542:	4639      	mov	r1, r7
 8006544:	f7fa fa64 	bl	8000a10 <__aeabi_dcmpeq>
 8006548:	2800      	cmp	r0, #0
 800654a:	d16c      	bne.n	8006626 <pow+0x146>
 800654c:	ec47 6b10 	vmov	d0, r6, r7
 8006550:	f000 fe55 	bl	80071fe <finite>
 8006554:	2800      	cmp	r0, #0
 8006556:	d0e8      	beq.n	800652a <pow+0x4a>
 8006558:	2200      	movs	r2, #0
 800655a:	2300      	movs	r3, #0
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7fa fa60 	bl	8000a24 <__aeabi_dcmplt>
 8006564:	2800      	cmp	r0, #0
 8006566:	d0e0      	beq.n	800652a <pow+0x4a>
 8006568:	f7ff ff7a 	bl	8006460 <__errno>
 800656c:	2321      	movs	r3, #33	; 0x21
 800656e:	6003      	str	r3, [r0, #0]
 8006570:	2400      	movs	r4, #0
 8006572:	4d2f      	ldr	r5, [pc, #188]	; (8006630 <pow+0x150>)
 8006574:	e7d9      	b.n	800652a <pow+0x4a>
 8006576:	ec45 4b10 	vmov	d0, r4, r5
 800657a:	f000 fe40 	bl	80071fe <finite>
 800657e:	bbb8      	cbnz	r0, 80065f0 <pow+0x110>
 8006580:	ec49 8b10 	vmov	d0, r8, r9
 8006584:	f000 fe3b 	bl	80071fe <finite>
 8006588:	b390      	cbz	r0, 80065f0 <pow+0x110>
 800658a:	ec47 6b10 	vmov	d0, r6, r7
 800658e:	f000 fe36 	bl	80071fe <finite>
 8006592:	b368      	cbz	r0, 80065f0 <pow+0x110>
 8006594:	4622      	mov	r2, r4
 8006596:	462b      	mov	r3, r5
 8006598:	4620      	mov	r0, r4
 800659a:	4629      	mov	r1, r5
 800659c:	f7fa fa6a 	bl	8000a74 <__aeabi_dcmpun>
 80065a0:	b160      	cbz	r0, 80065bc <pow+0xdc>
 80065a2:	f7ff ff5d 	bl	8006460 <__errno>
 80065a6:	2321      	movs	r3, #33	; 0x21
 80065a8:	6003      	str	r3, [r0, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2300      	movs	r3, #0
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	f7fa f8ef 	bl	8000794 <__aeabi_ddiv>
 80065b6:	4604      	mov	r4, r0
 80065b8:	460d      	mov	r5, r1
 80065ba:	e7b6      	b.n	800652a <pow+0x4a>
 80065bc:	f7ff ff50 	bl	8006460 <__errno>
 80065c0:	2322      	movs	r3, #34	; 0x22
 80065c2:	6003      	str	r3, [r0, #0]
 80065c4:	2200      	movs	r2, #0
 80065c6:	2300      	movs	r3, #0
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7fa fa2a 	bl	8000a24 <__aeabi_dcmplt>
 80065d0:	2400      	movs	r4, #0
 80065d2:	b158      	cbz	r0, 80065ec <pow+0x10c>
 80065d4:	ec47 6b10 	vmov	d0, r6, r7
 80065d8:	f000 fe26 	bl	8007228 <rint>
 80065dc:	4632      	mov	r2, r6
 80065de:	ec51 0b10 	vmov	r0, r1, d0
 80065e2:	463b      	mov	r3, r7
 80065e4:	f7fa fa14 	bl	8000a10 <__aeabi_dcmpeq>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d0c2      	beq.n	8006572 <pow+0x92>
 80065ec:	4d11      	ldr	r5, [pc, #68]	; (8006634 <pow+0x154>)
 80065ee:	e79c      	b.n	800652a <pow+0x4a>
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4620      	mov	r0, r4
 80065f6:	4629      	mov	r1, r5
 80065f8:	f7fa fa0a 	bl	8000a10 <__aeabi_dcmpeq>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d094      	beq.n	800652a <pow+0x4a>
 8006600:	ec49 8b10 	vmov	d0, r8, r9
 8006604:	f000 fdfb 	bl	80071fe <finite>
 8006608:	2800      	cmp	r0, #0
 800660a:	d08e      	beq.n	800652a <pow+0x4a>
 800660c:	ec47 6b10 	vmov	d0, r6, r7
 8006610:	f000 fdf5 	bl	80071fe <finite>
 8006614:	2800      	cmp	r0, #0
 8006616:	d088      	beq.n	800652a <pow+0x4a>
 8006618:	f7ff ff22 	bl	8006460 <__errno>
 800661c:	2322      	movs	r3, #34	; 0x22
 800661e:	6003      	str	r3, [r0, #0]
 8006620:	2400      	movs	r4, #0
 8006622:	2500      	movs	r5, #0
 8006624:	e781      	b.n	800652a <pow+0x4a>
 8006626:	4d04      	ldr	r5, [pc, #16]	; (8006638 <pow+0x158>)
 8006628:	2400      	movs	r4, #0
 800662a:	e77e      	b.n	800652a <pow+0x4a>
 800662c:	20000070 	.word	0x20000070
 8006630:	fff00000 	.word	0xfff00000
 8006634:	7ff00000 	.word	0x7ff00000
 8006638:	3ff00000 	.word	0x3ff00000
 800663c:	00000000 	.word	0x00000000

08006640 <__ieee754_pow>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	ed2d 8b06 	vpush	{d8-d10}
 8006648:	b08d      	sub	sp, #52	; 0x34
 800664a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800664e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006652:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006656:	ea56 0100 	orrs.w	r1, r6, r0
 800665a:	ec53 2b10 	vmov	r2, r3, d0
 800665e:	f000 84d1 	beq.w	8007004 <__ieee754_pow+0x9c4>
 8006662:	497f      	ldr	r1, [pc, #508]	; (8006860 <__ieee754_pow+0x220>)
 8006664:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006668:	428c      	cmp	r4, r1
 800666a:	ee10 8a10 	vmov	r8, s0
 800666e:	4699      	mov	r9, r3
 8006670:	dc09      	bgt.n	8006686 <__ieee754_pow+0x46>
 8006672:	d103      	bne.n	800667c <__ieee754_pow+0x3c>
 8006674:	b97a      	cbnz	r2, 8006696 <__ieee754_pow+0x56>
 8006676:	42a6      	cmp	r6, r4
 8006678:	dd02      	ble.n	8006680 <__ieee754_pow+0x40>
 800667a:	e00c      	b.n	8006696 <__ieee754_pow+0x56>
 800667c:	428e      	cmp	r6, r1
 800667e:	dc02      	bgt.n	8006686 <__ieee754_pow+0x46>
 8006680:	428e      	cmp	r6, r1
 8006682:	d110      	bne.n	80066a6 <__ieee754_pow+0x66>
 8006684:	b178      	cbz	r0, 80066a6 <__ieee754_pow+0x66>
 8006686:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800668a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800668e:	ea54 0308 	orrs.w	r3, r4, r8
 8006692:	f000 84b7 	beq.w	8007004 <__ieee754_pow+0x9c4>
 8006696:	4873      	ldr	r0, [pc, #460]	; (8006864 <__ieee754_pow+0x224>)
 8006698:	b00d      	add	sp, #52	; 0x34
 800669a:	ecbd 8b06 	vpop	{d8-d10}
 800669e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a2:	f000 bdb9 	b.w	8007218 <nan>
 80066a6:	f1b9 0f00 	cmp.w	r9, #0
 80066aa:	da36      	bge.n	800671a <__ieee754_pow+0xda>
 80066ac:	496e      	ldr	r1, [pc, #440]	; (8006868 <__ieee754_pow+0x228>)
 80066ae:	428e      	cmp	r6, r1
 80066b0:	dc51      	bgt.n	8006756 <__ieee754_pow+0x116>
 80066b2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80066b6:	428e      	cmp	r6, r1
 80066b8:	f340 84af 	ble.w	800701a <__ieee754_pow+0x9da>
 80066bc:	1531      	asrs	r1, r6, #20
 80066be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80066c2:	2914      	cmp	r1, #20
 80066c4:	dd0f      	ble.n	80066e6 <__ieee754_pow+0xa6>
 80066c6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80066ca:	fa20 fc01 	lsr.w	ip, r0, r1
 80066ce:	fa0c f101 	lsl.w	r1, ip, r1
 80066d2:	4281      	cmp	r1, r0
 80066d4:	f040 84a1 	bne.w	800701a <__ieee754_pow+0x9da>
 80066d8:	f00c 0c01 	and.w	ip, ip, #1
 80066dc:	f1cc 0102 	rsb	r1, ip, #2
 80066e0:	9100      	str	r1, [sp, #0]
 80066e2:	b180      	cbz	r0, 8006706 <__ieee754_pow+0xc6>
 80066e4:	e059      	b.n	800679a <__ieee754_pow+0x15a>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d155      	bne.n	8006796 <__ieee754_pow+0x156>
 80066ea:	f1c1 0114 	rsb	r1, r1, #20
 80066ee:	fa46 fc01 	asr.w	ip, r6, r1
 80066f2:	fa0c f101 	lsl.w	r1, ip, r1
 80066f6:	42b1      	cmp	r1, r6
 80066f8:	f040 848c 	bne.w	8007014 <__ieee754_pow+0x9d4>
 80066fc:	f00c 0c01 	and.w	ip, ip, #1
 8006700:	f1cc 0102 	rsb	r1, ip, #2
 8006704:	9100      	str	r1, [sp, #0]
 8006706:	4959      	ldr	r1, [pc, #356]	; (800686c <__ieee754_pow+0x22c>)
 8006708:	428e      	cmp	r6, r1
 800670a:	d12d      	bne.n	8006768 <__ieee754_pow+0x128>
 800670c:	2f00      	cmp	r7, #0
 800670e:	da79      	bge.n	8006804 <__ieee754_pow+0x1c4>
 8006710:	4956      	ldr	r1, [pc, #344]	; (800686c <__ieee754_pow+0x22c>)
 8006712:	2000      	movs	r0, #0
 8006714:	f7fa f83e 	bl	8000794 <__aeabi_ddiv>
 8006718:	e016      	b.n	8006748 <__ieee754_pow+0x108>
 800671a:	2100      	movs	r1, #0
 800671c:	9100      	str	r1, [sp, #0]
 800671e:	2800      	cmp	r0, #0
 8006720:	d13b      	bne.n	800679a <__ieee754_pow+0x15a>
 8006722:	494f      	ldr	r1, [pc, #316]	; (8006860 <__ieee754_pow+0x220>)
 8006724:	428e      	cmp	r6, r1
 8006726:	d1ee      	bne.n	8006706 <__ieee754_pow+0xc6>
 8006728:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800672c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006730:	ea53 0308 	orrs.w	r3, r3, r8
 8006734:	f000 8466 	beq.w	8007004 <__ieee754_pow+0x9c4>
 8006738:	4b4d      	ldr	r3, [pc, #308]	; (8006870 <__ieee754_pow+0x230>)
 800673a:	429c      	cmp	r4, r3
 800673c:	dd0d      	ble.n	800675a <__ieee754_pow+0x11a>
 800673e:	2f00      	cmp	r7, #0
 8006740:	f280 8464 	bge.w	800700c <__ieee754_pow+0x9cc>
 8006744:	2000      	movs	r0, #0
 8006746:	2100      	movs	r1, #0
 8006748:	ec41 0b10 	vmov	d0, r0, r1
 800674c:	b00d      	add	sp, #52	; 0x34
 800674e:	ecbd 8b06 	vpop	{d8-d10}
 8006752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006756:	2102      	movs	r1, #2
 8006758:	e7e0      	b.n	800671c <__ieee754_pow+0xdc>
 800675a:	2f00      	cmp	r7, #0
 800675c:	daf2      	bge.n	8006744 <__ieee754_pow+0x104>
 800675e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006762:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006766:	e7ef      	b.n	8006748 <__ieee754_pow+0x108>
 8006768:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800676c:	d104      	bne.n	8006778 <__ieee754_pow+0x138>
 800676e:	4610      	mov	r0, r2
 8006770:	4619      	mov	r1, r3
 8006772:	f7f9 fee5 	bl	8000540 <__aeabi_dmul>
 8006776:	e7e7      	b.n	8006748 <__ieee754_pow+0x108>
 8006778:	493e      	ldr	r1, [pc, #248]	; (8006874 <__ieee754_pow+0x234>)
 800677a:	428f      	cmp	r7, r1
 800677c:	d10d      	bne.n	800679a <__ieee754_pow+0x15a>
 800677e:	f1b9 0f00 	cmp.w	r9, #0
 8006782:	db0a      	blt.n	800679a <__ieee754_pow+0x15a>
 8006784:	ec43 2b10 	vmov	d0, r2, r3
 8006788:	b00d      	add	sp, #52	; 0x34
 800678a:	ecbd 8b06 	vpop	{d8-d10}
 800678e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006792:	f000 bc77 	b.w	8007084 <__ieee754_sqrt>
 8006796:	2100      	movs	r1, #0
 8006798:	9100      	str	r1, [sp, #0]
 800679a:	ec43 2b10 	vmov	d0, r2, r3
 800679e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067a2:	f000 fd23 	bl	80071ec <fabs>
 80067a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067aa:	ec51 0b10 	vmov	r0, r1, d0
 80067ae:	f1b8 0f00 	cmp.w	r8, #0
 80067b2:	d12a      	bne.n	800680a <__ieee754_pow+0x1ca>
 80067b4:	b12c      	cbz	r4, 80067c2 <__ieee754_pow+0x182>
 80067b6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800686c <__ieee754_pow+0x22c>
 80067ba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80067be:	45e6      	cmp	lr, ip
 80067c0:	d123      	bne.n	800680a <__ieee754_pow+0x1ca>
 80067c2:	2f00      	cmp	r7, #0
 80067c4:	da05      	bge.n	80067d2 <__ieee754_pow+0x192>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	2000      	movs	r0, #0
 80067cc:	4927      	ldr	r1, [pc, #156]	; (800686c <__ieee754_pow+0x22c>)
 80067ce:	f7f9 ffe1 	bl	8000794 <__aeabi_ddiv>
 80067d2:	f1b9 0f00 	cmp.w	r9, #0
 80067d6:	dab7      	bge.n	8006748 <__ieee754_pow+0x108>
 80067d8:	9b00      	ldr	r3, [sp, #0]
 80067da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80067de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80067e2:	4323      	orrs	r3, r4
 80067e4:	d108      	bne.n	80067f8 <__ieee754_pow+0x1b8>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4610      	mov	r0, r2
 80067ec:	4619      	mov	r1, r3
 80067ee:	f7f9 fcef 	bl	80001d0 <__aeabi_dsub>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	e78d      	b.n	8006714 <__ieee754_pow+0xd4>
 80067f8:	9b00      	ldr	r3, [sp, #0]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d1a4      	bne.n	8006748 <__ieee754_pow+0x108>
 80067fe:	4602      	mov	r2, r0
 8006800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006804:	4610      	mov	r0, r2
 8006806:	4619      	mov	r1, r3
 8006808:	e79e      	b.n	8006748 <__ieee754_pow+0x108>
 800680a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800680e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006812:	950a      	str	r5, [sp, #40]	; 0x28
 8006814:	9d00      	ldr	r5, [sp, #0]
 8006816:	46ac      	mov	ip, r5
 8006818:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800681a:	ea5c 0505 	orrs.w	r5, ip, r5
 800681e:	d0e4      	beq.n	80067ea <__ieee754_pow+0x1aa>
 8006820:	4b15      	ldr	r3, [pc, #84]	; (8006878 <__ieee754_pow+0x238>)
 8006822:	429e      	cmp	r6, r3
 8006824:	f340 80fc 	ble.w	8006a20 <__ieee754_pow+0x3e0>
 8006828:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800682c:	429e      	cmp	r6, r3
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <__ieee754_pow+0x230>)
 8006830:	dd07      	ble.n	8006842 <__ieee754_pow+0x202>
 8006832:	429c      	cmp	r4, r3
 8006834:	dc0a      	bgt.n	800684c <__ieee754_pow+0x20c>
 8006836:	2f00      	cmp	r7, #0
 8006838:	da84      	bge.n	8006744 <__ieee754_pow+0x104>
 800683a:	a307      	add	r3, pc, #28	; (adr r3, 8006858 <__ieee754_pow+0x218>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	e795      	b.n	800676e <__ieee754_pow+0x12e>
 8006842:	429c      	cmp	r4, r3
 8006844:	dbf7      	blt.n	8006836 <__ieee754_pow+0x1f6>
 8006846:	4b09      	ldr	r3, [pc, #36]	; (800686c <__ieee754_pow+0x22c>)
 8006848:	429c      	cmp	r4, r3
 800684a:	dd17      	ble.n	800687c <__ieee754_pow+0x23c>
 800684c:	2f00      	cmp	r7, #0
 800684e:	dcf4      	bgt.n	800683a <__ieee754_pow+0x1fa>
 8006850:	e778      	b.n	8006744 <__ieee754_pow+0x104>
 8006852:	bf00      	nop
 8006854:	f3af 8000 	nop.w
 8006858:	8800759c 	.word	0x8800759c
 800685c:	7e37e43c 	.word	0x7e37e43c
 8006860:	7ff00000 	.word	0x7ff00000
 8006864:	080074b8 	.word	0x080074b8
 8006868:	433fffff 	.word	0x433fffff
 800686c:	3ff00000 	.word	0x3ff00000
 8006870:	3fefffff 	.word	0x3fefffff
 8006874:	3fe00000 	.word	0x3fe00000
 8006878:	41e00000 	.word	0x41e00000
 800687c:	4b64      	ldr	r3, [pc, #400]	; (8006a10 <__ieee754_pow+0x3d0>)
 800687e:	2200      	movs	r2, #0
 8006880:	f7f9 fca6 	bl	80001d0 <__aeabi_dsub>
 8006884:	a356      	add	r3, pc, #344	; (adr r3, 80069e0 <__ieee754_pow+0x3a0>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	4604      	mov	r4, r0
 800688c:	460d      	mov	r5, r1
 800688e:	f7f9 fe57 	bl	8000540 <__aeabi_dmul>
 8006892:	a355      	add	r3, pc, #340	; (adr r3, 80069e8 <__ieee754_pow+0x3a8>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	4606      	mov	r6, r0
 800689a:	460f      	mov	r7, r1
 800689c:	4620      	mov	r0, r4
 800689e:	4629      	mov	r1, r5
 80068a0:	f7f9 fe4e 	bl	8000540 <__aeabi_dmul>
 80068a4:	4b5b      	ldr	r3, [pc, #364]	; (8006a14 <__ieee754_pow+0x3d4>)
 80068a6:	4682      	mov	sl, r0
 80068a8:	468b      	mov	fp, r1
 80068aa:	2200      	movs	r2, #0
 80068ac:	4620      	mov	r0, r4
 80068ae:	4629      	mov	r1, r5
 80068b0:	f7f9 fe46 	bl	8000540 <__aeabi_dmul>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	a14d      	add	r1, pc, #308	; (adr r1, 80069f0 <__ieee754_pow+0x3b0>)
 80068ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068be:	f7f9 fc87 	bl	80001d0 <__aeabi_dsub>
 80068c2:	4622      	mov	r2, r4
 80068c4:	462b      	mov	r3, r5
 80068c6:	f7f9 fe3b 	bl	8000540 <__aeabi_dmul>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	2000      	movs	r0, #0
 80068d0:	4951      	ldr	r1, [pc, #324]	; (8006a18 <__ieee754_pow+0x3d8>)
 80068d2:	f7f9 fc7d 	bl	80001d0 <__aeabi_dsub>
 80068d6:	4622      	mov	r2, r4
 80068d8:	4680      	mov	r8, r0
 80068da:	4689      	mov	r9, r1
 80068dc:	462b      	mov	r3, r5
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7f9 fe2d 	bl	8000540 <__aeabi_dmul>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4640      	mov	r0, r8
 80068ec:	4649      	mov	r1, r9
 80068ee:	f7f9 fe27 	bl	8000540 <__aeabi_dmul>
 80068f2:	a341      	add	r3, pc, #260	; (adr r3, 80069f8 <__ieee754_pow+0x3b8>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fe22 	bl	8000540 <__aeabi_dmul>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4650      	mov	r0, sl
 8006902:	4659      	mov	r1, fp
 8006904:	f7f9 fc64 	bl	80001d0 <__aeabi_dsub>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4680      	mov	r8, r0
 800690e:	4689      	mov	r9, r1
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f7f9 fc5e 	bl	80001d4 <__adddf3>
 8006918:	2400      	movs	r4, #0
 800691a:	4632      	mov	r2, r6
 800691c:	463b      	mov	r3, r7
 800691e:	4620      	mov	r0, r4
 8006920:	460d      	mov	r5, r1
 8006922:	f7f9 fc55 	bl	80001d0 <__aeabi_dsub>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7f9 fc4f 	bl	80001d0 <__aeabi_dsub>
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006936:	3b01      	subs	r3, #1
 8006938:	4313      	orrs	r3, r2
 800693a:	4682      	mov	sl, r0
 800693c:	468b      	mov	fp, r1
 800693e:	f040 81f1 	bne.w	8006d24 <__ieee754_pow+0x6e4>
 8006942:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006a00 <__ieee754_pow+0x3c0>
 8006946:	eeb0 8a47 	vmov.f32	s16, s14
 800694a:	eef0 8a67 	vmov.f32	s17, s15
 800694e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006952:	2600      	movs	r6, #0
 8006954:	4632      	mov	r2, r6
 8006956:	463b      	mov	r3, r7
 8006958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800695c:	f7f9 fc38 	bl	80001d0 <__aeabi_dsub>
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	f7f9 fdec 	bl	8000540 <__aeabi_dmul>
 8006968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	4650      	mov	r0, sl
 8006972:	4659      	mov	r1, fp
 8006974:	f7f9 fde4 	bl	8000540 <__aeabi_dmul>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4640      	mov	r0, r8
 800697e:	4649      	mov	r1, r9
 8006980:	f7f9 fc28 	bl	80001d4 <__adddf3>
 8006984:	4632      	mov	r2, r6
 8006986:	463b      	mov	r3, r7
 8006988:	4680      	mov	r8, r0
 800698a:	4689      	mov	r9, r1
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fdd6 	bl	8000540 <__aeabi_dmul>
 8006994:	460b      	mov	r3, r1
 8006996:	4604      	mov	r4, r0
 8006998:	460d      	mov	r5, r1
 800699a:	4602      	mov	r2, r0
 800699c:	4649      	mov	r1, r9
 800699e:	4640      	mov	r0, r8
 80069a0:	f7f9 fc18 	bl	80001d4 <__adddf3>
 80069a4:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <__ieee754_pow+0x3dc>)
 80069a6:	4299      	cmp	r1, r3
 80069a8:	ec45 4b19 	vmov	d9, r4, r5
 80069ac:	4606      	mov	r6, r0
 80069ae:	460f      	mov	r7, r1
 80069b0:	468b      	mov	fp, r1
 80069b2:	f340 82fe 	ble.w	8006fb2 <__ieee754_pow+0x972>
 80069b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80069ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80069be:	4303      	orrs	r3, r0
 80069c0:	f000 81f0 	beq.w	8006da4 <__ieee754_pow+0x764>
 80069c4:	a310      	add	r3, pc, #64	; (adr r3, 8006a08 <__ieee754_pow+0x3c8>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	ec51 0b18 	vmov	r0, r1, d8
 80069ce:	f7f9 fdb7 	bl	8000540 <__aeabi_dmul>
 80069d2:	a30d      	add	r3, pc, #52	; (adr r3, 8006a08 <__ieee754_pow+0x3c8>)
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	e6cb      	b.n	8006772 <__ieee754_pow+0x132>
 80069da:	bf00      	nop
 80069dc:	f3af 8000 	nop.w
 80069e0:	60000000 	.word	0x60000000
 80069e4:	3ff71547 	.word	0x3ff71547
 80069e8:	f85ddf44 	.word	0xf85ddf44
 80069ec:	3e54ae0b 	.word	0x3e54ae0b
 80069f0:	55555555 	.word	0x55555555
 80069f4:	3fd55555 	.word	0x3fd55555
 80069f8:	652b82fe 	.word	0x652b82fe
 80069fc:	3ff71547 	.word	0x3ff71547
 8006a00:	00000000 	.word	0x00000000
 8006a04:	bff00000 	.word	0xbff00000
 8006a08:	8800759c 	.word	0x8800759c
 8006a0c:	7e37e43c 	.word	0x7e37e43c
 8006a10:	3ff00000 	.word	0x3ff00000
 8006a14:	3fd00000 	.word	0x3fd00000
 8006a18:	3fe00000 	.word	0x3fe00000
 8006a1c:	408fffff 	.word	0x408fffff
 8006a20:	4bd7      	ldr	r3, [pc, #860]	; (8006d80 <__ieee754_pow+0x740>)
 8006a22:	ea03 0309 	and.w	r3, r3, r9
 8006a26:	2200      	movs	r2, #0
 8006a28:	b92b      	cbnz	r3, 8006a36 <__ieee754_pow+0x3f6>
 8006a2a:	4bd6      	ldr	r3, [pc, #856]	; (8006d84 <__ieee754_pow+0x744>)
 8006a2c:	f7f9 fd88 	bl	8000540 <__aeabi_dmul>
 8006a30:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006a34:	460c      	mov	r4, r1
 8006a36:	1523      	asrs	r3, r4, #20
 8006a38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a3c:	4413      	add	r3, r2
 8006a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a40:	4bd1      	ldr	r3, [pc, #836]	; (8006d88 <__ieee754_pow+0x748>)
 8006a42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006a46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a50:	dd08      	ble.n	8006a64 <__ieee754_pow+0x424>
 8006a52:	4bce      	ldr	r3, [pc, #824]	; (8006d8c <__ieee754_pow+0x74c>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	f340 8163 	ble.w	8006d20 <__ieee754_pow+0x6e0>
 8006a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a60:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006a64:	2400      	movs	r4, #0
 8006a66:	00e3      	lsls	r3, r4, #3
 8006a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a6a:	4bc9      	ldr	r3, [pc, #804]	; (8006d90 <__ieee754_pow+0x750>)
 8006a6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a70:	ed93 7b00 	vldr	d7, [r3]
 8006a74:	4629      	mov	r1, r5
 8006a76:	ec53 2b17 	vmov	r2, r3, d7
 8006a7a:	eeb0 8a47 	vmov.f32	s16, s14
 8006a7e:	eef0 8a67 	vmov.f32	s17, s15
 8006a82:	4682      	mov	sl, r0
 8006a84:	f7f9 fba4 	bl	80001d0 <__aeabi_dsub>
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460f      	mov	r7, r1
 8006a8e:	462b      	mov	r3, r5
 8006a90:	ec51 0b18 	vmov	r0, r1, d8
 8006a94:	f7f9 fb9e 	bl	80001d4 <__adddf3>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	49bd      	ldr	r1, [pc, #756]	; (8006d94 <__ieee754_pow+0x754>)
 8006aa0:	f7f9 fe78 	bl	8000794 <__aeabi_ddiv>
 8006aa4:	ec41 0b19 	vmov	d9, r0, r1
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7f9 fd46 	bl	8000540 <__aeabi_dmul>
 8006ab4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ab8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006abc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9304      	str	r3, [sp, #16]
 8006ac4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ac8:	46ab      	mov	fp, r5
 8006aca:	106d      	asrs	r5, r5, #1
 8006acc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006ad0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006ad4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	4614      	mov	r4, r2
 8006ae0:	461d      	mov	r5, r3
 8006ae2:	f7f9 fd2d 	bl	8000540 <__aeabi_dmul>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4630      	mov	r0, r6
 8006aec:	4639      	mov	r1, r7
 8006aee:	f7f9 fb6f 	bl	80001d0 <__aeabi_dsub>
 8006af2:	ec53 2b18 	vmov	r2, r3, d8
 8006af6:	4606      	mov	r6, r0
 8006af8:	460f      	mov	r7, r1
 8006afa:	4620      	mov	r0, r4
 8006afc:	4629      	mov	r1, r5
 8006afe:	f7f9 fb67 	bl	80001d0 <__aeabi_dsub>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4650      	mov	r0, sl
 8006b08:	4659      	mov	r1, fp
 8006b0a:	f7f9 fb61 	bl	80001d0 <__aeabi_dsub>
 8006b0e:	4642      	mov	r2, r8
 8006b10:	464b      	mov	r3, r9
 8006b12:	f7f9 fd15 	bl	8000540 <__aeabi_dmul>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	f7f9 fb57 	bl	80001d0 <__aeabi_dsub>
 8006b22:	ec53 2b19 	vmov	r2, r3, d9
 8006b26:	f7f9 fd0b 	bl	8000540 <__aeabi_dmul>
 8006b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b2e:	ec41 0b18 	vmov	d8, r0, r1
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7f9 fd03 	bl	8000540 <__aeabi_dmul>
 8006b3a:	a37d      	add	r3, pc, #500	; (adr r3, 8006d30 <__ieee754_pow+0x6f0>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	4604      	mov	r4, r0
 8006b42:	460d      	mov	r5, r1
 8006b44:	f7f9 fcfc 	bl	8000540 <__aeabi_dmul>
 8006b48:	a37b      	add	r3, pc, #492	; (adr r3, 8006d38 <__ieee754_pow+0x6f8>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fb41 	bl	80001d4 <__adddf3>
 8006b52:	4622      	mov	r2, r4
 8006b54:	462b      	mov	r3, r5
 8006b56:	f7f9 fcf3 	bl	8000540 <__aeabi_dmul>
 8006b5a:	a379      	add	r3, pc, #484	; (adr r3, 8006d40 <__ieee754_pow+0x700>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 fb38 	bl	80001d4 <__adddf3>
 8006b64:	4622      	mov	r2, r4
 8006b66:	462b      	mov	r3, r5
 8006b68:	f7f9 fcea 	bl	8000540 <__aeabi_dmul>
 8006b6c:	a376      	add	r3, pc, #472	; (adr r3, 8006d48 <__ieee754_pow+0x708>)
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f7f9 fb2f 	bl	80001d4 <__adddf3>
 8006b76:	4622      	mov	r2, r4
 8006b78:	462b      	mov	r3, r5
 8006b7a:	f7f9 fce1 	bl	8000540 <__aeabi_dmul>
 8006b7e:	a374      	add	r3, pc, #464	; (adr r3, 8006d50 <__ieee754_pow+0x710>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fb26 	bl	80001d4 <__adddf3>
 8006b88:	4622      	mov	r2, r4
 8006b8a:	462b      	mov	r3, r5
 8006b8c:	f7f9 fcd8 	bl	8000540 <__aeabi_dmul>
 8006b90:	a371      	add	r3, pc, #452	; (adr r3, 8006d58 <__ieee754_pow+0x718>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fb1d 	bl	80001d4 <__adddf3>
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	f7f9 fccb 	bl	8000540 <__aeabi_dmul>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4630      	mov	r0, r6
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	f7f9 fcc5 	bl	8000540 <__aeabi_dmul>
 8006bb6:	4642      	mov	r2, r8
 8006bb8:	4604      	mov	r4, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bc2:	f7f9 fb07 	bl	80001d4 <__adddf3>
 8006bc6:	ec53 2b18 	vmov	r2, r3, d8
 8006bca:	f7f9 fcb9 	bl	8000540 <__aeabi_dmul>
 8006bce:	4622      	mov	r2, r4
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	f7f9 faff 	bl	80001d4 <__adddf3>
 8006bd6:	4642      	mov	r2, r8
 8006bd8:	4682      	mov	sl, r0
 8006bda:	468b      	mov	fp, r1
 8006bdc:	464b      	mov	r3, r9
 8006bde:	4640      	mov	r0, r8
 8006be0:	4649      	mov	r1, r9
 8006be2:	f7f9 fcad 	bl	8000540 <__aeabi_dmul>
 8006be6:	4b6c      	ldr	r3, [pc, #432]	; (8006d98 <__ieee754_pow+0x758>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	f7f9 faf1 	bl	80001d4 <__adddf3>
 8006bf2:	4652      	mov	r2, sl
 8006bf4:	465b      	mov	r3, fp
 8006bf6:	f7f9 faed 	bl	80001d4 <__adddf3>
 8006bfa:	9c04      	ldr	r4, [sp, #16]
 8006bfc:	460d      	mov	r5, r1
 8006bfe:	4622      	mov	r2, r4
 8006c00:	460b      	mov	r3, r1
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	f7f9 fc9b 	bl	8000540 <__aeabi_dmul>
 8006c0a:	4b63      	ldr	r3, [pc, #396]	; (8006d98 <__ieee754_pow+0x758>)
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	4689      	mov	r9, r1
 8006c10:	2200      	movs	r2, #0
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7f9 fadb 	bl	80001d0 <__aeabi_dsub>
 8006c1a:	4632      	mov	r2, r6
 8006c1c:	463b      	mov	r3, r7
 8006c1e:	f7f9 fad7 	bl	80001d0 <__aeabi_dsub>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4650      	mov	r0, sl
 8006c28:	4659      	mov	r1, fp
 8006c2a:	f7f9 fad1 	bl	80001d0 <__aeabi_dsub>
 8006c2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c32:	f7f9 fc85 	bl	8000540 <__aeabi_dmul>
 8006c36:	4622      	mov	r2, r4
 8006c38:	4606      	mov	r6, r0
 8006c3a:	460f      	mov	r7, r1
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	ec51 0b18 	vmov	r0, r1, d8
 8006c42:	f7f9 fc7d 	bl	8000540 <__aeabi_dmul>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	f7f9 fac1 	bl	80001d4 <__adddf3>
 8006c52:	4606      	mov	r6, r0
 8006c54:	460f      	mov	r7, r1
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	f7f9 fab9 	bl	80001d4 <__adddf3>
 8006c62:	9c04      	ldr	r4, [sp, #16]
 8006c64:	a33e      	add	r3, pc, #248	; (adr r3, 8006d60 <__ieee754_pow+0x720>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	f7f9 fc67 	bl	8000540 <__aeabi_dmul>
 8006c72:	4642      	mov	r2, r8
 8006c74:	ec41 0b18 	vmov	d8, r0, r1
 8006c78:	464b      	mov	r3, r9
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	f7f9 faa7 	bl	80001d0 <__aeabi_dsub>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4630      	mov	r0, r6
 8006c88:	4639      	mov	r1, r7
 8006c8a:	f7f9 faa1 	bl	80001d0 <__aeabi_dsub>
 8006c8e:	a336      	add	r3, pc, #216	; (adr r3, 8006d68 <__ieee754_pow+0x728>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	f7f9 fc54 	bl	8000540 <__aeabi_dmul>
 8006c98:	a335      	add	r3, pc, #212	; (adr r3, 8006d70 <__ieee754_pow+0x730>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460f      	mov	r7, r1
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 fc4b 	bl	8000540 <__aeabi_dmul>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4630      	mov	r0, r6
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	f7f9 fa8f 	bl	80001d4 <__adddf3>
 8006cb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cb8:	4b38      	ldr	r3, [pc, #224]	; (8006d9c <__ieee754_pow+0x75c>)
 8006cba:	4413      	add	r3, r2
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fa88 	bl	80001d4 <__adddf3>
 8006cc4:	4682      	mov	sl, r0
 8006cc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc8:	468b      	mov	fp, r1
 8006cca:	f7f9 fbcf 	bl	800046c <__aeabi_i2d>
 8006cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cd0:	4b33      	ldr	r3, [pc, #204]	; (8006da0 <__ieee754_pow+0x760>)
 8006cd2:	4413      	add	r3, r2
 8006cd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cd8:	4606      	mov	r6, r0
 8006cda:	460f      	mov	r7, r1
 8006cdc:	4652      	mov	r2, sl
 8006cde:	465b      	mov	r3, fp
 8006ce0:	ec51 0b18 	vmov	r0, r1, d8
 8006ce4:	f7f9 fa76 	bl	80001d4 <__adddf3>
 8006ce8:	4642      	mov	r2, r8
 8006cea:	464b      	mov	r3, r9
 8006cec:	f7f9 fa72 	bl	80001d4 <__adddf3>
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	f7f9 fa6e 	bl	80001d4 <__adddf3>
 8006cf8:	9c04      	ldr	r4, [sp, #16]
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4620      	mov	r0, r4
 8006d00:	460d      	mov	r5, r1
 8006d02:	f7f9 fa65 	bl	80001d0 <__aeabi_dsub>
 8006d06:	4642      	mov	r2, r8
 8006d08:	464b      	mov	r3, r9
 8006d0a:	f7f9 fa61 	bl	80001d0 <__aeabi_dsub>
 8006d0e:	ec53 2b18 	vmov	r2, r3, d8
 8006d12:	f7f9 fa5d 	bl	80001d0 <__aeabi_dsub>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	e606      	b.n	800692e <__ieee754_pow+0x2ee>
 8006d20:	2401      	movs	r4, #1
 8006d22:	e6a0      	b.n	8006a66 <__ieee754_pow+0x426>
 8006d24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006d78 <__ieee754_pow+0x738>
 8006d28:	e60d      	b.n	8006946 <__ieee754_pow+0x306>
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w
 8006d30:	4a454eef 	.word	0x4a454eef
 8006d34:	3fca7e28 	.word	0x3fca7e28
 8006d38:	93c9db65 	.word	0x93c9db65
 8006d3c:	3fcd864a 	.word	0x3fcd864a
 8006d40:	a91d4101 	.word	0xa91d4101
 8006d44:	3fd17460 	.word	0x3fd17460
 8006d48:	518f264d 	.word	0x518f264d
 8006d4c:	3fd55555 	.word	0x3fd55555
 8006d50:	db6fabff 	.word	0xdb6fabff
 8006d54:	3fdb6db6 	.word	0x3fdb6db6
 8006d58:	33333303 	.word	0x33333303
 8006d5c:	3fe33333 	.word	0x3fe33333
 8006d60:	e0000000 	.word	0xe0000000
 8006d64:	3feec709 	.word	0x3feec709
 8006d68:	dc3a03fd 	.word	0xdc3a03fd
 8006d6c:	3feec709 	.word	0x3feec709
 8006d70:	145b01f5 	.word	0x145b01f5
 8006d74:	be3e2fe0 	.word	0xbe3e2fe0
 8006d78:	00000000 	.word	0x00000000
 8006d7c:	3ff00000 	.word	0x3ff00000
 8006d80:	7ff00000 	.word	0x7ff00000
 8006d84:	43400000 	.word	0x43400000
 8006d88:	0003988e 	.word	0x0003988e
 8006d8c:	000bb679 	.word	0x000bb679
 8006d90:	080074c0 	.word	0x080074c0
 8006d94:	3ff00000 	.word	0x3ff00000
 8006d98:	40080000 	.word	0x40080000
 8006d9c:	080074e0 	.word	0x080074e0
 8006da0:	080074d0 	.word	0x080074d0
 8006da4:	a3b5      	add	r3, pc, #724	; (adr r3, 800707c <__ieee754_pow+0xa3c>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	4640      	mov	r0, r8
 8006dac:	4649      	mov	r1, r9
 8006dae:	f7f9 fa11 	bl	80001d4 <__adddf3>
 8006db2:	4622      	mov	r2, r4
 8006db4:	ec41 0b1a 	vmov	d10, r0, r1
 8006db8:	462b      	mov	r3, r5
 8006dba:	4630      	mov	r0, r6
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	f7f9 fa07 	bl	80001d0 <__aeabi_dsub>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	ec51 0b1a 	vmov	r0, r1, d10
 8006dca:	f7f9 fe49 	bl	8000a60 <__aeabi_dcmpgt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	f47f adf8 	bne.w	80069c4 <__ieee754_pow+0x384>
 8006dd4:	4aa4      	ldr	r2, [pc, #656]	; (8007068 <__ieee754_pow+0xa28>)
 8006dd6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	f340 810b 	ble.w	8006ff6 <__ieee754_pow+0x9b6>
 8006de0:	151b      	asrs	r3, r3, #20
 8006de2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006de6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006dea:	fa4a f303 	asr.w	r3, sl, r3
 8006dee:	445b      	add	r3, fp
 8006df0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006df4:	4e9d      	ldr	r6, [pc, #628]	; (800706c <__ieee754_pow+0xa2c>)
 8006df6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006dfa:	4116      	asrs	r6, r2
 8006dfc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006e00:	2000      	movs	r0, #0
 8006e02:	ea23 0106 	bic.w	r1, r3, r6
 8006e06:	f1c2 0214 	rsb	r2, r2, #20
 8006e0a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006e0e:	fa4a fa02 	asr.w	sl, sl, r2
 8006e12:	f1bb 0f00 	cmp.w	fp, #0
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	bfb8      	it	lt
 8006e20:	f1ca 0a00 	rsblt	sl, sl, #0
 8006e24:	f7f9 f9d4 	bl	80001d0 <__aeabi_dsub>
 8006e28:	ec41 0b19 	vmov	d9, r0, r1
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	ec51 0b19 	vmov	r0, r1, d9
 8006e34:	f7f9 f9ce 	bl	80001d4 <__adddf3>
 8006e38:	2400      	movs	r4, #0
 8006e3a:	a379      	add	r3, pc, #484	; (adr r3, 8007020 <__ieee754_pow+0x9e0>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	4620      	mov	r0, r4
 8006e42:	460d      	mov	r5, r1
 8006e44:	f7f9 fb7c 	bl	8000540 <__aeabi_dmul>
 8006e48:	ec53 2b19 	vmov	r2, r3, d9
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	460f      	mov	r7, r1
 8006e50:	4620      	mov	r0, r4
 8006e52:	4629      	mov	r1, r5
 8006e54:	f7f9 f9bc 	bl	80001d0 <__aeabi_dsub>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	4649      	mov	r1, r9
 8006e60:	f7f9 f9b6 	bl	80001d0 <__aeabi_dsub>
 8006e64:	a370      	add	r3, pc, #448	; (adr r3, 8007028 <__ieee754_pow+0x9e8>)
 8006e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6a:	f7f9 fb69 	bl	8000540 <__aeabi_dmul>
 8006e6e:	a370      	add	r3, pc, #448	; (adr r3, 8007030 <__ieee754_pow+0x9f0>)
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	4680      	mov	r8, r0
 8006e76:	4689      	mov	r9, r1
 8006e78:	4620      	mov	r0, r4
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	f7f9 fb60 	bl	8000540 <__aeabi_dmul>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4640      	mov	r0, r8
 8006e86:	4649      	mov	r1, r9
 8006e88:	f7f9 f9a4 	bl	80001d4 <__adddf3>
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	460d      	mov	r5, r1
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4630      	mov	r0, r6
 8006e96:	4639      	mov	r1, r7
 8006e98:	f7f9 f99c 	bl	80001d4 <__adddf3>
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	4689      	mov	r9, r1
 8006ea4:	f7f9 f994 	bl	80001d0 <__aeabi_dsub>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4620      	mov	r0, r4
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f7f9 f98e 	bl	80001d0 <__aeabi_dsub>
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	460f      	mov	r7, r1
 8006eba:	464b      	mov	r3, r9
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 fb3e 	bl	8000540 <__aeabi_dmul>
 8006ec4:	a35c      	add	r3, pc, #368	; (adr r3, 8007038 <__ieee754_pow+0x9f8>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	4604      	mov	r4, r0
 8006ecc:	460d      	mov	r5, r1
 8006ece:	f7f9 fb37 	bl	8000540 <__aeabi_dmul>
 8006ed2:	a35b      	add	r3, pc, #364	; (adr r3, 8007040 <__ieee754_pow+0xa00>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f7f9 f97a 	bl	80001d0 <__aeabi_dsub>
 8006edc:	4622      	mov	r2, r4
 8006ede:	462b      	mov	r3, r5
 8006ee0:	f7f9 fb2e 	bl	8000540 <__aeabi_dmul>
 8006ee4:	a358      	add	r3, pc, #352	; (adr r3, 8007048 <__ieee754_pow+0xa08>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f7f9 f973 	bl	80001d4 <__adddf3>
 8006eee:	4622      	mov	r2, r4
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	f7f9 fb25 	bl	8000540 <__aeabi_dmul>
 8006ef6:	a356      	add	r3, pc, #344	; (adr r3, 8007050 <__ieee754_pow+0xa10>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f7f9 f968 	bl	80001d0 <__aeabi_dsub>
 8006f00:	4622      	mov	r2, r4
 8006f02:	462b      	mov	r3, r5
 8006f04:	f7f9 fb1c 	bl	8000540 <__aeabi_dmul>
 8006f08:	a353      	add	r3, pc, #332	; (adr r3, 8007058 <__ieee754_pow+0xa18>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 f961 	bl	80001d4 <__adddf3>
 8006f12:	4622      	mov	r2, r4
 8006f14:	462b      	mov	r3, r5
 8006f16:	f7f9 fb13 	bl	8000540 <__aeabi_dmul>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 f955 	bl	80001d0 <__aeabi_dsub>
 8006f26:	4604      	mov	r4, r0
 8006f28:	460d      	mov	r5, r1
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4640      	mov	r0, r8
 8006f30:	4649      	mov	r1, r9
 8006f32:	f7f9 fb05 	bl	8000540 <__aeabi_dmul>
 8006f36:	2200      	movs	r2, #0
 8006f38:	ec41 0b19 	vmov	d9, r0, r1
 8006f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f40:	4620      	mov	r0, r4
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7f9 f944 	bl	80001d0 <__aeabi_dsub>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	ec51 0b19 	vmov	r0, r1, d9
 8006f50:	f7f9 fc20 	bl	8000794 <__aeabi_ddiv>
 8006f54:	4632      	mov	r2, r6
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 faee 	bl	8000540 <__aeabi_dmul>
 8006f64:	4632      	mov	r2, r6
 8006f66:	463b      	mov	r3, r7
 8006f68:	f7f9 f934 	bl	80001d4 <__adddf3>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 f92c 	bl	80001d0 <__aeabi_dsub>
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	f7f9 f928 	bl	80001d0 <__aeabi_dsub>
 8006f80:	460b      	mov	r3, r1
 8006f82:	4602      	mov	r2, r0
 8006f84:	493a      	ldr	r1, [pc, #232]	; (8007070 <__ieee754_pow+0xa30>)
 8006f86:	2000      	movs	r0, #0
 8006f88:	f7f9 f922 	bl	80001d0 <__aeabi_dsub>
 8006f8c:	e9cd 0100 	strd	r0, r1, [sp]
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f9a:	da2f      	bge.n	8006ffc <__ieee754_pow+0x9bc>
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	ed9d 0b00 	vldr	d0, [sp]
 8006fa2:	f000 f9cd 	bl	8007340 <scalbn>
 8006fa6:	ec51 0b10 	vmov	r0, r1, d0
 8006faa:	ec53 2b18 	vmov	r2, r3, d8
 8006fae:	f7ff bbe0 	b.w	8006772 <__ieee754_pow+0x132>
 8006fb2:	4b30      	ldr	r3, [pc, #192]	; (8007074 <__ieee754_pow+0xa34>)
 8006fb4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006fb8:	429e      	cmp	r6, r3
 8006fba:	f77f af0b 	ble.w	8006dd4 <__ieee754_pow+0x794>
 8006fbe:	4b2e      	ldr	r3, [pc, #184]	; (8007078 <__ieee754_pow+0xa38>)
 8006fc0:	440b      	add	r3, r1
 8006fc2:	4303      	orrs	r3, r0
 8006fc4:	d00b      	beq.n	8006fde <__ieee754_pow+0x99e>
 8006fc6:	a326      	add	r3, pc, #152	; (adr r3, 8007060 <__ieee754_pow+0xa20>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	ec51 0b18 	vmov	r0, r1, d8
 8006fd0:	f7f9 fab6 	bl	8000540 <__aeabi_dmul>
 8006fd4:	a322      	add	r3, pc, #136	; (adr r3, 8007060 <__ieee754_pow+0xa20>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7ff bbca 	b.w	8006772 <__ieee754_pow+0x132>
 8006fde:	4622      	mov	r2, r4
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	f7f9 f8f5 	bl	80001d0 <__aeabi_dsub>
 8006fe6:	4642      	mov	r2, r8
 8006fe8:	464b      	mov	r3, r9
 8006fea:	f7f9 fd2f 	bl	8000a4c <__aeabi_dcmpge>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f aef0 	beq.w	8006dd4 <__ieee754_pow+0x794>
 8006ff4:	e7e7      	b.n	8006fc6 <__ieee754_pow+0x986>
 8006ff6:	f04f 0a00 	mov.w	sl, #0
 8006ffa:	e717      	b.n	8006e2c <__ieee754_pow+0x7ec>
 8006ffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007000:	4619      	mov	r1, r3
 8007002:	e7d2      	b.n	8006faa <__ieee754_pow+0x96a>
 8007004:	491a      	ldr	r1, [pc, #104]	; (8007070 <__ieee754_pow+0xa30>)
 8007006:	2000      	movs	r0, #0
 8007008:	f7ff bb9e 	b.w	8006748 <__ieee754_pow+0x108>
 800700c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007010:	f7ff bb9a 	b.w	8006748 <__ieee754_pow+0x108>
 8007014:	9000      	str	r0, [sp, #0]
 8007016:	f7ff bb76 	b.w	8006706 <__ieee754_pow+0xc6>
 800701a:	2100      	movs	r1, #0
 800701c:	f7ff bb60 	b.w	80066e0 <__ieee754_pow+0xa0>
 8007020:	00000000 	.word	0x00000000
 8007024:	3fe62e43 	.word	0x3fe62e43
 8007028:	fefa39ef 	.word	0xfefa39ef
 800702c:	3fe62e42 	.word	0x3fe62e42
 8007030:	0ca86c39 	.word	0x0ca86c39
 8007034:	be205c61 	.word	0xbe205c61
 8007038:	72bea4d0 	.word	0x72bea4d0
 800703c:	3e663769 	.word	0x3e663769
 8007040:	c5d26bf1 	.word	0xc5d26bf1
 8007044:	3ebbbd41 	.word	0x3ebbbd41
 8007048:	af25de2c 	.word	0xaf25de2c
 800704c:	3f11566a 	.word	0x3f11566a
 8007050:	16bebd93 	.word	0x16bebd93
 8007054:	3f66c16c 	.word	0x3f66c16c
 8007058:	5555553e 	.word	0x5555553e
 800705c:	3fc55555 	.word	0x3fc55555
 8007060:	c2f8f359 	.word	0xc2f8f359
 8007064:	01a56e1f 	.word	0x01a56e1f
 8007068:	3fe00000 	.word	0x3fe00000
 800706c:	000fffff 	.word	0x000fffff
 8007070:	3ff00000 	.word	0x3ff00000
 8007074:	4090cbff 	.word	0x4090cbff
 8007078:	3f6f3400 	.word	0x3f6f3400
 800707c:	652b82fe 	.word	0x652b82fe
 8007080:	3c971547 	.word	0x3c971547

08007084 <__ieee754_sqrt>:
 8007084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007088:	ec55 4b10 	vmov	r4, r5, d0
 800708c:	4e56      	ldr	r6, [pc, #344]	; (80071e8 <__ieee754_sqrt+0x164>)
 800708e:	43ae      	bics	r6, r5
 8007090:	ee10 0a10 	vmov	r0, s0
 8007094:	ee10 3a10 	vmov	r3, s0
 8007098:	4629      	mov	r1, r5
 800709a:	462a      	mov	r2, r5
 800709c:	d110      	bne.n	80070c0 <__ieee754_sqrt+0x3c>
 800709e:	ee10 2a10 	vmov	r2, s0
 80070a2:	462b      	mov	r3, r5
 80070a4:	f7f9 fa4c 	bl	8000540 <__aeabi_dmul>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4620      	mov	r0, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	f7f9 f890 	bl	80001d4 <__adddf3>
 80070b4:	4604      	mov	r4, r0
 80070b6:	460d      	mov	r5, r1
 80070b8:	ec45 4b10 	vmov	d0, r4, r5
 80070bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c0:	2d00      	cmp	r5, #0
 80070c2:	dc10      	bgt.n	80070e6 <__ieee754_sqrt+0x62>
 80070c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070c8:	4330      	orrs	r0, r6
 80070ca:	d0f5      	beq.n	80070b8 <__ieee754_sqrt+0x34>
 80070cc:	b15d      	cbz	r5, 80070e6 <__ieee754_sqrt+0x62>
 80070ce:	ee10 2a10 	vmov	r2, s0
 80070d2:	462b      	mov	r3, r5
 80070d4:	ee10 0a10 	vmov	r0, s0
 80070d8:	f7f9 f87a 	bl	80001d0 <__aeabi_dsub>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	f7f9 fb58 	bl	8000794 <__aeabi_ddiv>
 80070e4:	e7e6      	b.n	80070b4 <__ieee754_sqrt+0x30>
 80070e6:	1509      	asrs	r1, r1, #20
 80070e8:	d076      	beq.n	80071d8 <__ieee754_sqrt+0x154>
 80070ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80070ee:	07ce      	lsls	r6, r1, #31
 80070f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80070f4:	bf5e      	ittt	pl
 80070f6:	0fda      	lsrpl	r2, r3, #31
 80070f8:	005b      	lslpl	r3, r3, #1
 80070fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80070fe:	0fda      	lsrs	r2, r3, #31
 8007100:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007104:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007108:	2000      	movs	r0, #0
 800710a:	106d      	asrs	r5, r5, #1
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	f04f 0e16 	mov.w	lr, #22
 8007112:	4684      	mov	ip, r0
 8007114:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007118:	eb0c 0401 	add.w	r4, ip, r1
 800711c:	4294      	cmp	r4, r2
 800711e:	bfde      	ittt	le
 8007120:	1b12      	suble	r2, r2, r4
 8007122:	eb04 0c01 	addle.w	ip, r4, r1
 8007126:	1840      	addle	r0, r0, r1
 8007128:	0052      	lsls	r2, r2, #1
 800712a:	f1be 0e01 	subs.w	lr, lr, #1
 800712e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007132:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007136:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800713a:	d1ed      	bne.n	8007118 <__ieee754_sqrt+0x94>
 800713c:	4671      	mov	r1, lr
 800713e:	2720      	movs	r7, #32
 8007140:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007144:	4562      	cmp	r2, ip
 8007146:	eb04 060e 	add.w	r6, r4, lr
 800714a:	dc02      	bgt.n	8007152 <__ieee754_sqrt+0xce>
 800714c:	d113      	bne.n	8007176 <__ieee754_sqrt+0xf2>
 800714e:	429e      	cmp	r6, r3
 8007150:	d811      	bhi.n	8007176 <__ieee754_sqrt+0xf2>
 8007152:	2e00      	cmp	r6, #0
 8007154:	eb06 0e04 	add.w	lr, r6, r4
 8007158:	da43      	bge.n	80071e2 <__ieee754_sqrt+0x15e>
 800715a:	f1be 0f00 	cmp.w	lr, #0
 800715e:	db40      	blt.n	80071e2 <__ieee754_sqrt+0x15e>
 8007160:	f10c 0801 	add.w	r8, ip, #1
 8007164:	eba2 020c 	sub.w	r2, r2, ip
 8007168:	429e      	cmp	r6, r3
 800716a:	bf88      	it	hi
 800716c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007170:	1b9b      	subs	r3, r3, r6
 8007172:	4421      	add	r1, r4
 8007174:	46c4      	mov	ip, r8
 8007176:	0052      	lsls	r2, r2, #1
 8007178:	3f01      	subs	r7, #1
 800717a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800717e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007182:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007186:	d1dd      	bne.n	8007144 <__ieee754_sqrt+0xc0>
 8007188:	4313      	orrs	r3, r2
 800718a:	d006      	beq.n	800719a <__ieee754_sqrt+0x116>
 800718c:	1c4c      	adds	r4, r1, #1
 800718e:	bf13      	iteet	ne
 8007190:	3101      	addne	r1, #1
 8007192:	3001      	addeq	r0, #1
 8007194:	4639      	moveq	r1, r7
 8007196:	f021 0101 	bicne.w	r1, r1, #1
 800719a:	1043      	asrs	r3, r0, #1
 800719c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071a0:	0849      	lsrs	r1, r1, #1
 80071a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80071a6:	07c2      	lsls	r2, r0, #31
 80071a8:	bf48      	it	mi
 80071aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80071ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80071b2:	460c      	mov	r4, r1
 80071b4:	463d      	mov	r5, r7
 80071b6:	e77f      	b.n	80070b8 <__ieee754_sqrt+0x34>
 80071b8:	0ada      	lsrs	r2, r3, #11
 80071ba:	3815      	subs	r0, #21
 80071bc:	055b      	lsls	r3, r3, #21
 80071be:	2a00      	cmp	r2, #0
 80071c0:	d0fa      	beq.n	80071b8 <__ieee754_sqrt+0x134>
 80071c2:	02d7      	lsls	r7, r2, #11
 80071c4:	d50a      	bpl.n	80071dc <__ieee754_sqrt+0x158>
 80071c6:	f1c1 0420 	rsb	r4, r1, #32
 80071ca:	fa23 f404 	lsr.w	r4, r3, r4
 80071ce:	1e4d      	subs	r5, r1, #1
 80071d0:	408b      	lsls	r3, r1
 80071d2:	4322      	orrs	r2, r4
 80071d4:	1b41      	subs	r1, r0, r5
 80071d6:	e788      	b.n	80070ea <__ieee754_sqrt+0x66>
 80071d8:	4608      	mov	r0, r1
 80071da:	e7f0      	b.n	80071be <__ieee754_sqrt+0x13a>
 80071dc:	0052      	lsls	r2, r2, #1
 80071de:	3101      	adds	r1, #1
 80071e0:	e7ef      	b.n	80071c2 <__ieee754_sqrt+0x13e>
 80071e2:	46e0      	mov	r8, ip
 80071e4:	e7be      	b.n	8007164 <__ieee754_sqrt+0xe0>
 80071e6:	bf00      	nop
 80071e8:	7ff00000 	.word	0x7ff00000

080071ec <fabs>:
 80071ec:	ec51 0b10 	vmov	r0, r1, d0
 80071f0:	ee10 2a10 	vmov	r2, s0
 80071f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071f8:	ec43 2b10 	vmov	d0, r2, r3
 80071fc:	4770      	bx	lr

080071fe <finite>:
 80071fe:	b082      	sub	sp, #8
 8007200:	ed8d 0b00 	vstr	d0, [sp]
 8007204:	9801      	ldr	r0, [sp, #4]
 8007206:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800720a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800720e:	0fc0      	lsrs	r0, r0, #31
 8007210:	b002      	add	sp, #8
 8007212:	4770      	bx	lr
 8007214:	0000      	movs	r0, r0
	...

08007218 <nan>:
 8007218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007220 <nan+0x8>
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	00000000 	.word	0x00000000
 8007224:	7ff80000 	.word	0x7ff80000

08007228 <rint>:
 8007228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800722a:	ec51 0b10 	vmov	r0, r1, d0
 800722e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007232:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007236:	2e13      	cmp	r6, #19
 8007238:	ee10 4a10 	vmov	r4, s0
 800723c:	460b      	mov	r3, r1
 800723e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007242:	dc58      	bgt.n	80072f6 <rint+0xce>
 8007244:	2e00      	cmp	r6, #0
 8007246:	da2b      	bge.n	80072a0 <rint+0x78>
 8007248:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800724c:	4302      	orrs	r2, r0
 800724e:	d023      	beq.n	8007298 <rint+0x70>
 8007250:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007254:	4302      	orrs	r2, r0
 8007256:	4254      	negs	r4, r2
 8007258:	4314      	orrs	r4, r2
 800725a:	0c4b      	lsrs	r3, r1, #17
 800725c:	0b24      	lsrs	r4, r4, #12
 800725e:	045b      	lsls	r3, r3, #17
 8007260:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007264:	ea44 0103 	orr.w	r1, r4, r3
 8007268:	4b32      	ldr	r3, [pc, #200]	; (8007334 <rint+0x10c>)
 800726a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800726e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4630      	mov	r0, r6
 8007278:	4639      	mov	r1, r7
 800727a:	f7f8 ffab 	bl	80001d4 <__adddf3>
 800727e:	e9cd 0100 	strd	r0, r1, [sp]
 8007282:	463b      	mov	r3, r7
 8007284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007288:	4632      	mov	r2, r6
 800728a:	f7f8 ffa1 	bl	80001d0 <__aeabi_dsub>
 800728e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007292:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007296:	4639      	mov	r1, r7
 8007298:	ec41 0b10 	vmov	d0, r0, r1
 800729c:	b003      	add	sp, #12
 800729e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a0:	4a25      	ldr	r2, [pc, #148]	; (8007338 <rint+0x110>)
 80072a2:	4132      	asrs	r2, r6
 80072a4:	ea01 0702 	and.w	r7, r1, r2
 80072a8:	4307      	orrs	r7, r0
 80072aa:	d0f5      	beq.n	8007298 <rint+0x70>
 80072ac:	0851      	lsrs	r1, r2, #1
 80072ae:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80072b2:	4314      	orrs	r4, r2
 80072b4:	d00c      	beq.n	80072d0 <rint+0xa8>
 80072b6:	ea23 0201 	bic.w	r2, r3, r1
 80072ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80072be:	2e13      	cmp	r6, #19
 80072c0:	fa43 f606 	asr.w	r6, r3, r6
 80072c4:	bf0c      	ite	eq
 80072c6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80072ca:	2400      	movne	r4, #0
 80072cc:	ea42 0306 	orr.w	r3, r2, r6
 80072d0:	4918      	ldr	r1, [pc, #96]	; (8007334 <rint+0x10c>)
 80072d2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80072d6:	4622      	mov	r2, r4
 80072d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f8 ff78 	bl	80001d4 <__adddf3>
 80072e4:	e9cd 0100 	strd	r0, r1, [sp]
 80072e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072ec:	4622      	mov	r2, r4
 80072ee:	462b      	mov	r3, r5
 80072f0:	f7f8 ff6e 	bl	80001d0 <__aeabi_dsub>
 80072f4:	e7d0      	b.n	8007298 <rint+0x70>
 80072f6:	2e33      	cmp	r6, #51	; 0x33
 80072f8:	dd07      	ble.n	800730a <rint+0xe2>
 80072fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80072fe:	d1cb      	bne.n	8007298 <rint+0x70>
 8007300:	ee10 2a10 	vmov	r2, s0
 8007304:	f7f8 ff66 	bl	80001d4 <__adddf3>
 8007308:	e7c6      	b.n	8007298 <rint+0x70>
 800730a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800730e:	f04f 36ff 	mov.w	r6, #4294967295
 8007312:	40d6      	lsrs	r6, r2
 8007314:	4230      	tst	r0, r6
 8007316:	d0bf      	beq.n	8007298 <rint+0x70>
 8007318:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800731c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007320:	bf1f      	itttt	ne
 8007322:	ea24 0101 	bicne.w	r1, r4, r1
 8007326:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800732a:	fa44 f202 	asrne.w	r2, r4, r2
 800732e:	ea41 0402 	orrne.w	r4, r1, r2
 8007332:	e7cd      	b.n	80072d0 <rint+0xa8>
 8007334:	080074f0 	.word	0x080074f0
 8007338:	000fffff 	.word	0x000fffff
 800733c:	00000000 	.word	0x00000000

08007340 <scalbn>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	ec55 4b10 	vmov	r4, r5, d0
 8007346:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800734a:	4606      	mov	r6, r0
 800734c:	462b      	mov	r3, r5
 800734e:	b99a      	cbnz	r2, 8007378 <scalbn+0x38>
 8007350:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007354:	4323      	orrs	r3, r4
 8007356:	d036      	beq.n	80073c6 <scalbn+0x86>
 8007358:	4b39      	ldr	r3, [pc, #228]	; (8007440 <scalbn+0x100>)
 800735a:	4629      	mov	r1, r5
 800735c:	ee10 0a10 	vmov	r0, s0
 8007360:	2200      	movs	r2, #0
 8007362:	f7f9 f8ed 	bl	8000540 <__aeabi_dmul>
 8007366:	4b37      	ldr	r3, [pc, #220]	; (8007444 <scalbn+0x104>)
 8007368:	429e      	cmp	r6, r3
 800736a:	4604      	mov	r4, r0
 800736c:	460d      	mov	r5, r1
 800736e:	da10      	bge.n	8007392 <scalbn+0x52>
 8007370:	a32b      	add	r3, pc, #172	; (adr r3, 8007420 <scalbn+0xe0>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	e03a      	b.n	80073ee <scalbn+0xae>
 8007378:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800737c:	428a      	cmp	r2, r1
 800737e:	d10c      	bne.n	800739a <scalbn+0x5a>
 8007380:	ee10 2a10 	vmov	r2, s0
 8007384:	4620      	mov	r0, r4
 8007386:	4629      	mov	r1, r5
 8007388:	f7f8 ff24 	bl	80001d4 <__adddf3>
 800738c:	4604      	mov	r4, r0
 800738e:	460d      	mov	r5, r1
 8007390:	e019      	b.n	80073c6 <scalbn+0x86>
 8007392:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007396:	460b      	mov	r3, r1
 8007398:	3a36      	subs	r2, #54	; 0x36
 800739a:	4432      	add	r2, r6
 800739c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80073a0:	428a      	cmp	r2, r1
 80073a2:	dd08      	ble.n	80073b6 <scalbn+0x76>
 80073a4:	2d00      	cmp	r5, #0
 80073a6:	a120      	add	r1, pc, #128	; (adr r1, 8007428 <scalbn+0xe8>)
 80073a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ac:	da1c      	bge.n	80073e8 <scalbn+0xa8>
 80073ae:	a120      	add	r1, pc, #128	; (adr r1, 8007430 <scalbn+0xf0>)
 80073b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073b4:	e018      	b.n	80073e8 <scalbn+0xa8>
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	dd08      	ble.n	80073cc <scalbn+0x8c>
 80073ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80073c6:	ec45 4b10 	vmov	d0, r4, r5
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80073d0:	da19      	bge.n	8007406 <scalbn+0xc6>
 80073d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80073d6:	429e      	cmp	r6, r3
 80073d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80073dc:	dd0a      	ble.n	80073f4 <scalbn+0xb4>
 80073de:	a112      	add	r1, pc, #72	; (adr r1, 8007428 <scalbn+0xe8>)
 80073e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e2      	bne.n	80073ae <scalbn+0x6e>
 80073e8:	a30f      	add	r3, pc, #60	; (adr r3, 8007428 <scalbn+0xe8>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f9 f8a7 	bl	8000540 <__aeabi_dmul>
 80073f2:	e7cb      	b.n	800738c <scalbn+0x4c>
 80073f4:	a10a      	add	r1, pc, #40	; (adr r1, 8007420 <scalbn+0xe0>)
 80073f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0b8      	beq.n	8007370 <scalbn+0x30>
 80073fe:	a10e      	add	r1, pc, #56	; (adr r1, 8007438 <scalbn+0xf8>)
 8007400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007404:	e7b4      	b.n	8007370 <scalbn+0x30>
 8007406:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800740a:	3236      	adds	r2, #54	; 0x36
 800740c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007410:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007414:	4620      	mov	r0, r4
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <scalbn+0x108>)
 8007418:	2200      	movs	r2, #0
 800741a:	e7e8      	b.n	80073ee <scalbn+0xae>
 800741c:	f3af 8000 	nop.w
 8007420:	c2f8f359 	.word	0xc2f8f359
 8007424:	01a56e1f 	.word	0x01a56e1f
 8007428:	8800759c 	.word	0x8800759c
 800742c:	7e37e43c 	.word	0x7e37e43c
 8007430:	8800759c 	.word	0x8800759c
 8007434:	fe37e43c 	.word	0xfe37e43c
 8007438:	c2f8f359 	.word	0xc2f8f359
 800743c:	81a56e1f 	.word	0x81a56e1f
 8007440:	43500000 	.word	0x43500000
 8007444:	ffff3cb0 	.word	0xffff3cb0
 8007448:	3c900000 	.word	0x3c900000

0800744c <_init>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	bf00      	nop
 8007450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007452:	bc08      	pop	{r3}
 8007454:	469e      	mov	lr, r3
 8007456:	4770      	bx	lr

08007458 <_fini>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr
