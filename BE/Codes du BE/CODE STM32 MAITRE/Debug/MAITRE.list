
MAITRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee8  08004ee8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef0  08004ef0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08004f04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004f04  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001453c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289d  00000000  00000000  00034578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00036e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00037b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002689e  00000000  00000000  000387e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e93  00000000  00000000  0005f07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eacd9  00000000  00000000  00070f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015bbea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f0  00000000  00000000  0015bc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e70 	.word	0x08004e70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e70 	.word	0x08004e70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <lcd_init>:




void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	f043 030c 	orr.w	r3, r3, #12
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	f043 0320 	orr.w	r3, r3, #32
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80004ec:	f107 0118 	add.w	r1, r7, #24
 80004f0:	230a      	movs	r3, #10
 80004f2:	2202      	movs	r2, #2
 80004f4:	486c      	ldr	r0, [pc, #432]	; (80006a8 <lcd_init+0x1e8>)
 80004f6:	f003 f979 	bl	80037ec <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80004fa:	f640 230d 	movw	r3, #2573	; 0xa0d
 80004fe:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8000500:	f107 0114 	add.w	r1, r7, #20
 8000504:	230a      	movs	r3, #10
 8000506:	2202      	movs	r2, #2
 8000508:	4867      	ldr	r0, [pc, #412]	; (80006a8 <lcd_init+0x1e8>)
 800050a:	f003 f96f 	bl	80037ec <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	2205      	movs	r2, #5
 8000512:	217c      	movs	r1, #124	; 0x7c
 8000514:	69f8      	ldr	r0, [r7, #28]
 8000516:	f001 fa71 	bl	80019fc <HAL_I2C_IsDeviceReady>
 800051a:	4603      	mov	r3, r0
 800051c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 800051e:	f107 0113 	add.w	r1, r7, #19
 8000522:	230a      	movs	r3, #10
 8000524:	2201      	movs	r2, #1
 8000526:	4860      	ldr	r0, [pc, #384]	; (80006a8 <lcd_init+0x1e8>)
 8000528:	f003 f960 	bl	80037ec <HAL_UART_Transmit>
	HAL_Delay(50);
 800052c:	2032      	movs	r0, #50	; 0x32
 800052e:	f000 fd6b 	bl	8001008 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000532:	f107 0218 	add.w	r2, r7, #24
 8000536:	f241 3388 	movw	r3, #5000	; 0x1388
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2302      	movs	r3, #2
 800053e:	217c      	movs	r1, #124	; 0x7c
 8000540:	69f8      	ldr	r0, [r7, #28]
 8000542:	f001 f967 	bl	8001814 <HAL_I2C_Master_Transmit>
 8000546:	4603      	mov	r3, r0
 8000548:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800054a:	f107 0112 	add.w	r1, r7, #18
 800054e:	230a      	movs	r3, #10
 8000550:	2201      	movs	r2, #1
 8000552:	4855      	ldr	r0, [pc, #340]	; (80006a8 <lcd_init+0x1e8>)
 8000554:	f003 f94a 	bl	80037ec <HAL_UART_Transmit>
	HAL_Delay(50);
 8000558:	2032      	movs	r0, #50	; 0x32
 800055a:	f000 fd55 	bl	8001008 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800055e:	f107 0218 	add.w	r2, r7, #24
 8000562:	f241 3388 	movw	r3, #5000	; 0x1388
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2302      	movs	r3, #2
 800056a:	217c      	movs	r1, #124	; 0x7c
 800056c:	69f8      	ldr	r0, [r7, #28]
 800056e:	f001 f951 	bl	8001814 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000572:	2005      	movs	r0, #5
 8000574:	f000 fd48 	bl	8001008 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000578:	f107 0218 	add.w	r2, r7, #24
 800057c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2302      	movs	r3, #2
 8000584:	217c      	movs	r1, #124	; 0x7c
 8000586:	69f8      	ldr	r0, [r7, #28]
 8000588:	f001 f944 	bl	8001814 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2204      	movs	r2, #4
 8000590:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	f043 0308 	orr.w	r3, r3, #8
 800059a:	b2db      	uxtb	r3, r3
 800059c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800059e:	f107 0218 	add.w	r2, r7, #24
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2302      	movs	r3, #2
 80005aa:	217c      	movs	r1, #124	; 0x7c
 80005ac:	69f8      	ldr	r0, [r7, #28]
 80005ae:	f001 f931 	bl	8001814 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80005b2:	2301      	movs	r3, #1
 80005b4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80005b6:	f107 0218 	add.w	r2, r7, #24
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2302      	movs	r3, #2
 80005c2:	217c      	movs	r1, #124	; 0x7c
 80005c4:	69f8      	ldr	r0, [r7, #28]
 80005c6:	f001 f925 	bl	8001814 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80005ca:	2002      	movs	r0, #2
 80005cc:	f000 fd1c 	bl	8001008 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2202      	movs	r2, #2
 80005d4:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80005e2:	f107 0218 	add.w	r2, r7, #24
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2302      	movs	r3, #2
 80005ee:	217c      	movs	r1, #124	; 0x7c
 80005f0:	69f8      	ldr	r0, [r7, #28]
 80005f2:	f001 f90f 	bl	8001814 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80005fe:	f107 0210 	add.w	r2, r7, #16
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2302      	movs	r3, #2
 800060a:	21c4      	movs	r1, #196	; 0xc4
 800060c:	69f8      	ldr	r0, [r7, #28]
 800060e:	f001 f901 	bl	8001814 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8000612:	2308      	movs	r3, #8
 8000614:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8000616:	23ff      	movs	r3, #255	; 0xff
 8000618:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800061a:	f107 0210 	add.w	r2, r7, #16
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2302      	movs	r3, #2
 8000626:	21c4      	movs	r1, #196	; 0xc4
 8000628:	69f8      	ldr	r0, [r7, #28]
 800062a:	f001 f8f3 	bl	8001814 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 800062e:	2301      	movs	r3, #1
 8000630:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000632:	2320      	movs	r3, #32
 8000634:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000636:	f107 0210 	add.w	r2, r7, #16
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2302      	movs	r3, #2
 8000642:	21c4      	movs	r1, #196	; 0xc4
 8000644:	69f8      	ldr	r0, [r7, #28]
 8000646:	f001 f8e5 	bl	8001814 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800064a:	2304      	movs	r3, #4
 800064c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800064e:	23ff      	movs	r3, #255	; 0xff
 8000650:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000652:	f107 020c 	add.w	r2, r7, #12
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2302      	movs	r3, #2
 800065e:	21c4      	movs	r1, #196	; 0xc4
 8000660:	69f8      	ldr	r0, [r7, #28]
 8000662:	f001 f8d7 	bl	8001814 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000666:	2303      	movs	r3, #3
 8000668:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800066a:	23ff      	movs	r3, #255	; 0xff
 800066c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800066e:	f107 020c 	add.w	r2, r7, #12
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2302      	movs	r3, #2
 800067a:	21c4      	movs	r1, #196	; 0xc4
 800067c:	69f8      	ldr	r0, [r7, #28]
 800067e:	f001 f8c9 	bl	8001814 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000682:	2302      	movs	r3, #2
 8000684:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000686:	23ff      	movs	r3, #255	; 0xff
 8000688:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800068a:	f107 020c 	add.w	r2, r7, #12
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	21c4      	movs	r1, #196	; 0xc4
 8000698:	69f8      	ldr	r0, [r7, #28]
 800069a:	f001 f8bb 	bl	8001814 <HAL_I2C_Master_Transmit>


}
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000150 	.word	0x20000150

080006ac <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	733b      	strb	r3, [r7, #12]
    int i=0;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80006c2:	e011      	b.n	80006e8 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80006ce:	f107 020c 	add.w	r2, r7, #12
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2302      	movs	r3, #2
 80006da:	217c      	movs	r1, #124	; 0x7c
 80006dc:	6938      	ldr	r0, [r7, #16]
 80006de:	f001 f899 	bl	8001814 <HAL_I2C_Master_Transmit>
            i++;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3301      	adds	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	4413      	add	r3, r2
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1e7      	bne.n	80006c4 <lcd_print+0x18>
   }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b086      	sub	sp, #24
 8000702:	af02      	add	r7, sp, #8
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	70fb      	strb	r3, [r7, #3]
 800070a:	4613      	mov	r3, r2
 800070c:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8000712:	78bb      	ldrb	r3, [r7, #2]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d104      	bne.n	8000722 <lcd_position+0x24>
    {
        col = col | 0x80;
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800071e:	70fb      	strb	r3, [r7, #3]
 8000720:	e003      	b.n	800072a <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000728:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	217c      	movs	r1, #124	; 0x7c
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f001 f867 	bl	8001814 <HAL_I2C_Master_Transmit>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af02      	add	r7, sp, #8
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	460b      	mov	r3, r1
 800075c:	71bb      	strb	r3, [r7, #6]
 800075e:	4613      	mov	r3, r2
 8000760:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <reglagecouleur+0x74>)
 8000764:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000766:	2304      	movs	r3, #4
 8000768:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 800076e:	f107 0210 	add.w	r2, r7, #16
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2302      	movs	r3, #2
 800077a:	21c4      	movs	r1, #196	; 0xc4
 800077c:	6978      	ldr	r0, [r7, #20]
 800077e:	f001 f849 	bl	8001814 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000782:	2303      	movs	r3, #3
 8000784:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 800078a:	f107 020c 	add.w	r2, r7, #12
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2302      	movs	r3, #2
 8000796:	21c4      	movs	r1, #196	; 0xc4
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	f001 f83b 	bl	8001814 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 800079e:	2302      	movs	r3, #2
 80007a0:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 80007a2:	797b      	ldrb	r3, [r7, #5]
 80007a4:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 80007a6:	f107 0208 	add.w	r2, r7, #8
 80007aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2302      	movs	r3, #2
 80007b2:	21c4      	movs	r1, #196	; 0xc4
 80007b4:	6978      	ldr	r0, [r7, #20]
 80007b6:	f001 f82d 	bl	8001814 <HAL_I2C_Master_Transmit>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000080 	.word	0x20000080

080007c8 <TMP_init>:
	 HAL_I2C_Master_Receive(&hi2c_tmp, address, Data, len, TIMEOUT);

}

void TMP_init(I2C_HandleTypeDef hi2c)
{
 80007c8:	b084      	sub	sp, #16
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	f107 0c08 	add.w	ip, r7, #8
 80007d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c_tmp = hi2c;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <TMP_init+0x2c>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	224c      	movs	r2, #76	; 0x4c
 80007e0:	4619      	mov	r1, r3
 80007e2:	f004 fb2f 	bl	8004e44 <memcpy>
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ee:	b004      	add	sp, #16
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000034 	.word	0x20000034

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <MX_GPIO_Init+0xc4>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <MX_GPIO_Init+0xc4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a24      	ldr	r2, [pc, #144]	; (80008bc <MX_GPIO_Init+0xc4>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_GPIO_Init+0xc4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MX_GPIO_Init+0xc4>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_GPIO_Init+0xc4>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f000 ff25 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000880:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0xc8>)
 8000892:	f000 fd6d 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000896:	2320      	movs	r3, #32
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 fd5e 	bl	8001370 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800

080008c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_I2C1_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <MX_I2C1_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_I2C1_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <MX_I2C1_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_I2C1_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <MX_I2C1_Init+0x74>)
 8000900:	f000 fef8 	bl	80016f4 <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 f94e 	bl	8000baa <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_I2C1_Init+0x74>)
 8000912:	f001 fb79 	bl	8002008 <HAL_I2CEx_ConfigAnalogFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 f945 	bl	8000baa <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_I2C1_Init+0x74>)
 8000924:	f001 fbbb 	bl	800209e <HAL_I2CEx_ConfigDigitalFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f93c 	bl	8000baa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000080 	.word	0x20000080
 800093c:	40005400 	.word	0x40005400
 8000940:	10909cec 	.word	0x10909cec

08000944 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0ac      	sub	sp, #176	; 0xb0
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2288      	movs	r2, #136	; 0x88
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fa7b 	bl	8004e60 <memset>
  if(i2cHandle->Instance==I2C1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <HAL_I2C_MspInit+0xb0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d13b      	bne.n	80009ec <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000978:	2300      	movs	r3, #0
 800097a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fa29 	bl	8002dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800098c:	f000 f90d 	bl	8000baa <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b0:	2312      	movs	r3, #18
 80009b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c2:	2304      	movs	r3, #4
 80009c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <HAL_I2C_MspInit+0xb8>)
 80009d0:	f000 fcce 	bl	8001370 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009de:	6593      	str	r3, [r2, #88]	; 0x58
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ec:	bf00      	nop
 80009ee:	37b0      	adds	r7, #176	; 0xb0
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000400 	.word	0x48000400

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b091      	sub	sp, #68	; 0x44
 8000a04:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fa83 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f87d 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f7ff fef3 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a12:	f000 f973 	bl	8000cfc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000a16:	f000 f941 	bl	8000c9c <MX_UART4_Init>
  MX_I2C1_Init();
 8000a1a:	f7ff ff53 	bl	80008c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
lcd_init(&hi2c1, &ok);
 8000a1e:	4932      	ldr	r1, [pc, #200]	; (8000ae8 <main+0xe8>)
 8000a20:	4832      	ldr	r0, [pc, #200]	; (8000aec <main+0xec>)
 8000a22:	f7ff fd4d 	bl	80004c0 <lcd_init>
lcd_position(&hi2c1,0,0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4830      	ldr	r0, [pc, #192]	; (8000aec <main+0xec>)
 8000a2c:	f7ff fe67 	bl	80006fe <lcd_position>
lcd_print(&hi2c1, "Temp : ");
 8000a30:	492f      	ldr	r1, [pc, #188]	; (8000af0 <main+0xf0>)
 8000a32:	482e      	ldr	r0, [pc, #184]	; (8000aec <main+0xec>)
 8000a34:	f7ff fe3a 	bl	80006ac <lcd_print>
lcd_position(&hi2c1,0,1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	482b      	ldr	r0, [pc, #172]	; (8000aec <main+0xec>)
 8000a3e:	f7ff fe5e 	bl	80006fe <lcd_position>
lcd_print(&hi2c1, "Hum : ");
 8000a42:	492c      	ldr	r1, [pc, #176]	; (8000af4 <main+0xf4>)
 8000a44:	4829      	ldr	r0, [pc, #164]	; (8000aec <main+0xec>)
 8000a46:	f7ff fe31 	bl	80006ac <lcd_print>
reglagecouleur(150,150,30);
 8000a4a:	221e      	movs	r2, #30
 8000a4c:	2196      	movs	r1, #150	; 0x96
 8000a4e:	2096      	movs	r0, #150	; 0x96
 8000a50:	f7ff fe7e 	bl	8000750 <reglagecouleur>
TMP_init(hi2c1);
 8000a54:	4e25      	ldr	r6, [pc, #148]	; (8000aec <main+0xec>)
 8000a56:	466d      	mov	r5, sp
 8000a58:	f106 0410 	add.w	r4, r6, #16
 8000a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a70:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a74:	f7ff fea8 	bl	80007c8 <TMP_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_UART_Receive_IT(&huart4, RX_BUFFER, 5);
 8000a78:	2205      	movs	r2, #5
 8000a7a:	491f      	ldr	r1, [pc, #124]	; (8000af8 <main+0xf8>)
 8000a7c:	481f      	ldr	r0, [pc, #124]	; (8000afc <main+0xfc>)
 8000a7e:	f002 ff49 	bl	8003914 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, RX_BUFFER, 5,1000);
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	2205      	movs	r2, #5
 8000a88:	491b      	ldr	r1, [pc, #108]	; (8000af8 <main+0xf8>)
 8000a8a:	481d      	ldr	r0, [pc, #116]	; (8000b00 <main+0x100>)
 8000a8c:	f002 feae 	bl	80037ec <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a94:	f000 fab8 	bl	8001008 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, "ok\r\n", 4,1000);
 8000a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	4919      	ldr	r1, [pc, #100]	; (8000b04 <main+0x104>)
 8000aa0:	4817      	ldr	r0, [pc, #92]	; (8000b00 <main+0x100>)
 8000aa2:	f002 fea3 	bl	80037ec <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000aa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aaa:	f000 faad 	bl	8001008 <HAL_Delay>



	  //Ajoute affichage LCD
if (RX_BUFFER[4]=='H')
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <main+0xf8>)
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	2b48      	cmp	r3, #72	; 0x48
 8000ab4:	d109      	bne.n	8000aca <main+0xca>
{
	  lcd_position(&hi2c1,12,1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	210c      	movs	r1, #12
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <main+0xec>)
 8000abc:	f7ff fe1f 	bl	80006fe <lcd_position>
	  lcd_print(&hi2c1,RX_BUFFER);
 8000ac0:	490d      	ldr	r1, [pc, #52]	; (8000af8 <main+0xf8>)
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <main+0xec>)
 8000ac4:	f7ff fdf2 	bl	80006ac <lcd_print>
 8000ac8:	e7d6      	b.n	8000a78 <main+0x78>
}

else if(RX_BUFFER[4]=='T')
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <main+0xf8>)
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	2b54      	cmp	r3, #84	; 0x54
 8000ad0:	d1d2      	bne.n	8000a78 <main+0x78>
{
	lcd_position(&hi2c1,12,0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210c      	movs	r1, #12
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <main+0xec>)
 8000ad8:	f7ff fe11 	bl	80006fe <lcd_position>
	lcd_print(&hi2c1,RX_BUFFER);
 8000adc:	4906      	ldr	r1, [pc, #24]	; (8000af8 <main+0xf8>)
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <main+0xec>)
 8000ae0:	f7ff fde4 	bl	80006ac <lcd_print>
	  HAL_UART_Receive_IT(&huart4, RX_BUFFER, 5);
 8000ae4:	e7c8      	b.n	8000a78 <main+0x78>
 8000ae6:	bf00      	nop
 8000ae8:	20000030 	.word	0x20000030
 8000aec:	20000080 	.word	0x20000080
 8000af0:	08004e88 	.word	0x08004e88
 8000af4:	08004e90 	.word	0x08004e90
 8000af8:	20000028 	.word	0x20000028
 8000afc:	200000cc 	.word	0x200000cc
 8000b00:	20000150 	.word	0x20000150
 8000b04:	08004e98 	.word	0x08004e98

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b096      	sub	sp, #88	; 0x58
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2244      	movs	r2, #68	; 0x44
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 f9a2 	bl	8004e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b2e:	f001 fb11 	bl	8002154 <HAL_PWREx_ControlVoltageScaling>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b38:	f000 f837 	bl	8000baa <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b46:	2310      	movs	r3, #16
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b56:	230a      	movs	r3, #10
 8000b58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fb48 	bl	8002200 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b76:	f000 f818 	bl	8000baa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2104      	movs	r1, #4
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 ff1a 	bl	80029cc <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b9e:	f000 f804 	bl	8000baa <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3758      	adds	r7, #88	; 0x58
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <Error_Handler+0x8>

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x44>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f9be 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <USART2_IRQHandler+0x10>)
 8000c56:	f002 feb3 	bl	80039c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000150 	.word	0x20000150

08000c64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <UART4_IRQHandler+0x10>)
 8000c6a:	f002 fea9 	bl	80039c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000cc 	.word	0x200000cc

08000c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_UART4_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000ca8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_UART4_Init+0x58>)
 8000ce0:	f002 fd36 	bl	8003750 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cea:	f7ff ff5e 	bl	8000baa <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000cc 	.word	0x200000cc
 8000cf8:	40004c00 	.word	0x40004c00

08000cfc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <MX_USART2_UART_Init+0x5c>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART2_UART_Init+0x58>)
 8000d40:	f002 fd06 	bl	8003750 <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f7ff ff2e 	bl	8000baa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000150 	.word	0x20000150
 8000d58:	40004400 	.word	0x40004400

08000d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ae      	sub	sp, #184	; 0xb8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2288      	movs	r2, #136	; 0x88
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 f86f 	bl	8004e60 <memset>
  if(uartHandle->Instance==UART4)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <HAL_UART_MspInit+0x154>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d144      	bne.n	8000e16 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 f81d 	bl	8002dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da4:	f7ff ff01 	bl	8000baa <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000da8:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000db2:	6593      	str	r3, [r2, #88]	; 0x58
 8000db4:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	4a3b      	ldr	r2, [pc, #236]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dcc:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000df0:	2308      	movs	r3, #8
 8000df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f000 fab6 	bl	8001370 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2034      	movs	r0, #52	; 0x34
 8000e0a:	f000 f9fc 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e0e:	2034      	movs	r0, #52	; 0x34
 8000e10:	f000 fa15 	bl	800123e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e14:	e048      	b.n	8000ea8 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_UART_MspInit+0x15c>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d143      	bne.n	8000ea8 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 ffd3 	bl	8002dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000e38:	f7ff feb7 	bl	8000baa <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e40:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e46:	6593      	str	r3, [r2, #88]	; 0x58
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_UART_MspInit+0x158>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e84:	2307      	movs	r3, #7
 8000e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f000 fa6c 	bl	8001370 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2026      	movs	r0, #38	; 0x26
 8000e9e:	f000 f9b2 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea2:	2026      	movs	r0, #38	; 0x26
 8000ea4:	f000 f9cb 	bl	800123e <HAL_NVIC_EnableIRQ>
}
 8000ea8:	bf00      	nop
 8000eaa:	37b8      	adds	r7, #184	; 0xb8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004c00 	.word	0x40004c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40004400 	.word	0x40004400

08000ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff feda 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f003 ff87 	bl	8004dfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eee:	f7ff fd87 	bl	8000a00 <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f00:	08004ef8 	.word	0x08004ef8
  ldr r2, =_sbss
 8000f04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f08:	200001d8 	.word	0x200001d8

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_Init+0x3c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_Init+0x3c>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f26:	2003      	movs	r0, #3
 8000f28:	f000 f962 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f80f 	bl	8000f50 <HAL_InitTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	e001      	b.n	8000f42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3e:	f7ff fe39 	bl	8000bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d023      	beq.n	8000fac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_InitTick+0x70>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f96d 	bl	800125a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d809      	bhi.n	8000fa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 f937 	bl	8001206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0x74>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e007      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e004      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e001      	b.n	8000fb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	200001d4 	.word	0x200001d4

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200001d4 	.word	0x200001d4

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d008      	beq.n	800129c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2204      	movs	r2, #4
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e022      	b.n	80012e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020e 	bic.w	r2, r2, #14
 80012aa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f003 021c 	and.w	r2, r3, #28
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2101      	movs	r1, #1
 80012ca:	fa01 f202 	lsl.w	r2, r1, r2
 80012ce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d005      	beq.n	8001312 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e029      	b.n	8001366 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 020e 	bic.w	r2, r2, #14
 8001320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 021c 	and.w	r2, r3, #28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    }
  }
  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e17f      	b.n	8001680 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8171 	beq.w	800167a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x40>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 0201 	and.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b03      	cmp	r3, #3
 800141c:	d118      	bne.n	8001450 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001424:	2201      	movs	r2, #1
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	f003 0201 	and.w	r2, r3, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b03      	cmp	r3, #3
 800145a:	d017      	beq.n	800148c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d123      	bne.n	80014e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	6939      	ldr	r1, [r7, #16]
 80014dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80ac 	beq.w	800167a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_GPIO_Init+0x330>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a5e      	ldr	r2, [pc, #376]	; (80016a0 <HAL_GPIO_Init+0x330>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_GPIO_Init+0x330>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800153a:	4a5a      	ldr	r2, [pc, #360]	; (80016a4 <HAL_GPIO_Init+0x334>)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x242>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <HAL_GPIO_Init+0x338>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x23e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_GPIO_Init+0x33c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x23a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4d      	ldr	r2, [pc, #308]	; (80016b0 <HAL_GPIO_Init+0x340>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x236>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4c      	ldr	r2, [pc, #304]	; (80016b4 <HAL_GPIO_Init+0x344>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x232>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_GPIO_Init+0x348>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x22e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <HAL_GPIO_Init+0x34c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x22a>
 8001596:	2306      	movs	r3, #6
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 800159a:	2307      	movs	r3, #7
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x244>
 80015b2:	2300      	movs	r3, #0
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c4:	4937      	ldr	r1, [pc, #220]	; (80016a4 <HAL_GPIO_Init+0x334>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_GPIO_Init+0x350>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f6:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <HAL_GPIO_Init+0x350>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_GPIO_Init+0x350>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001620:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <HAL_GPIO_Init+0x350>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_GPIO_Init+0x350>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_GPIO_Init+0x350>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_GPIO_Init+0x350>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_GPIO_Init+0x350>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	f47f ae78 	bne.w	8001380 <HAL_GPIO_Init+0x10>
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	48000400 	.word	0x48000400
 80016ac:	48000800 	.word	0x48000800
 80016b0:	48000c00 	.word	0x48000c00
 80016b4:	48001000 	.word	0x48001000
 80016b8:	48001400 	.word	0x48001400
 80016bc:	48001800 	.word	0x48001800
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e081      	b.n	800180a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff f912 	bl	8000944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	e006      	b.n	800177c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800177a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d104      	bne.n	800178e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800178c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800179c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69d9      	ldr	r1, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af02      	add	r7, sp, #8
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	461a      	mov	r2, r3
 8001820:	460b      	mov	r3, r1
 8001822:	817b      	strh	r3, [r7, #10]
 8001824:	4613      	mov	r3, r2
 8001826:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b20      	cmp	r3, #32
 8001832:	f040 80da 	bne.w	80019ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_I2C_Master_Transmit+0x30>
 8001840:	2302      	movs	r3, #2
 8001842:	e0d3      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800184c:	f7ff fbd0 	bl	8000ff0 <HAL_GetTick>
 8001850:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2319      	movs	r3, #25
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f9f7 	bl	8001c52 <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0be      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2221      	movs	r2, #33	; 0x21
 8001872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2210      	movs	r2, #16
 800187a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	893a      	ldrh	r2, [r7, #8]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	2bff      	cmp	r3, #255	; 0xff
 800189e:	d90e      	bls.n	80018be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	22ff      	movs	r2, #255	; 0xff
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	8979      	ldrh	r1, [r7, #10]
 80018ae:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fb74 	bl	8001fa4 <I2C_TransferConfig>
 80018bc:	e06c      	b.n	8001998 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	8979      	ldrh	r1, [r7, #10]
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 fb63 	bl	8001fa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018de:	e05b      	b.n	8001998 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	6a39      	ldr	r1, [r7, #32]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f9f4 	bl	8001cd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e07b      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d034      	beq.n	8001998 <HAL_I2C_Master_Transmit+0x184>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d130      	bne.n	8001998 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	2200      	movs	r2, #0
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f986 	bl	8001c52 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e04d      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d90e      	bls.n	8001978 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	22ff      	movs	r2, #255	; 0xff
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	b2da      	uxtb	r2, r3
 8001966:	8979      	ldrh	r1, [r7, #10]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fb17 	bl	8001fa4 <I2C_TransferConfig>
 8001976:	e00f      	b.n	8001998 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	b2da      	uxtb	r2, r3
 8001988:	8979      	ldrh	r1, [r7, #10]
 800198a:	2300      	movs	r3, #0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fb06 	bl	8001fa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d19e      	bne.n	80018e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f9d3 	bl	8001d52 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e01a      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2220      	movs	r2, #32
 80019bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80019ca:	400b      	ands	r3, r1
 80019cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	80002000 	.word	0x80002000
 80019f8:	fe00e800 	.word	0xfe00e800

080019fc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	f040 80f1 	bne.w	8001c00 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e0e7      	b.n	8001c02 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2C_IsDeviceReady+0x44>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0e0      	b.n	8001c02 <HAL_I2C_IsDeviceReady+0x206>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d107      	bne.n	8001a6e <HAL_I2C_IsDeviceReady+0x72>
 8001a5e:	897b      	ldrh	r3, [r7, #10]
 8001a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a6c:	e004      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0x7c>
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a74:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fab7 	bl	8000ff0 <HAL_GetTick>
 8001a82:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ab0:	e034      	b.n	8001b1c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d01a      	beq.n	8001af0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aba:	f7ff fa99 	bl	8000ff0 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d302      	bcc.n	8001ad0 <HAL_I2C_IsDeviceReady+0xd4>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10f      	bne.n	8001af0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001adc:	f043 0220 	orr.w	r2, r3, #32
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e088      	b.n	8001c02 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b1c:	7ffb      	ldrb	r3, [r7, #31]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_I2C_IsDeviceReady+0x12c>
 8001b22:	7fbb      	ldrb	r3, [r7, #30]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0c4      	beq.n	8001ab2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d01a      	beq.n	8001b6c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2120      	movs	r1, #32
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f886 	bl	8001c52 <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e058      	b.n	8001c02 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2220      	movs	r2, #32
 8001b56:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e04a      	b.n	8001c02 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	2120      	movs	r1, #32
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 f86b 	bl	8001c52 <I2C_WaitOnFlagUntilTimeout>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e03d      	b.n	8001c02 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2220      	movs	r2, #32
 8001b94:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d118      	bne.n	8001bd0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bac:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2120      	movs	r1, #32
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f84a 	bl	8001c52 <I2C_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e01c      	b.n	8001c02 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	f63f af3b 	bhi.w	8001a56 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	f043 0220 	orr.w	r2, r3, #32
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d103      	bne.n	8001c28 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d007      	beq.n	8001c46 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	619a      	str	r2, [r3, #24]
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c62:	e022      	b.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d01e      	beq.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6c:	f7ff f9c0 	bl	8000ff0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d302      	bcc.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d113      	bne.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f043 0220 	orr.w	r2, r3, #32
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	bf0c      	ite	eq
 8001cba:	2301      	moveq	r3, #1
 8001cbc:	2300      	movne	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d0cd      	beq.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cde:	e02c      	b.n	8001d3a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f871 	bl	8001dcc <I2C_IsErrorOccurred>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e02a      	b.n	8001d4a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfa:	d01e      	beq.n	8001d3a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfc:	f7ff f978 	bl	8000ff0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d302      	bcc.n	8001d12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d113      	bne.n	8001d3a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f043 0220 	orr.w	r2, r3, #32
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e007      	b.n	8001d4a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d1cb      	bne.n	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d5e:	e028      	b.n	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f831 	bl	8001dcc <I2C_IsErrorOccurred>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e026      	b.n	8001dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d74:	f7ff f93c 	bl	8000ff0 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d302      	bcc.n	8001d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d113      	bne.n	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f043 0220 	orr.w	r2, r3, #32
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e007      	b.n	8001dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d1cf      	bne.n	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d075      	beq.n	8001ee4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e00:	e056      	b.n	8001eb0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d052      	beq.n	8001eb0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e0a:	f7ff f8f1 	bl	8000ff0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <I2C_IsErrorOccurred+0x54>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d147      	bne.n	8001eb0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e42:	d12e      	bne.n	8001ea2 <I2C_IsErrorOccurred+0xd6>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e4a:	d02a      	beq.n	8001ea2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d027      	beq.n	8001ea2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e60:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e62:	f7ff f8c5 	bl	8000ff0 <HAL_GetTick>
 8001e66:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e68:	e01b      	b.n	8001ea2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e6a:	f7ff f8c1 	bl	8000ff0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b19      	cmp	r3, #25
 8001e76:	d914      	bls.n	8001ea2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d1dc      	bne.n	8001e6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d003      	beq.n	8001ec6 <I2C_IsErrorOccurred+0xfa>
 8001ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d09d      	beq.n	8001e02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01c      	beq.n	8001f94 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff fe55 	bl	8001c0a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <I2C_IsErrorOccurred+0x1d4>)
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	fe00e800 	.word	0xfe00e800

08001fa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	817b      	strh	r3, [r7, #10]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fb6:	897b      	ldrh	r3, [r7, #10]
 8001fb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fbc:	7a7b      	ldrb	r3, [r7, #9]
 8001fbe:	041b      	lsls	r3, r3, #16
 8001fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fc4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fd2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	0d5b      	lsrs	r3, r3, #21
 8001fde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <I2C_TransferConfig+0x60>)
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	ea02 0103 	and.w	r1, r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	03ff63ff 	.word	0x03ff63ff

08002008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b20      	cmp	r3, #32
 800201c:	d138      	bne.n	8002090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002028:	2302      	movs	r3, #2
 800202a:	e032      	b.n	8002092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6819      	ldr	r1, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002090:	2302      	movs	r3, #2
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d139      	bne.n	8002128 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020be:	2302      	movs	r3, #2
 80020c0:	e033      	b.n	800212a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2224      	movs	r2, #36	; 0x24
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_PWREx_GetVoltageRange+0x18>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40007000 	.word	0x40007000

08002154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002162:	d130      	bne.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800216c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002170:	d038      	beq.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2232      	movs	r2, #50	; 0x32
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0c9b      	lsrs	r3, r3, #18
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002198:	e002      	b.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3b01      	subs	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ac:	d102      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f2      	bne.n	800219a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	d110      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e00f      	b.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d2:	d007      	beq.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021dc:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40007000 	.word	0x40007000
 80021f8:	20000000 	.word	0x20000000
 80021fc:	431bde83 	.word	0x431bde83

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e3d4      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002212:	4ba1      	ldr	r3, [pc, #644]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800221c:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80e4 	beq.w	80023fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_RCC_OscConfig+0x4a>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	f040 808b 	bne.w	8002358 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b01      	cmp	r3, #1
 8002246:	f040 8087 	bne.w	8002358 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800224a:	4b93      	ldr	r3, [pc, #588]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x62>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e3ac      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_RCC_OscConfig+0x7c>
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227a:	e005      	b.n	8002288 <HAL_RCC_OscConfig+0x88>
 800227c:	4b86      	ldr	r3, [pc, #536]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002288:	4293      	cmp	r3, r2
 800228a:	d223      	bcs.n	80022d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fd41 	bl	8002d18 <RCC_SetFlashLatencyFromMSIRange>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e38d      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a0:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4977      	ldr	r1, [pc, #476]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	4972      	ldr	r1, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
 80022d2:	e025      	b.n	8002320 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d4:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6f      	ldr	r2, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	496a      	ldr	r1, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f2:	4b69      	ldr	r3, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4965      	ldr	r1, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fd01 	bl	8002d18 <RCC_SetFlashLatencyFromMSIRange>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e34d      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002320:	f000 fc36 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	495a      	ldr	r1, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x29c>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
 800233c:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <HAL_RCC_OscConfig+0x2a0>)
 800233e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_RCC_OscConfig+0x2a4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fe03 	bl	8000f50 <HAL_InitTick>
 800234a:	4603      	mov	r3, r0
 800234c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d052      	beq.n	80023fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	e331      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d032      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236c:	f7fe fe40 	bl	8000ff0 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002374:	f7fe fe3c 	bl	8000ff0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e31a      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	493b      	ldr	r1, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	4936      	ldr	r1, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
 80023c4:	e01a      	b.n	80023fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a33      	ldr	r2, [pc, #204]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d2:	f7fe fe0d 	bl	8000ff0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023da:	f7fe fe09 	bl	8000ff0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e2e7      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x1da>
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d074      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b08      	cmp	r3, #8
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x21a>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d10e      	bne.n	8002432 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d10b      	bne.n	8002432 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d064      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d160      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e2c4      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x24a>
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e01d      	b.n	8002486 <HAL_RCC_OscConfig+0x286>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x26e>
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800245a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0x286>
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a06      	ldr	r2, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fdaf 	bl	8000ff0 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002494:	e011      	b.n	80024ba <HAL_RCC_OscConfig+0x2ba>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	08004ea0 	.word	0x08004ea0
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7fe fda2 	bl	8000ff0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e280      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	4baf      	ldr	r3, [pc, #700]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x2a8>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fd92 	bl	8000ff0 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe fd8e 	bl	8000ff0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e26c      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e2:	4ba5      	ldr	r3, [pc, #660]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2d0>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d060      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d005      	beq.n	8002510 <HAL_RCC_OscConfig+0x310>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d119      	bne.n	800253e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d116      	bne.n	800253e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	4b99      	ldr	r3, [pc, #612]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x328>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e249      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b93      	ldr	r3, [pc, #588]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	4990      	ldr	r1, [pc, #576]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253c:	e040      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d023      	beq.n	800258e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002546:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a8b      	ldr	r2, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fd4d 	bl	8000ff0 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe fd49 	bl	8000ff0 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e227      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	497c      	ldr	r1, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	e018      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a79      	ldr	r2, [pc, #484]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fd29 	bl	8000ff0 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fd25 	bl	8000ff0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e203      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b4:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d03c      	beq.n	8002646 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01c      	beq.n	800260e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fd04 	bl	8000ff0 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fd00 	bl	8000ff0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1de      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fe:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCC_OscConfig+0x3ec>
 800260c:	e01b      	b.n	8002646 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fce7 	bl	8000ff0 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002626:	f7fe fce3 	bl	8000ff0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1c1      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ef      	bne.n	8002626 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80a6 	beq.w	80027a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4a43      	ldr	r2, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266e:	6593      	str	r3, [r2, #88]	; 0x58
 8002670:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267c:	2301      	movs	r3, #1
 800267e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d118      	bne.n	80026be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3a      	ldr	r2, [pc, #232]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002698:	f7fe fcaa 	bl	8000ff0 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7fe fca6 	bl	8000ff0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e184      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4d8>
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026d6:	e024      	b.n	8002722 <HAL_RCC_OscConfig+0x522>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d110      	bne.n	8002702 <HAL_RCC_OscConfig+0x502>
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	4a24      	ldr	r2, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002700:	e00f      	b.n	8002722 <HAL_RCC_OscConfig+0x522>
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800271a:	f023 0304 	bic.w	r3, r3, #4
 800271e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe fc61 	bl	8000ff0 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fc5d 	bl	8000ff0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e139      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ed      	beq.n	8002732 <HAL_RCC_OscConfig+0x532>
 8002756:	e01a      	b.n	800278e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe fc4a 	bl	8000ff0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe fc46 	bl	8000ff0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d906      	bls.n	8002780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e122      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002780:	4b90      	ldr	r3, [pc, #576]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e8      	bne.n	8002760 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278e:	7ffb      	ldrb	r3, [r7, #31]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	4a8a      	ldr	r2, [pc, #552]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8108 	beq.w	80029ba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f040 80d0 	bne.w	8002954 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027b4:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d130      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	3b01      	subs	r3, #1
 80027d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d127      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d11f      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027f4:	2a07      	cmp	r2, #7
 80027f6:	bf14      	ite	ne
 80027f8:	2201      	movne	r2, #1
 80027fa:	2200      	moveq	r2, #0
 80027fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fe:	4293      	cmp	r3, r2
 8002800:	d113      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d109      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d06e      	beq.n	8002908 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d069      	beq.n	8002904 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002830:	4b64      	ldr	r3, [pc, #400]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800283c:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b7      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800284c:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5c      	ldr	r2, [pc, #368]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002858:	f7fe fbca 	bl	8000ff0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fbc6 	bl	8000ff0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0a4      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002872:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287e:	4b51      	ldr	r3, [pc, #324]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <HAL_RCC_OscConfig+0x7c8>)
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800288e:	3a01      	subs	r2, #1
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002898:	0212      	lsls	r2, r2, #8
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028a0:	0852      	lsrs	r2, r2, #1
 80028a2:	3a01      	subs	r2, #1
 80028a4:	0552      	lsls	r2, r2, #21
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0652      	lsls	r2, r2, #25
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b8:	0912      	lsrs	r2, r2, #4
 80028ba:	0452      	lsls	r2, r2, #17
 80028bc:	430a      	orrs	r2, r1
 80028be:	4941      	ldr	r1, [pc, #260]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028c4:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3e      	ldr	r2, [pc, #248]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d0:	4b3c      	ldr	r3, [pc, #240]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a3b      	ldr	r2, [pc, #236]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028dc:	f7fe fb88 	bl	8000ff0 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fb84 	bl	8000ff0 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e062      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002902:	e05a      	b.n	80029ba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e059      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d152      	bne.n	80029ba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002914:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002920:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800292c:	f7fe fb60 	bl	8000ff0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fb5c 	bl	8000ff0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e03a      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x734>
 8002952:	e032      	b.n	80029ba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d02d      	beq.n	80029b6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002960:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002964:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002978:	f023 0303 	bic.w	r3, r3, #3
 800297c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4a10      	ldr	r2, [pc, #64]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002984:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fb2f 	bl	8000ff0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fb2b 	bl	8000ff0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e009      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x796>
 80029b4:	e001      	b.n	80029ba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	f99d808c 	.word	0xf99d808c

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0c8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4961      	ldr	r1, [pc, #388]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b5f      	ldr	r3, [pc, #380]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0b0      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d04c      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a24:	4b56      	ldr	r3, [pc, #344]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d121      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e09e      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d115      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e092      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a54:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e086      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a64:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e07e      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a74:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 0203 	bic.w	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	493f      	ldr	r1, [pc, #252]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a86:	f7fe fab3 	bl	8000ff0 <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8e:	f7fe faaf 	bl	8000ff0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e066      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 020c 	and.w	r2, r3, #12
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d1eb      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac2:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	492c      	ldr	r1, [pc, #176]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d210      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	4924      	ldr	r1, [pc, #144]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e036      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4918      	ldr	r1, [pc, #96]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4910      	ldr	r1, [pc, #64]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b42:	f000 f825 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490c      	ldr	r1, [pc, #48]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f9f2 	bl	8000f50 <HAL_InitTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b70:	7afb      	ldrb	r3, [r7, #11]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08004ea0 	.word	0x08004ea0
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	20000004 	.word	0x20000004

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d121      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d11e      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bd0:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	e005      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bec:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e004      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d134      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d003      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0xac>
 8002c34:	e005      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c38:	617b      	str	r3, [r7, #20]
      break;
 8002c3a:	e005      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c3e:	617b      	str	r3, [r7, #20]
      break;
 8002c40:	e002      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	3301      	adds	r3, #1
 8002c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	fb02 f203 	mul.w	r2, r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	0e5b      	lsrs	r3, r3, #25
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c88:	69bb      	ldr	r3, [r7, #24]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08004eb8 	.word	0x08004eb8
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08004eb0 	.word	0x08004eb0

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cf0:	f7ff ffda 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4904      	ldr	r1, [pc, #16]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08004eb0 	.word	0x08004eb0

08002d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d30:	f7ff fa02 	bl	8002138 <HAL_PWREx_GetVoltageRange>
 8002d34:	6178      	str	r0, [r7, #20]
 8002d36:	e014      	b.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d50:	f7ff f9f2 	bl	8002138 <HAL_PWREx_GetVoltageRange>
 8002d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d68:	d10b      	bne.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d919      	bls.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2ba0      	cmp	r3, #160	; 0xa0
 8002d74:	d902      	bls.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d76:	2302      	movs	r3, #2
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e013      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	e010      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d902      	bls.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d88:	2303      	movs	r3, #3
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e00a      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b80      	cmp	r3, #128	; 0x80
 8002d92:	d102      	bne.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d94:	2302      	movs	r3, #2
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e004      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b70      	cmp	r3, #112	; 0x70
 8002d9e:	d101      	bne.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002da0:	2301      	movs	r3, #1
 8002da2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 0207 	bic.w	r2, r3, #7
 8002dac:	4909      	ldr	r1, [pc, #36]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002de0:	2300      	movs	r3, #0
 8002de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de4:	2300      	movs	r3, #0
 8002de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d041      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dfc:	d02a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002dfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e02:	d824      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e0e:	d81e      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e18:	d010      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e1a:	e018      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e1c:	4b86      	ldr	r3, [pc, #536]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a85      	ldr	r2, [pc, #532]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e28:	e015      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fabb 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e3a:	e00c      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3320      	adds	r3, #32
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fba6 	bl	8003594 <RCCEx_PLLSAI2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e4c:	e003      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	74fb      	strb	r3, [r7, #19]
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e5c:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6a:	4973      	ldr	r1, [pc, #460]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e72:	e001      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d041      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e8c:	d02a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e92:	d824      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e9e:	d81e      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eaa:	e018      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eac:	4b62      	ldr	r3, [pc, #392]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a61      	ldr	r2, [pc, #388]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fa73 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3320      	adds	r3, #32
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fb5e 	bl	8003594 <RCCEx_PLLSAI2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eec:	4b52      	ldr	r3, [pc, #328]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efa:	494f      	ldr	r1, [pc, #316]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a0 	beq.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3c:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3a      	ldr	r2, [pc, #232]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f58:	f7fe f84a 	bl	8000ff0 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f5e:	e009      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fe f846 	bl	8000ff0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d902      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	74fb      	strb	r3, [r7, #19]
        break;
 8002f72:	e005      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ef      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d15c      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f86:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01f      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d019      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f805 	bl	8000ff0 <HAL_GetTick>
 8002fe6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe8:	e00b      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe f801 	bl	8000ff0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d902      	bls.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	74fb      	strb	r3, [r7, #19]
            break;
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ec      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	4904      	ldr	r1, [pc, #16]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800302e:	e009      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003044:	7c7b      	ldrb	r3, [r7, #17]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b9e      	ldr	r3, [pc, #632]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4a9d      	ldr	r2, [pc, #628]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003062:	4b98      	ldr	r3, [pc, #608]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	f023 0203 	bic.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	4994      	ldr	r1, [pc, #592]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003084:	4b8f      	ldr	r3, [pc, #572]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f023 020c 	bic.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	498c      	ldr	r1, [pc, #560]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a6:	4b87      	ldr	r3, [pc, #540]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4983      	ldr	r1, [pc, #524]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c8:	4b7e      	ldr	r3, [pc, #504]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	497b      	ldr	r1, [pc, #492]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f8:	4972      	ldr	r1, [pc, #456]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800310c:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	496a      	ldr	r1, [pc, #424]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800312e:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	4961      	ldr	r1, [pc, #388]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003150:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	4959      	ldr	r1, [pc, #356]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003172:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	4950      	ldr	r1, [pc, #320]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	4948      	ldr	r1, [pc, #288]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	493f      	ldr	r1, [pc, #252]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d028      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e6:	4937      	ldr	r1, [pc, #220]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f6:	d106      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003202:	60d3      	str	r3, [r2, #12]
 8003204:	e011      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800320e:	d10c      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	2101      	movs	r1, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f8c8 	bl	80033ac <RCCEx_PLLSAI1_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d028      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	491f      	ldr	r1, [pc, #124]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003260:	60d3      	str	r3, [r2, #12]
 8003262:	e011      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326c:	d10c      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f899 	bl	80033ac <RCCEx_PLLSAI1_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02b      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	4908      	ldr	r1, [pc, #32]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b2:	d109      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a02      	ldr	r2, [pc, #8]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032be:	60d3      	str	r3, [r2, #12]
 80032c0:	e014      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f867 	bl	80033ac <RCCEx_PLLSAI1_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02f      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003306:	4928      	ldr	r1, [pc, #160]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003316:	d10d      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f844 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d014      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	74bb      	strb	r3, [r7, #18]
 8003332:	e011      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3320      	adds	r3, #32
 8003342:	2102      	movs	r1, #2
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f925 	bl	8003594 <RCCEx_PLLSAI2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003372:	490d      	ldr	r1, [pc, #52]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003396:	4904      	ldr	r1, [pc, #16]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800339e:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ba:	4b75      	ldr	r3, [pc, #468]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033c6:	4b72      	ldr	r3, [pc, #456]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10d      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
       ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033de:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
       ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d047      	beq.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e044      	b.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d018      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x86>
 8003400:	2b03      	cmp	r3, #3
 8003402:	d825      	bhi.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d002      	beq.n	800340e <RCCEx_PLLSAI1_Config+0x62>
 8003408:	2b02      	cmp	r3, #2
 800340a:	d009      	beq.n	8003420 <RCCEx_PLLSAI1_Config+0x74>
 800340c:	e020      	b.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800340e:	4b60      	ldr	r3, [pc, #384]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11d      	bne.n	8003456 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341e:	e01a      	b.n	8003456 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003420:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e013      	b.n	800345a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003432:	4b57      	ldr	r3, [pc, #348]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800343e:	4b54      	ldr	r3, [pc, #336]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800344e:	e006      	b.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e004      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003456:	bf00      	nop
 8003458:	e002      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	430b      	orrs	r3, r1
 800347c:	4944      	ldr	r1, [pc, #272]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d17d      	bne.n	8003584 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a40      	ldr	r2, [pc, #256]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fd fdac 	bl	8000ff0 <HAL_GetTick>
 8003498:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800349a:	e009      	b.n	80034b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800349c:	f7fd fda8 	bl	8000ff0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	73fb      	strb	r3, [r7, #15]
        break;
 80034ae:	e005      	b.n	80034bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b0:	4b37      	ldr	r3, [pc, #220]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ef      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d160      	bne.n	8003584 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d111      	bne.n	80034ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c8:	4b31      	ldr	r3, [pc, #196]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	0211      	lsls	r1, r2, #8
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68d2      	ldr	r2, [r2, #12]
 80034de:	0912      	lsrs	r2, r2, #4
 80034e0:	0452      	lsls	r2, r2, #17
 80034e2:	430a      	orrs	r2, r1
 80034e4:	492a      	ldr	r1, [pc, #168]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	610b      	str	r3, [r1, #16]
 80034ea:	e027      	b.n	800353c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d112      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f2:	4b27      	ldr	r3, [pc, #156]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	0211      	lsls	r1, r2, #8
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6912      	ldr	r2, [r2, #16]
 8003508:	0852      	lsrs	r2, r2, #1
 800350a:	3a01      	subs	r2, #1
 800350c:	0552      	lsls	r2, r2, #21
 800350e:	430a      	orrs	r2, r1
 8003510:	491f      	ldr	r1, [pc, #124]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	610b      	str	r3, [r1, #16]
 8003516:	e011      	b.n	800353c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6892      	ldr	r2, [r2, #8]
 8003528:	0211      	lsls	r1, r2, #8
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6952      	ldr	r2, [r2, #20]
 800352e:	0852      	lsrs	r2, r2, #1
 8003530:	3a01      	subs	r2, #1
 8003532:	0652      	lsls	r2, r2, #25
 8003534:	430a      	orrs	r2, r1
 8003536:	4916      	ldr	r1, [pc, #88]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a13      	ldr	r2, [pc, #76]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fd fd52 	bl	8000ff0 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800354e:	e009      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003550:	f7fd fd4e 	bl	8000ff0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d902      	bls.n	8003564 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	73fb      	strb	r3, [r7, #15]
          break;
 8003562:	e005      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ef      	beq.n	8003550 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	4313      	orrs	r3, r2
 8003582:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000

08003594 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035a2:	4b6a      	ldr	r3, [pc, #424]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ae:	4b67      	ldr	r3, [pc, #412]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0203 	and.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10d      	bne.n	80035da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
       ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035c6:	4b61      	ldr	r3, [pc, #388]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
       ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d047      	beq.n	800366a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e044      	b.n	800366a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d018      	beq.n	800361a <RCCEx_PLLSAI2_Config+0x86>
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d825      	bhi.n	8003638 <RCCEx_PLLSAI2_Config+0xa4>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <RCCEx_PLLSAI2_Config+0x62>
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d009      	beq.n	8003608 <RCCEx_PLLSAI2_Config+0x74>
 80035f4:	e020      	b.n	8003638 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035f6:	4b55      	ldr	r3, [pc, #340]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e01a      	b.n	800363e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e013      	b.n	8003642 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361a:	4b4c      	ldr	r3, [pc, #304]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003626:	4b49      	ldr	r3, [pc, #292]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003636:	e006      	b.n	8003646 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e004      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800363e:	bf00      	nop
 8003640:	e002      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003646:	bf00      	nop
    }

    if(status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	430b      	orrs	r3, r1
 8003664:	4939      	ldr	r1, [pc, #228]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d167      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003670:	4b36      	ldr	r3, [pc, #216]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a35      	ldr	r2, [pc, #212]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fd fcb8 	bl	8000ff0 <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003682:	e009      	b.n	8003698 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003684:	f7fd fcb4 	bl	8000ff0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	73fb      	strb	r3, [r7, #15]
        break;
 8003696:	e005      	b.n	80036a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003698:	4b2c      	ldr	r3, [pc, #176]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ef      	bne.n	8003684 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d14a      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036b0:	4b26      	ldr	r3, [pc, #152]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6892      	ldr	r2, [r2, #8]
 80036c0:	0211      	lsls	r1, r2, #8
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	0912      	lsrs	r2, r2, #4
 80036c8:	0452      	lsls	r2, r2, #17
 80036ca:	430a      	orrs	r2, r1
 80036cc:	491f      	ldr	r1, [pc, #124]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	614b      	str	r3, [r1, #20]
 80036d2:	e011      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	0211      	lsls	r1, r2, #8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6912      	ldr	r2, [r2, #16]
 80036ea:	0852      	lsrs	r2, r2, #1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0652      	lsls	r2, r2, #25
 80036f0:	430a      	orrs	r2, r1
 80036f2:	4916      	ldr	r1, [pc, #88]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fc74 	bl	8000ff0 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800370a:	e009      	b.n	8003720 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800370c:	f7fd fc70 	bl	8000ff0 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d902      	bls.n	8003720 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	73fb      	strb	r3, [r7, #15]
          break;
 800371e:	e005      	b.n	800372c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4904      	ldr	r1, [pc, #16]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000

08003750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e040      	b.n	80037e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd faf2 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	; 0x24
 800377c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fc22 	bl	8003fd8 <UART_SetConfig>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e022      	b.n	80037e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fea0 	bl	80044ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 ff27 	bl	8004630 <UART_CheckIdleState>
 80037e2:	4603      	mov	r3, r0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003800:	2b20      	cmp	r3, #32
 8003802:	f040 8082 	bne.w	800390a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_UART_Transmit+0x26>
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07a      	b.n	800390c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_UART_Transmit+0x38>
 8003820:	2302      	movs	r3, #2
 8003822:	e073      	b.n	800390c <HAL_UART_Transmit+0x120>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2221      	movs	r2, #33	; 0x21
 8003838:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800383a:	f7fd fbd9 	bl	8000ff0 <HAL_GetTick>
 800383e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d108      	bne.n	800386c <HAL_UART_Transmit+0x80>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	e003      	b.n	8003874 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800387c:	e02d      	b.n	80038da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	2180      	movs	r1, #128	; 0x80
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 ff1a 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e039      	b.n	800390c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	881a      	ldrh	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038aa:	b292      	uxth	r2, r2
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	3302      	adds	r3, #2
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	e008      	b.n	80038c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	b292      	uxth	r2, r2
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1cb      	bne.n	800387e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fee6 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e005      	b.n	800390c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003926:	2b20      	cmp	r3, #32
 8003928:	d142      	bne.n	80039b0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_UART_Receive_IT+0x22>
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e03b      	b.n	80039b2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_UART_Receive_IT+0x34>
 8003944:	2302      	movs	r3, #2
 8003946:	e034      	b.n	80039b2 <HAL_UART_Receive_IT+0x9e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_UART_Receive_IT+0xa8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01f      	beq.n	80039a0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	613b      	str	r3, [r7, #16]
   return(result);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	69f9      	ldr	r1, [r7, #28]
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	61bb      	str	r3, [r7, #24]
   return(result);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e6      	bne.n	800396e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 ff50 	bl	800484c <UART_Start_Receive_IT>
 80039ac:	4603      	mov	r3, r0
 80039ae:	e000      	b.n	80039b2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40008000 	.word	0x40008000

080039c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b0ba      	sub	sp, #232	; 0xe8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ee:	4013      	ands	r3, r2
 80039f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d115      	bne.n	8003a28 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00f      	beq.n	8003a28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 82a6 	beq.w	8003f6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
      }
      return;
 8003a26:	e2a0      	b.n	8003f6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8117 	beq.w	8003c60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a42:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_UART_IRQHandler+0x298>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 810a 	beq.w	8003c60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d011      	beq.n	8003a7c <HAL_UART_IRQHandler+0xbc>
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d011      	beq.n	8003aac <HAL_UART_IRQHandler+0xec>
 8003a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00b      	beq.n	8003aac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d011      	beq.n	8003adc <HAL_UART_IRQHandler+0x11c>
 8003ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad2:	f043 0202 	orr.w	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d017      	beq.n	8003b18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2208      	movs	r2, #8
 8003b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d012      	beq.n	8003b4a <HAL_UART_IRQHandler+0x18a>
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00c      	beq.n	8003b4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 820c 	beq.w	8003f6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d005      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d04f      	beq.n	8003c42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 ff1c 	bl	80049e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d141      	bne.n	8003c3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1d9      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d013      	beq.n	8003c32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <HAL_UART_IRQHandler+0x29c>)
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd fb69 	bl	80012ee <HAL_DMA_Abort_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00f      	b.n	8003c52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9ba 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e00b      	b.n	8003c52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9b6 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e007      	b.n	8003c52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f9b2 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c50:	e18d      	b.n	8003f6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c52:	bf00      	nop
    return;
 8003c54:	e18b      	b.n	8003f6e <HAL_UART_IRQHandler+0x5ae>
 8003c56:	bf00      	nop
 8003c58:	04000120 	.word	0x04000120
 8003c5c:	08004aa7 	.word	0x08004aa7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	f040 8146 	bne.w	8003ef6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 813f 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8138 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	f040 80b4 	bne.w	8003e06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003caa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 815f 	beq.w	8003f72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	f080 8157 	bcs.w	8003f72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8085 	bne.w	8003dea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1da      	bne.n	8003ce0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e1      	bne.n	8003d2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3308      	adds	r3, #8
 8003d86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e3      	bne.n	8003d66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e4      	bne.n	8003daa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd fa44 	bl	8001272 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8de 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e04:	e0b5      	b.n	8003f72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80a7 	beq.w	8003f76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a2 	beq.w	8003f76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e54:	647b      	str	r3, [r7, #68]	; 0x44
 8003e56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e4      	bne.n	8003e32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	623b      	str	r3, [r7, #32]
   return(result);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e8c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e3      	bne.n	8003e68 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0310 	bic.w	r3, r3, #16
 8003ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e4      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f866 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ef4:	e03f      	b.n	8003f76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00e      	beq.n	8003f20 <HAL_UART_IRQHandler+0x560>
 8003f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 ff64 	bl	8004de6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f1e:	e02d      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01c      	beq.n	8003f7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
    }
    return;
 8003f48:	e017      	b.n	8003f7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d012      	beq.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fdb5 	bl	8004ad2 <UART_EndTransmit_IT>
    return;
 8003f68:	e008      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f6a:	bf00      	nop
 8003f6c:	e006      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f6e:	bf00      	nop
 8003f70:	e004      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f7c:	37e8      	adds	r7, #232	; 0xe8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop

08003f84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	b5b0      	push	{r4, r5, r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bad      	ldr	r3, [pc, #692]	; (80042b8 <UART_SetConfig+0x2e0>)
 8004004:	4013      	ands	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	69f9      	ldr	r1, [r7, #28]
 800400c:	430b      	orrs	r3, r1
 800400e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4aa2      	ldr	r2, [pc, #648]	; (80042bc <UART_SetConfig+0x2e4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	4313      	orrs	r3, r2
 800403e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a99      	ldr	r2, [pc, #612]	; (80042c0 <UART_SetConfig+0x2e8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d121      	bne.n	80040a2 <UART_SetConfig+0xca>
 800405e:	4b99      	ldr	r3, [pc, #612]	; (80042c4 <UART_SetConfig+0x2ec>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b03      	cmp	r3, #3
 800406a:	d817      	bhi.n	800409c <UART_SetConfig+0xc4>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x9c>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	08004091 	.word	0x08004091
 800407c:	0800408b 	.word	0x0800408b
 8004080:	08004097 	.word	0x08004097
 8004084:	2301      	movs	r3, #1
 8004086:	76fb      	strb	r3, [r7, #27]
 8004088:	e0e7      	b.n	800425a <UART_SetConfig+0x282>
 800408a:	2302      	movs	r3, #2
 800408c:	76fb      	strb	r3, [r7, #27]
 800408e:	e0e4      	b.n	800425a <UART_SetConfig+0x282>
 8004090:	2304      	movs	r3, #4
 8004092:	76fb      	strb	r3, [r7, #27]
 8004094:	e0e1      	b.n	800425a <UART_SetConfig+0x282>
 8004096:	2308      	movs	r3, #8
 8004098:	76fb      	strb	r3, [r7, #27]
 800409a:	e0de      	b.n	800425a <UART_SetConfig+0x282>
 800409c:	2310      	movs	r3, #16
 800409e:	76fb      	strb	r3, [r7, #27]
 80040a0:	e0db      	b.n	800425a <UART_SetConfig+0x282>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a88      	ldr	r2, [pc, #544]	; (80042c8 <UART_SetConfig+0x2f0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d132      	bne.n	8004112 <UART_SetConfig+0x13a>
 80040ac:	4b85      	ldr	r3, [pc, #532]	; (80042c4 <UART_SetConfig+0x2ec>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d828      	bhi.n	800410c <UART_SetConfig+0x134>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0xe8>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	0800410d 	.word	0x0800410d
 80040c8:	0800410d 	.word	0x0800410d
 80040cc:	0800410d 	.word	0x0800410d
 80040d0:	08004101 	.word	0x08004101
 80040d4:	0800410d 	.word	0x0800410d
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	0800410d 	.word	0x0800410d
 80040e0:	080040fb 	.word	0x080040fb
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	0800410d 	.word	0x0800410d
 80040f0:	08004107 	.word	0x08004107
 80040f4:	2300      	movs	r3, #0
 80040f6:	76fb      	strb	r3, [r7, #27]
 80040f8:	e0af      	b.n	800425a <UART_SetConfig+0x282>
 80040fa:	2302      	movs	r3, #2
 80040fc:	76fb      	strb	r3, [r7, #27]
 80040fe:	e0ac      	b.n	800425a <UART_SetConfig+0x282>
 8004100:	2304      	movs	r3, #4
 8004102:	76fb      	strb	r3, [r7, #27]
 8004104:	e0a9      	b.n	800425a <UART_SetConfig+0x282>
 8004106:	2308      	movs	r3, #8
 8004108:	76fb      	strb	r3, [r7, #27]
 800410a:	e0a6      	b.n	800425a <UART_SetConfig+0x282>
 800410c:	2310      	movs	r3, #16
 800410e:	76fb      	strb	r3, [r7, #27]
 8004110:	e0a3      	b.n	800425a <UART_SetConfig+0x282>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6d      	ldr	r2, [pc, #436]	; (80042cc <UART_SetConfig+0x2f4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d120      	bne.n	800415e <UART_SetConfig+0x186>
 800411c:	4b69      	ldr	r3, [pc, #420]	; (80042c4 <UART_SetConfig+0x2ec>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004126:	2b30      	cmp	r3, #48	; 0x30
 8004128:	d013      	beq.n	8004152 <UART_SetConfig+0x17a>
 800412a:	2b30      	cmp	r3, #48	; 0x30
 800412c:	d814      	bhi.n	8004158 <UART_SetConfig+0x180>
 800412e:	2b20      	cmp	r3, #32
 8004130:	d009      	beq.n	8004146 <UART_SetConfig+0x16e>
 8004132:	2b20      	cmp	r3, #32
 8004134:	d810      	bhi.n	8004158 <UART_SetConfig+0x180>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <UART_SetConfig+0x168>
 800413a:	2b10      	cmp	r3, #16
 800413c:	d006      	beq.n	800414c <UART_SetConfig+0x174>
 800413e:	e00b      	b.n	8004158 <UART_SetConfig+0x180>
 8004140:	2300      	movs	r3, #0
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e089      	b.n	800425a <UART_SetConfig+0x282>
 8004146:	2302      	movs	r3, #2
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e086      	b.n	800425a <UART_SetConfig+0x282>
 800414c:	2304      	movs	r3, #4
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	e083      	b.n	800425a <UART_SetConfig+0x282>
 8004152:	2308      	movs	r3, #8
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e080      	b.n	800425a <UART_SetConfig+0x282>
 8004158:	2310      	movs	r3, #16
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e07d      	b.n	800425a <UART_SetConfig+0x282>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5b      	ldr	r2, [pc, #364]	; (80042d0 <UART_SetConfig+0x2f8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d120      	bne.n	80041aa <UART_SetConfig+0x1d2>
 8004168:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <UART_SetConfig+0x2ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004172:	2bc0      	cmp	r3, #192	; 0xc0
 8004174:	d013      	beq.n	800419e <UART_SetConfig+0x1c6>
 8004176:	2bc0      	cmp	r3, #192	; 0xc0
 8004178:	d814      	bhi.n	80041a4 <UART_SetConfig+0x1cc>
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d009      	beq.n	8004192 <UART_SetConfig+0x1ba>
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d810      	bhi.n	80041a4 <UART_SetConfig+0x1cc>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <UART_SetConfig+0x1b4>
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d006      	beq.n	8004198 <UART_SetConfig+0x1c0>
 800418a:	e00b      	b.n	80041a4 <UART_SetConfig+0x1cc>
 800418c:	2300      	movs	r3, #0
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	e063      	b.n	800425a <UART_SetConfig+0x282>
 8004192:	2302      	movs	r3, #2
 8004194:	76fb      	strb	r3, [r7, #27]
 8004196:	e060      	b.n	800425a <UART_SetConfig+0x282>
 8004198:	2304      	movs	r3, #4
 800419a:	76fb      	strb	r3, [r7, #27]
 800419c:	e05d      	b.n	800425a <UART_SetConfig+0x282>
 800419e:	2308      	movs	r3, #8
 80041a0:	76fb      	strb	r3, [r7, #27]
 80041a2:	e05a      	b.n	800425a <UART_SetConfig+0x282>
 80041a4:	2310      	movs	r3, #16
 80041a6:	76fb      	strb	r3, [r7, #27]
 80041a8:	e057      	b.n	800425a <UART_SetConfig+0x282>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a49      	ldr	r2, [pc, #292]	; (80042d4 <UART_SetConfig+0x2fc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d125      	bne.n	8004200 <UART_SetConfig+0x228>
 80041b4:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <UART_SetConfig+0x2ec>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c2:	d017      	beq.n	80041f4 <UART_SetConfig+0x21c>
 80041c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c8:	d817      	bhi.n	80041fa <UART_SetConfig+0x222>
 80041ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ce:	d00b      	beq.n	80041e8 <UART_SetConfig+0x210>
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	d811      	bhi.n	80041fa <UART_SetConfig+0x222>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <UART_SetConfig+0x20a>
 80041da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041de:	d006      	beq.n	80041ee <UART_SetConfig+0x216>
 80041e0:	e00b      	b.n	80041fa <UART_SetConfig+0x222>
 80041e2:	2300      	movs	r3, #0
 80041e4:	76fb      	strb	r3, [r7, #27]
 80041e6:	e038      	b.n	800425a <UART_SetConfig+0x282>
 80041e8:	2302      	movs	r3, #2
 80041ea:	76fb      	strb	r3, [r7, #27]
 80041ec:	e035      	b.n	800425a <UART_SetConfig+0x282>
 80041ee:	2304      	movs	r3, #4
 80041f0:	76fb      	strb	r3, [r7, #27]
 80041f2:	e032      	b.n	800425a <UART_SetConfig+0x282>
 80041f4:	2308      	movs	r3, #8
 80041f6:	76fb      	strb	r3, [r7, #27]
 80041f8:	e02f      	b.n	800425a <UART_SetConfig+0x282>
 80041fa:	2310      	movs	r3, #16
 80041fc:	76fb      	strb	r3, [r7, #27]
 80041fe:	e02c      	b.n	800425a <UART_SetConfig+0x282>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2d      	ldr	r2, [pc, #180]	; (80042bc <UART_SetConfig+0x2e4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d125      	bne.n	8004256 <UART_SetConfig+0x27e>
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <UART_SetConfig+0x2ec>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004218:	d017      	beq.n	800424a <UART_SetConfig+0x272>
 800421a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800421e:	d817      	bhi.n	8004250 <UART_SetConfig+0x278>
 8004220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004224:	d00b      	beq.n	800423e <UART_SetConfig+0x266>
 8004226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422a:	d811      	bhi.n	8004250 <UART_SetConfig+0x278>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <UART_SetConfig+0x260>
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d006      	beq.n	8004244 <UART_SetConfig+0x26c>
 8004236:	e00b      	b.n	8004250 <UART_SetConfig+0x278>
 8004238:	2300      	movs	r3, #0
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	e00d      	b.n	800425a <UART_SetConfig+0x282>
 800423e:	2302      	movs	r3, #2
 8004240:	76fb      	strb	r3, [r7, #27]
 8004242:	e00a      	b.n	800425a <UART_SetConfig+0x282>
 8004244:	2304      	movs	r3, #4
 8004246:	76fb      	strb	r3, [r7, #27]
 8004248:	e007      	b.n	800425a <UART_SetConfig+0x282>
 800424a:	2308      	movs	r3, #8
 800424c:	76fb      	strb	r3, [r7, #27]
 800424e:	e004      	b.n	800425a <UART_SetConfig+0x282>
 8004250:	2310      	movs	r3, #16
 8004252:	76fb      	strb	r3, [r7, #27]
 8004254:	e001      	b.n	800425a <UART_SetConfig+0x282>
 8004256:	2310      	movs	r3, #16
 8004258:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a17      	ldr	r2, [pc, #92]	; (80042bc <UART_SetConfig+0x2e4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	f040 8087 	bne.w	8004374 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004266:	7efb      	ldrb	r3, [r7, #27]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d837      	bhi.n	80042dc <UART_SetConfig+0x304>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0x29c>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004299 	.word	0x08004299
 8004278:	080042dd 	.word	0x080042dd
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042dd 	.word	0x080042dd
 8004284:	080042a7 	.word	0x080042a7
 8004288:	080042dd 	.word	0x080042dd
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080042dd 	.word	0x080042dd
 8004294:	080042af 	.word	0x080042af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fe fd12 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800429c:	6178      	str	r0, [r7, #20]
        break;
 800429e:	e022      	b.n	80042e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <UART_SetConfig+0x300>)
 80042a2:	617b      	str	r3, [r7, #20]
        break;
 80042a4:	e01f      	b.n	80042e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fe fc73 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 80042aa:	6178      	str	r0, [r7, #20]
        break;
 80042ac:	e01b      	b.n	80042e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b2:	617b      	str	r3, [r7, #20]
        break;
 80042b4:	e017      	b.n	80042e6 <UART_SetConfig+0x30e>
 80042b6:	bf00      	nop
 80042b8:	efff69f3 	.word	0xefff69f3
 80042bc:	40008000 	.word	0x40008000
 80042c0:	40013800 	.word	0x40013800
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40004400 	.word	0x40004400
 80042cc:	40004800 	.word	0x40004800
 80042d0:	40004c00 	.word	0x40004c00
 80042d4:	40005000 	.word	0x40005000
 80042d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	76bb      	strb	r3, [r7, #26]
        break;
 80042e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80f1 	beq.w	80044d0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d305      	bcc.n	800430a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	429a      	cmp	r2, r3
 8004308:	d902      	bls.n	8004310 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	76bb      	strb	r3, [r7, #26]
 800430e:	e0df      	b.n	80044d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4618      	mov	r0, r3
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	020b      	lsls	r3, r1, #8
 8004322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004326:	0202      	lsls	r2, r0, #8
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	6849      	ldr	r1, [r1, #4]
 800432c:	0849      	lsrs	r1, r1, #1
 800432e:	4608      	mov	r0, r1
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	1814      	adds	r4, r2, r0
 8004336:	eb43 0501 	adc.w	r5, r3, r1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	461a      	mov	r2, r3
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	4620      	mov	r0, r4
 8004346:	4629      	mov	r1, r5
 8004348:	f7fb ff3e 	bl	80001c8 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435a:	d308      	bcc.n	800436e <UART_SetConfig+0x396>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004362:	d204      	bcs.n	800436e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e0b0      	b.n	80044d0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	76bb      	strb	r3, [r7, #26]
 8004372:	e0ad      	b.n	80044d0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	d15b      	bne.n	8004436 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800437e:	7efb      	ldrb	r3, [r7, #27]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d828      	bhi.n	80043d6 <UART_SetConfig+0x3fe>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x3b4>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe fc86 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80043b4:	6178      	str	r0, [r7, #20]
        break;
 80043b6:	e013      	b.n	80043e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe fc98 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 80043bc:	6178      	str	r0, [r7, #20]
        break;
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <UART_SetConfig+0x510>)
 80043c2:	617b      	str	r3, [r7, #20]
        break;
 80043c4:	e00c      	b.n	80043e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7fe fbe3 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 80043ca:	6178      	str	r0, [r7, #20]
        break;
 80043cc:	e008      	b.n	80043e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	617b      	str	r3, [r7, #20]
        break;
 80043d4:	e004      	b.n	80043e0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	76bb      	strb	r3, [r7, #26]
        break;
 80043de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d074      	beq.n	80044d0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	005a      	lsls	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	d916      	bls.n	8004430 <UART_SetConfig+0x458>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d212      	bcs.n	8004430 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f023 030f 	bic.w	r3, r3, #15
 8004412:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	b29b      	uxth	r3, r3
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	b29a      	uxth	r2, r3
 8004420:	89fb      	ldrh	r3, [r7, #14]
 8004422:	4313      	orrs	r3, r2
 8004424:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	89fa      	ldrh	r2, [r7, #14]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	e04f      	b.n	80044d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	76bb      	strb	r3, [r7, #26]
 8004434:	e04c      	b.n	80044d0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004436:	7efb      	ldrb	r3, [r7, #27]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d828      	bhi.n	800448e <UART_SetConfig+0x4b6>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x46c>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	08004479 	.word	0x08004479
 8004450:	0800448f 	.word	0x0800448f
 8004454:	0800447f 	.word	0x0800447f
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800448f 	.word	0x0800448f
 8004460:	0800448f 	.word	0x0800448f
 8004464:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fe fc2a 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800446c:	6178      	str	r0, [r7, #20]
        break;
 800446e:	e013      	b.n	8004498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004470:	f7fe fc3c 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8004474:	6178      	str	r0, [r7, #20]
        break;
 8004476:	e00f      	b.n	8004498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <UART_SetConfig+0x510>)
 800447a:	617b      	str	r3, [r7, #20]
        break;
 800447c:	e00c      	b.n	8004498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7fe fb87 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8004482:	6178      	str	r0, [r7, #20]
        break;
 8004484:	e008      	b.n	8004498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448a:	617b      	str	r3, [r7, #20]
        break;
 800448c:	e004      	b.n	8004498 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	76bb      	strb	r3, [r7, #26]
        break;
 8004496:	bf00      	nop
    }

    if (pclk != 0U)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d018      	beq.n	80044d0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	085a      	lsrs	r2, r3, #1
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	441a      	add	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b0f      	cmp	r3, #15
 80044b6:	d909      	bls.n	80044cc <UART_SetConfig+0x4f4>
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044be:	d205      	bcs.n	80044cc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	e001      	b.n	80044d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bdb0      	pop	{r4, r5, r7, pc}
 80044e6:	bf00      	nop
 80044e8:	00f42400 	.word	0x00f42400

080044ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01a      	beq.n	8004602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ea:	d10a      	bne.n	8004602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
  }
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af02      	add	r7, sp, #8
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004640:	f7fc fcd6 	bl	8000ff0 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b08      	cmp	r3, #8
 8004652:	d10e      	bne.n	8004672 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f82d 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e023      	b.n	80046ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b04      	cmp	r3, #4
 800467e:	d10e      	bne.n	800469e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f817 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e00d      	b.n	80046ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b09c      	sub	sp, #112	; 0x70
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	e0a5      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	f000 80a1 	beq.w	8004820 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fc fc87 	bl	8000ff0 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80046ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d13e      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004708:	667b      	str	r3, [r7, #100]	; 0x64
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004714:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e6      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	663b      	str	r3, [r7, #96]	; 0x60
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004746:	64ba      	str	r2, [r7, #72]	; 0x48
 8004748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800474c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e067      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d04f      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478e:	d147      	bne.n	8004820 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004798:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	613b      	str	r3, [r7, #16]
   return(result);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047ec:	623a      	str	r2, [r7, #32]
 80047ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	69f9      	ldr	r1, [r7, #28]
 80047f2:	6a3a      	ldr	r2, [r7, #32]
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e010      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	f43f af4a 	beq.w	80046d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3770      	adds	r7, #112	; 0x70
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800484c:	b480      	push	{r7}
 800484e:	b097      	sub	sp, #92	; 0x5c
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487e:	d10e      	bne.n	800489e <UART_Start_Receive_IT+0x52>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <UART_Start_Receive_IT+0x48>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800488e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004892:	e02d      	b.n	80048f0 <UART_Start_Receive_IT+0xa4>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	22ff      	movs	r2, #255	; 0xff
 8004898:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800489c:	e028      	b.n	80048f0 <UART_Start_Receive_IT+0xa4>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10d      	bne.n	80048c2 <UART_Start_Receive_IT+0x76>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <UART_Start_Receive_IT+0x6c>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	22ff      	movs	r2, #255	; 0xff
 80048b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048b6:	e01b      	b.n	80048f0 <UART_Start_Receive_IT+0xa4>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	227f      	movs	r2, #127	; 0x7f
 80048bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048c0:	e016      	b.n	80048f0 <UART_Start_Receive_IT+0xa4>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ca:	d10d      	bne.n	80048e8 <UART_Start_Receive_IT+0x9c>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <UART_Start_Receive_IT+0x92>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	227f      	movs	r2, #127	; 0x7f
 80048d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048dc:	e008      	b.n	80048f0 <UART_Start_Receive_IT+0xa4>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	223f      	movs	r2, #63	; 0x3f
 80048e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048e6:	e003      	b.n	80048f0 <UART_Start_Receive_IT+0xa4>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2222      	movs	r2, #34	; 0x22
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	657b      	str	r3, [r7, #84]	; 0x54
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800491e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493a:	d107      	bne.n	800494c <UART_Start_Receive_IT+0x100>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d103      	bne.n	800494c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <UART_Start_Receive_IT+0x18c>)
 8004948:	665a      	str	r2, [r3, #100]	; 0x64
 800494a:	e002      	b.n	8004952 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <UART_Start_Receive_IT+0x190>)
 8004950:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d019      	beq.n	8004996 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
 8004982:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e6      	bne.n	8004962 <UART_Start_Receive_IT+0x116>
 8004994:	e018      	b.n	80049c8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	613b      	str	r3, [r7, #16]
   return(result);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f043 0320 	orr.w	r3, r3, #32
 80049aa:	653b      	str	r3, [r7, #80]	; 0x50
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b4:	623b      	str	r3, [r7, #32]
 80049b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	69f9      	ldr	r1, [r7, #28]
 80049ba:	6a3a      	ldr	r2, [r7, #32]
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	375c      	adds	r7, #92	; 0x5c
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	08004c87 	.word	0x08004c87
 80049dc:	08004b27 	.word	0x08004b27

080049e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b095      	sub	sp, #84	; 0x54
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a06:	643b      	str	r3, [r7, #64]	; 0x40
 8004a08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e6      	bne.n	80049e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3308      	adds	r3, #8
 8004a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e5      	bne.n	8004a1a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d118      	bne.n	8004a88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f023 0310 	bic.w	r3, r3, #16
 8004a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6979      	ldr	r1, [r7, #20]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	613b      	str	r3, [r7, #16]
   return(result);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e6      	bne.n	8004a56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a9a:	bf00      	nop
 8004a9c:	3754      	adds	r7, #84	; 0x54
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff fa71 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b088      	sub	sp, #32
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6979      	ldr	r1, [r7, #20]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	613b      	str	r3, [r7, #16]
   return(result);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e6      	bne.n	8004ada <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fa33 	bl	8003f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b1e:	bf00      	nop
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b096      	sub	sp, #88	; 0x58
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b3c:	2b22      	cmp	r3, #34	; 0x22
 8004b3e:	f040 8094 	bne.w	8004c6a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b48:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b4c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004b50:	b2d9      	uxtb	r1, r3
 8004b52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d179      	bne.n	8004c7e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8004baa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e6      	bne.n	8004b8a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	623b      	str	r3, [r7, #32]
   return(result);
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bdc:	633a      	str	r2, [r7, #48]	; 0x30
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d12e      	bne.n	8004c62 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0310 	bic.w	r3, r3, #16
 8004c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	617b      	str	r3, [r7, #20]
   return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b10      	cmp	r3, #16
 8004c48:	d103      	bne.n	8004c52 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff f9b0 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c60:	e00d      	b.n	8004c7e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff f998 	bl	8003f98 <HAL_UART_RxCpltCallback>
}
 8004c68:	e009      	b.n	8004c7e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	8b1b      	ldrh	r3, [r3, #24]
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0208 	orr.w	r2, r2, #8
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	831a      	strh	r2, [r3, #24]
}
 8004c7e:	bf00      	nop
 8004c80:	3758      	adds	r7, #88	; 0x58
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b096      	sub	sp, #88	; 0x58
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9c:	2b22      	cmp	r3, #34	; 0x22
 8004c9e:	f040 8094 	bne.w	8004dca <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ca8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004cb2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004cb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004cba:	4013      	ands	r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	1c9a      	adds	r2, r3, #2
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d179      	bne.n	8004dde <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d08:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e6      	bne.n	8004cea <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3308      	adds	r3, #8
 8004d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e5      	bne.n	8004d1c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d12e      	bne.n	8004dc2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f023 0310 	bic.w	r3, r3, #16
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6979      	ldr	r1, [r7, #20]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	613b      	str	r3, [r7, #16]
   return(result);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d103      	bne.n	8004db2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2210      	movs	r2, #16
 8004db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004db8:	4619      	mov	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff f900 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dc0:	e00d      	b.n	8004dde <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff f8e8 	bl	8003f98 <HAL_UART_RxCpltCallback>
}
 8004dc8:	e009      	b.n	8004dde <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	8b1b      	ldrh	r3, [r3, #24]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0208 	orr.w	r2, r2, #8
 8004dda:	b292      	uxth	r2, r2
 8004ddc:	831a      	strh	r2, [r3, #24]
}
 8004dde:	bf00      	nop
 8004de0:	3758      	adds	r7, #88	; 0x58
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	; (8004e34 <__libc_init_array+0x38>)
 8004e00:	4c0d      	ldr	r4, [pc, #52]	; (8004e38 <__libc_init_array+0x3c>)
 8004e02:	1b64      	subs	r4, r4, r5
 8004e04:	10a4      	asrs	r4, r4, #2
 8004e06:	2600      	movs	r6, #0
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	4d0b      	ldr	r5, [pc, #44]	; (8004e3c <__libc_init_array+0x40>)
 8004e0e:	4c0c      	ldr	r4, [pc, #48]	; (8004e40 <__libc_init_array+0x44>)
 8004e10:	f000 f82e 	bl	8004e70 <_init>
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	2600      	movs	r6, #0
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	08004ef0 	.word	0x08004ef0
 8004e38:	08004ef0 	.word	0x08004ef0
 8004e3c:	08004ef0 	.word	0x08004ef0
 8004e40:	08004ef4 	.word	0x08004ef4

08004e44 <memcpy>:
 8004e44:	440a      	add	r2, r1
 8004e46:	4291      	cmp	r1, r2
 8004e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e4c:	d100      	bne.n	8004e50 <memcpy+0xc>
 8004e4e:	4770      	bx	lr
 8004e50:	b510      	push	{r4, lr}
 8004e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	d1f9      	bne.n	8004e52 <memcpy+0xe>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <memset>:
 8004e60:	4402      	add	r2, r0
 8004e62:	4603      	mov	r3, r0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d100      	bne.n	8004e6a <memset+0xa>
 8004e68:	4770      	bx	lr
 8004e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6e:	e7f9      	b.n	8004e64 <memset+0x4>

08004e70 <_init>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	bf00      	nop
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr

08004e7c <_fini>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	bf00      	nop
 8004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e82:	bc08      	pop	{r3}
 8004e84:	469e      	mov	lr, r3
 8004e86:	4770      	bx	lr
